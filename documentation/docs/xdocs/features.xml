<?xml version="1.0"?>

<!DOCTYPE document SYSTEM "./dtd/document-v10.dtd">

<document>
  <header>
    <title>Features</title>
    <authors>
      <person name="Vincent Massol" email="vmassol@apache.org"/>
    </authors>
   </header>

  <body>

    <s1 title="Current scope and status of Cactus">

      <figure src="images/scope.jpg" alt="Scope and Status"/>

      <note>
        Support for testing the View layer is done through integration
        with <link href="http://httpunit.sourceforge.net">HttpUnit</link>.
        This is functional testing and not unit testing.
      </note>
      <note>
        EJB unit testing is done by calling the EJB to unit test as you
        would if you were writing code to call an EJB from a servlet.
      </note>

    </s1>

    <s1 title="General design features">

      <ul>
        <li>
          Cactus gives you a very good confidence that your code is going
          to run fine on the server it will be deployed to (thanks to Cactus
          in-container approach that executes the test <em>inside</em> the
          container),
        </li>
        <li>
          Cactus let you test container interactions. This is essential
          in a world where containers are providing more and more
          features for their components every day,
        </li>
        <li>
          Cactus let you test and automate the deployment process to your
          server (using prebuilt powerful custom Ant task),
        </li>
        <li>
          Cactus does not mandate any change to your classes to test, although
          it helps think about writing better code and do some refactoring,
        </li>
        <li>
          Cactus provides a good middle ground in term of test graininess :
          too fine-grained tests are hard to write (like mock objects tests
          that completely simulates the domain objects and focus exclusively
          on unit testing your logic code) and need complementary tests. Too
          coarse-grained tests (like functional tests) are not enough to
          easily uncover bugs and work in a iterative development process
          where tests are run very often to ensure everything is working
        </li>
      </ul>

    </s1>

    <s1 title="Detailed feature list">
      <p><br/></p>
      <ul>
        <li>
          Integrates seamlessly with the JUnit testing framework. Any tool
          that works with JUnit will work with Cactus because a Cactus test
          is a JUnit test ! See
          <link href="howto_testcase.html">TestCase Howto</link>
          tutorial for details.
        </li>
        <li>
          Provides a <code>ServletTestCase</code> class that your test case
          must extends for unit testing Servlets or any java classes that
          make use of Servlet API objects.
        </li>
        <li>
          Provides a <code>JspTestCase</code> class that your test case
          must extends for unit testing Taglibs or any java classes that
          make use of JSP API objects.
        </li>
        <li>
          Provides a <code>FilterTestCase</code> class that your test case
          must extends for unit testing Filters or any java classes that
          make use of Filter API objects.
        </li>
        <li>
          Extends JUnit by defining two additional (and optional) methods
          that can be implemented for each test case (i.e. for each
          <code>testXXX()</code> method) : <code>beginXXX()</code> and
          <code>endXXX()</code>. See the
          <link href="howto_testcase.html">TestCase Howto</link> tutorial
          for details.
        </li>
        <li>
          Predefined Ant build scripts that demonstrate how to automate Cactus
          unit tests (automatically starting your servlet engine, running the
          tests and stopping your server). There are scripts provided for the
          following Servlet engines (but it is easy to add new engines) :
          <ul>
            <li>
              Tomcat 3.2 (Servlet API 2.2)
            </li>
            <li>
              Tomcat 3.3 (Servlet API 2.2)
            </li>
            <li>
              Tomcat 4.0 (Servlet API 2.3)
            </li>
            <li>
              Resin 1.2 (Servlet API 2.2)
            </li>
            <li>
              Resin 1.3 (Servlet API 2.3)
            </li>
            <li>
              Resin 2.0 (Servlet API 2.2 and 2.3)
            </li>
            <li>
              WebLogic 5.1 (Servlet API 2.2)
            </li>
            <li>
              Orion 1.4 (Servlet API 2.2 and 2.3)
            </li>
            <li>
              Orion 1.5 (Servlet API 2.2 and 2.3)
            </li>
          </ul>
        </li>
        <li>
          Handles <code>setUp()</code> and <code>tearDown()</code> methods
          which work the same as for JUnit except that they are run on the
          server side before and after calling each <code>testXXX()</code>
          method
        </li>
        <li>
          Tested with all versions of JUnit up to 3.7 included
        </li>
        <li>
          Support for Servlet API 2.2 and 2.3 (Support for Servlet API 2.1 is
          no longer provided)
        </li>
        <li>
          Works with JDK 1.2 or 1.3 (not tested with 1.4 yet)
        </li>
        <li>
          Wraps some of the standard API objects in order to provide
          additional methods to help write unit tests.
          See the <link href="howto_testcase.html">TestCase
          Howto</link> tutorial for details.
        </li>
        <li>
          Transparent Log4j logging (if you don't have Log4j in your classpath
          no logging is done) to help debug problems.
        </li>
        <li>
          HttpUnit integration. See the
          <link href="howto_httpunit.html">HttpUnit Howto</link>) tutorial
          for details. This enables
          Cactus to provide strong and integrated functional
          testing features.
        </li>
      </ul>
    </s1>

  </body>
</document>
