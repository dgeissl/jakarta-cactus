<?xml version="1.0"?>

<!DOCTYPE document SYSTEM "./dtd/document-v10.dtd">

<document>
  <header>
    <title>FAQ</title>
    <authors>
      <person name="Vincent Massol" email="vmassol@apache.org"/>
    </authors>
  </header>

  <body>

    <s1 title="FAQ Content">
      <ul>

        <li>
          <jump anchor="faq1">"Can't find resource for cactus" error
          message</jump>
        </li>
        <li>
          <jump anchor="faq2">How can I have a web.xml that is valid both for
          testing and for production ?</jump>
        </li>
        <li>
          <jump anchor="faq3">I'm getting a
          <code>java.io.StreamCorruptedException: InputStream does not contain a
          serialized object</code> error. What does it mean ?</jump>
        </li>
        <li>
          <jump anchor="faq4">How can I test the chaining of several HTTP
          requests ?</jump>
        </li>
        <li>
          <jump anchor="faq5">The Ant runservertests task hangs when my server
          is started</jump>
        </li>
        <li>
          <jump anchor="faq6">I'm getting a
          "<code>not a valid response</code> error message. What does it
          mean ?</jump>
        </li>
      </ul>
    </s1>

    <anchor id="faq1"/>
    <s1 title="Can't find resource for cactus error message">

      <p>
        If you get the following stack trace :
      </p>

<source><![CDATA[
java.lang.ExceptionInInitializerError: java.util.MissingResourceException:
  Can't find bundle for base name cactus, locale en_GB
at java.util.ResourceBundle.throwMissingResourceException(ResourceBundle.java:707)
at java.util.ResourceBundle.getBundleImpl(ResourceBundle.java:679)
at java.util.ResourceBundle.getBundle(ResourceBundle.java:546)
]]></source>

      <p>
        it simply means that you have not put the cactus.properties file in
        your CLASSPATH (i.e. the directory which contains this file should
        be in the CLASSPATH). This file is the Cactus configuration file and
        is required. Check the Cactus
        <link href="howto_config.html">Configuration Howto</link> page for
        more information.
      </p>
    </s1>

    <anchor id="faq2"/>
    <s1 title="How can I have a web.xml that is valid both for testing and for production ?">

      <s2 title="Question">
        <p>
          Cactus needs to have a few entries set in the <code>web.xml</code>
          file (redirector definition and mappings mostly). The application to
          test also needs its own entries. What would be nice would be to be
          able to use the same <code>web.xml</code> file in the build process
          for both application testing and deployment to production.
        </p>
      </s2>
      <s2 title="Solution">
        <p>
            Here's how I accomplished conditional inclusion
            of Cactus web.xml configuration.  My web.xml file is capable of
            working standalone without requiring any filtered copy to work.
            In Ant I'm doing this:
        </p>
<source><![CDATA[
<!-- Activate the Cactus web.xml configuration -->
<copy todir="${admin.build.dir}/WEB-INF"
      file="web/admin/WEB-INF/web.xml"
      overwrite="yes">
  <filterset>
    <filter token="start.cactus.config" value="--&gt;" />
    <filter token="end.cactus.config" value="&lt;!--" />
  </filterset>
</copy>]]></source>

        <p>
          In <code>web.xml</code> I have this:
        </p>

<source><![CDATA[
<!-- Cactus configuration
Note: Do not place any XML comments in this Cactus configuration section
(Ant's filtered copy is used to activate this configuration when the test
web application is built)
-->
<!-- Begin Cactus Configuration @start.cactus.config@
<servlet>
  <servlet-name>ServletRedirector</servlet-name>
  <servlet-class>org.apache.cactus.server.ServletTestRedirector</servlet-class>
</servlet>

<servlet>
    <servlet-name>JspRedirector</servlet-name>
    <jsp-file>/somewhere/jspRedirector.jsp</jsp-file>
</servlet>

<servlet-mapping>
    <servlet-name>ServletRedirector</servlet-name>
    <url-pattern>/ServletRedirector/</url-pattern>
</servlet-mapping>

<servlet-mapping>
    <servlet-name>JspRedirector</servlet-name>
    <url-pattern>/JspRedirector/</url-pattern>
</servlet-mapping>

@end.cactus.config@ End Cactus Configuration -->
]]></source>

      </s2>

    </s1>

    <anchor id="faq3"/>
    <s1 title="I'm getting a java.io.StreamCorruptedException error. What does it mean ?">

      <note>
        This error only appears for Cactus 1.3dev (before 21/04/2002) and
        below. Cactus 1.3 no longer uses a serialized object to return test
        result. It uses an XML string.
      </note>

      <s2 title="Solution">
        <p>
          This exception results when client-side Cactus code attempts to talk
          to a misconfigured installation of Cactus on the server side. The
          reason for the obscure exception is this: Cactus makes two requests
          to the server. In the first, the client-side test runner requests that
          such-and-such a test be run on the server (an oversimplification,
          please see: XXXX). Immediately after the response from the server
          the client code makes a second request, this time for the results of
          the server-side test. Cactus is supposed to send back a serialized
          Object containing the results. Cactus then attempts to deserialize
          this Object from the input stream in the response. If
          Cactus is installed properly on the server, this process
          works transparently. If not (for instance the second
          request does not even arrive at a Cactus redirector) then
          the response to the second request (which very well may be
          a 404 or 500 error) will not contain the object that
          client-cactus expects. This leads to the
          StreamCorruptedException.
        </p>
        <p>
          When troubleshooting this error, the most likely prospect
          is that the requests from client-Cactus are not even
          reaching server-Cactus. This can happen when the
          <code>cactus.properties</code> contains a bad entry. For instance, I
          have run into this problem when building several different
          testing-applications. I tried to run my tests against
          <code>http://localhost/webapp1/ServletRedirector/</code> when I needed
          to be running against
          <code>http://localhost/webapp2/ServletRedirector/</code>. This can
          also happen if your web.xml file contains an error, or does not
          properly map the URLs contained in cactus.properties to the
          Cactus redirectors.
        </p>
        <p>
          A good way to check whether your requests are reaching a
          Cactus redirector is to manually enter in the URLs for all
          of the redirectors you use into the navigation bar of your
          web-browser. Actually the Cactus redirectors provide a URL just for
          that : <code>http://localhost/webapp/ServletRedirector?Cactus_Service=RUN_TEST</code>
          (this also works for the other redirectors).
        </p>
        <note>
          If you call <code>http://localhost/webapp/ServletRedirector</code>
          directly, you'll get a 500 error and get a stack trace (in the log or
          along with your error page) that says <code><![CDATA[Missing service
          name parameter [] in HTTP request.]]></code>. This is because the
          Cactus redirector expects HTTP parameter from the Cactus client side.
        </note>
        <p>
          Another likely error is that your server-side classpath
          does not contain a copy of the cactus.jar. (Cactus is
          effectively not present on the server.) According to
          e-mails on the Cactus user list, the
          <code>StreamCorruptedException</code> could also result when you are
          using the wrong version of the servlet.jar in some area
          (any version prior to 2.2, or using servlet.jar 2.2 with a
          Cactus-2.3 installation).
        </p>
      </s2>

    </s1>

    <anchor id="faq4"/>
    <s1 title="How can I test the chaining of several HTTP requests ?">

      <s2 title="Question">
        <p>
          Let's imagine that I have one servlet that performs an HTTP redirect
          to a JSP page (or to another servlet). How do I test it with Cactus ?
        </p>
      </s2>
      <s2 title="Solution">
        <p>
          Short answer : you don't !
        </p>
        <p>
          Long answer : Cactus is meant to be a unit testing tool, meaning it
          lets you perform tests for a given method and then it lets you
          assert the result from that method.
        </p>
        <p>
          In the above scenario, a typical Cactus test will consist in
          verifying that the return HTTP response is an HTTP redirect (by
          checking the HTTP response code - 302 - in the <code>endXXX()</code>
          method) and possibly also checking the URL of the redirect page.
        </p>
        <p>
          Then, as a second test, you could (if you wish) verify that calling
          the URL of the JSP does return such HTML content (using HttpUnit
          integration for example). Note that this second test is rather a
          functional test than a unit test but it can still be viewed as
          unit testing the <code>doGet()</code> method of the JSP ...
        </p>
      </s2>

    </s1>

    <anchor id="faq5"/>
    <s1 title="The Ant runservertests task hangs when my server is started">

      <s2 title="Question">
        <p>
          When I use the <code>runservertests</code> Cactus custom Ant task,
          it starts my server allright but then hangs and the tests are not
          executed. What is happening ?
        </p>
      </s2>
      <s2 title="Solution">
        <p>
          It means that the <code>testURL</code> attribute you've specified
          in <code>runservertests</code> is not a valid URL. It must be a URL
          that is valid when the server is up. To diagnosis the problem simply
          open a browser once your server is started (i.e. when the task hangs)
          and type the URL in your browser. An alternative to debug is also to
          run Ant in debug mode (<code>ant -debug [your target]</code>).
        </p>
        <p>
          With Cactus 1.3, the correct URL to call is the following, which is
          always valid :
          <code>http://localhost:8080/webapp/ServletRedirector?Cactus_Service=RUN_TEST</code>.
          Of course replace <code>webapp</code> by your webapp context and
          replace the port by the one you're using.
        </p>
      </s2>

    </s1>

    <anchor id="faq6"/>
    <s1 title="I'm getting a 'not a valid response' error message. What does it mean ?">

      <s2 title="Question">
        <p>
         When I run my Cactus test, I'm getting the following :
        </p>

<source><![CDATA[
testRequestDispatcherInclude(org.apache.cactus.sample.TestSampleServlet)
  org.apache.cactus.util.ChainedRuntimeException:

Not a valid response
  at
org.apache.cactus.client.WebTestResultParser.readRootElement(
  WebTestResultParser.java;org/apache/cactus/util/log/LogAspect.java(1k):134)
]]></source>

      </s2>
      <s2 title="Solution">
        <p>
          It means that Cactus could not connect to the server side properly.
          There could several reasons for this : a valid Redirector URL but
          not pointing to the Redirector, a secured resource, etc.
        </p>
        <p>
          To easiest way to diagnosis the problem is to enable Cactus logging
          (see the <link href="howto_config.html">Configuration Howto</link>
          for how to do this). The cactus client log
          (<code>cactus_client.log</code> will clearly give the error).
        </p>
      </s2>

    </s1>

  </body>
</document>
