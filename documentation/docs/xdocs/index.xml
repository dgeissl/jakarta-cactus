<?xml version="1.0"?>

<document id="index">

  <properties>
    <title>Jakarta Cactus</title>
    <authors>
      <author name="Vincent Massol" email="vmassol@apache.org"/>
    </authors>
  </properties>

  <body>

    <section title="Project Description">
      <p>
        Cactus is a simple test framework for unit testing server-side java
        code (Servlets, EJBs, Tag Libs, Filters, ...).
      </p>
      <p>
        The intent of Cactus is to lower the cost of writing tests for
        server-side code. It uses <link href="ext:junit">JUnit</link> and 
        extends it.
      </p>
      <p>
        Cactus implements an in-container strategy (See
        <link href="site:how_it_works">How it works</link>).
      </p>
      <p>
        <figure src="images/ecosystem.jpg" alt="The Cactus Ecosystem" 
          usemap="#ecosystem">

          <map name="ecosystem">
            <area shape="circle" href="site:index" coords="225,200,35"/>
            <area shape="circle" href="site:integration_eclipse" coords="165,145,35"/>
            <area shape="circle" href="site:integration_browser" coords="305,220,35"/>
            <area shape="circle" href="ext:maven_cactus" coords="390,175,35"/>
            <area shape="circle" href="ext:strutstestcase" coords="375,235,35"/>
            <area shape="circle" href="ext:junitee" coords="345,295,35"/>
            <area shape="circle" href="ext:jenerator" coords="355,115,35"/>
            <area shape="circle" href="site:integration_ant" coords="140,225,35"/>
            <area shape="circle" href="site:integration_jetty" coords="280,145,35"/>
            <area shape="circle" href="site:howto_sample" coords="55,200,35"/>
            <area shape="circle" href="site:howto_config" coords="225,270,35"/>
          </map>            	
         
        </figure>
      </p>
      <p>
        The Cactus Ecosystem is made of several components:
      </p>
      <ul>
        <li>
          The Cactus Framework: This is the heart of Cactus. It is the engine
          that provides the API to write Cactus tests.
        </li>
        <li>
          The Cactus Integration Modules: They are front ends and frameworks 
          that provide easy ways of using the Cactus Framework (Ant scripts,
          Eclipse plugin, Maven plugin, ...).
        </li>
        <li>
          The Cactus Samples: They are simple projects that demonstrate how
          to write Cactus tests and how to use some of the Integration Modules.
        </li>
      </ul>
    </section>

    <anchor id="unittest_types"/>
    <section title="Different kinds of unit tests">

      <p>
        There are several kinds of unit testing frameworks. We categorize them
        in 3 types:
      </p>
      <ol>
        <li>
          <strong>Type 1: code logic unit testing</strong>. Probably the
          best strategy for these tests is to use a
          <link href="ext:mockobjects">Mock Objects</link> type
          framework.
        </li>
        <li>
          <strong>Type 2: integration unit testing</strong>. Cactus is
          typically in this category (I'll let you judge if it is the best or
          not :)). These tests will exercise the interactions with the
          container.
        </li>
        <li>
          <strong>Type 3: functional unit testing</strong>. These unit tests
          will let you test the returned values from your server code. This is
          for example
          <link href="ext:httpunit">HttpUnit</link> (Note that HttpUnit also 
          performs standard functional testing - as opposed to functional unit 
          testing -, which let you test full use cases - a login use case for 
          example, which is comprised of several requests/responses).
        </li>
      </ol>
      <p>
        Ideally you would use 3 different frameworks just to unit test your
        code ! Then you have to think about acceptance testing, system
        integration testing, ...
      </p>
      <p>
        Cactus was developed to fit Type 2 but also to be a very good
        compromise for Type 1 and 3, with the idea that it is much easier to
        have to write tests for a single framework than for several ! Moreover,
        you can never fully test your code. We believe Cactus provides a middle
        ground that provides a high confidence that your code will run when
        deployed. However, it is your choice and you can use Cactus only for
        Type 2 if you wish.
      </p>

    </section>

    <section title="Getting Started">

      <p>
        To get started, read the
        <link href="site:getting_started">Getting Started</link> guide.
      </p>

    </section>

  </body>
</document>