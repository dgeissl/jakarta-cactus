<?xml version="1.0"?>

<!DOCTYPE document SYSTEM "./dtd/document-v10.dtd">

<document>
  <header>
    <title>Configuration Howto</title>
    <authors>
      <person name="Vincent Massol" email="vmassol@apache.org"/>
    </authors>
  </header>

  <body>

    <s1 title="The configuration files">

      <note>
        You should read the <link href="getting_started.html">Getting
        Started</link> guide first.
      </note>

      <p>
        Here are the configuration files used by Cactus :
      </p>

      <figure src="images/config.jpg" alt="Configuration files"/>

      <p>
        There are two kind of configuration files :
      </p>
      <ul>
        <li>
          <jump anchor="clientside">Client side configuration files</jump>
        </li>
        <li>
          <jump anchor="serverside">Server side configuration files</jump>
        </li>
      </ul>

      <anchor id="clientside"/>
      <s2 title="Client side configuration files">

        <s3 title="cactus.properties">

          <p>
            The <code>cactus.properties</code> file contains several
            configuration properties for Cactus.
          </p>
          <p>
            Here are the properties that you can set in
            <code>cactus.properties</code> :
          </p>

          <table>
            <tr>
              <td>
                <strong>Property Name</strong>
              </td>
              <td>
                <code>cactus.contextURL</code>
              </td>
            </tr>
            <tr>
              <td>
                <strong>Description</strong>
              </td>
              <td>
                Webapp Context under which the application to test runs.
              </td>
            </tr>
            <tr>
              <td>
                <strong>Example</strong>
              </td>
              <td>
                <code>cactus.contextURL = http://localhost:8080/test</code>
              </td>
            </tr>
          </table>

          <p>
            <br/>
          </p>

          <table>
            <tr>
              <td>
                <strong>Property Name</strong>
              </td>
              <td>
                <code>cactus.servletRedirectorName</code>
              </td>
            </tr>
            <tr>
              <td>
                <strong>Description</strong>
              </td>
              <td>
                Name of the Cactus Servlet Redirector as it is mapped on the
                server side in <code>web.xml</code> (see below). This property
                is needed only if your test classes are extending
                <code>ServletTestCase</code> (see the
                <link href="howto_testcase.html">TestCase Howto</link>
                tutorial).
              </td>
            </tr>
            <tr>
              <td>
                <strong>Example</strong>
              </td>
              <td>
                <code>cactus.servletRedirectorName = ServletRedirector</code>
              </td>
            </tr>
          </table>

          <p>
            <br/>
          </p>

          <table>
            <tr>
              <td>
                <strong>Property Name</strong>
              </td>
              <td>
                <code>cactus.jspRedirectorName</code>
              </td>
            </tr>
            <tr>
              <td>
                <strong>Description</strong>
              </td>
              <td>
                Name of the Cactus JSP Redirector as it is mapped on the
                server side in <code>web.xml</code> (see below). This property
                is needed only if your test classes are extending
                <code>JspTestCase</code> (see the
                <link href="howto_testcase.html">TestCase Howto</link>
                tutorial).
              </td>
            </tr>
            <tr>
              <td>
                <strong>Example</strong>
              </td>
              <td>
                <code>cactus.jspRedirectorName = JspRedirector</code>
              </td>
            </tr>
          </table>

          <p>
            <br/>
          </p>

          <table>
            <tr>
              <td>
                <strong>Property Name</strong>
              </td>
              <td>
                <code>cactus.filterRedirectorName</code> (For J2EE API 1.3 only)
              </td>
            </tr>
            <tr>
              <td>
                <strong>Description</strong>
              </td>
              <td>
                Name of the Cactus Filter Redirector as it is mapped on the
                server side in <code>web.xml</code> (see below). This property
                is needed only if your test classes are extending
                <code>FilterTestCase</code> (see the
                <link href="howto_testcase.html">TestCase Howto</link>
                tutorial).
              </td>
            </tr>
            <tr>
              <td>
                <strong>Example</strong>
              </td>
              <td>
                <code>cactus.filterRedirectorName = FilterRedirector</code>
              </td>
            </tr>
          </table>

          <p>
            <br/>
          </p>

          <table>
            <tr>
              <td>
                <strong>Property Name</strong>
              </td>
              <td>
                <code>cactus.enableLogging</code>
              </td>
            </tr>
            <tr>
              <td>
                <strong>Description</strong>
              </td>
              <td>
                If set to "true" Cactus internal logging is enabled. Note that
                you will also need <code>log4j.jar</code> in your classpath to
                activate logging. If not specified or set to a value different
                than "true", Cactus logging is disabled.
              </td>
            </tr>
            <tr>
              <td>
                <strong>Example</strong>
              </td>
              <td>
                <code>cactus.enableLogging = true</code>
              </td>
            </tr>
          </table>

          <p>
            Sample <code>cactus.properties</code> file :
          </p>

<source><![CDATA[
# Configuration file for Cactus.

# Each project using Cactus need to have such a file put in the client side
# CLASSPATH (Meaning the directory containgin this file should be in the client
# side CLASSPATH, not the file itself of course ... :) )

# Defines the URLs that will be used by Cactus to call it's redirectors.
# You need to specify in these URLs the webapp context that you use for your
# application. In the example below, the context is "test".

# Web app Context under which our application to test runs
cactus.contextURL = http://localhost:@test.port@/test

# Default Servlet Redirector Name. Used by ServletTestCase test cases.
cactus.servletRedirectorName = ServletRedirector

# Default JSP Redirector Name. Used by JspTestCase test cases.
cactus.jspRedirectorName = JspRedirector

# Default Filter Redirector Name. Used by FilterTestCase test cases.
cactus.filterRedirectorName = FilterRedirector

# Enable Cactus internal logging
#cactus.enableLogging = true
]]></source>

          <anchor id="client_location_cactus_properties"/>
          <p>
            There are 2 ways to tell Cactus where <code>cactus.properties</code>
            is located.
          </p>
          <ul>
            <li>
              The preferred mechanism is to put it in the client side
              classpath (i.e. have a CLASSPATH entry that points to the
              directory where it is located).
            </li>
            <li>
              The other option is to pass a command line parameter when
              starting your JVM. See the
              <jump anchor="client_command_line">Command line section</jump>
              below.
            </li>
          </ul>

        </s3>

        <anchor id="client_log_client_properties"/>
        <s3 title="log_client.properties">

          <p>
            A default <code>log_client.properties</code> is already provided
            in the <code>cactus.jar</code> jar. It is used for
            configuring Log4j, which is the logging framework used by Cactus
            to log debug information.
          </p>
          <p>
            If the Log4j jar is not present on the client side classpath,
            Cactus will not log anything. In addition you need to
            explicitely tell Cactus to perform logging (if that's what you
            want). This can be achieved in 2 ways :
          </p>
          <ul>
            <li>
              By having a <code>cactus.enableLogging = true</code> property
              in your <code>cactus.properties</code> file (as described
              above),
            </li>
            <li>
              By passing a property on the Java command line when starting
              the JVM. See the
              <jump anchor="client_command_line">Command line section</jump>.
            </li>
          </ul>
          <p>
            The default <code>log_client.properties</code> is :
          </p>

<source><![CDATA[
# Properties for configuring Log4j
# This is the configuring for logging on the JUnit side (i.e. the client side)

log4j.appender.cactus = org.apache.log4j.FileAppender
log4j.appender.cactus.File = cactus_client.log
log4j.appender.cactus.Append = false
log4j.appender.cactus.layout = org.apache.log4j.PatternLayout
log4j.appender.cactus.layout.ConversionPattern = %d{ABSOLUTE} [%t] %-5p %-30.30c{2} %x - %m %n

# Any application log which uses Log4J will be logged to the Cactus log file
log4j.rootCategory=DEBUG, cactus

# By default we don't log at the DEBUG level for Cactus log, in order not to generate too
# many logs. However, should a problem arise and logs need to be sent to the Cactus dev team,
# then we will ask you to change this to DEBUG.
log4j.category.org.apache.cactus = WARN, cactus
log4j.additivity.org.apache.cactus=false
]]></source>

          <p>
            If you want to understand how to configure Log4j, go to the
            <link href="http://jakarta.apache.org/log4j">Log4j web site</link>.
          </p>

          <p>
            If you wish to define another file name and location or other
            logging parameter, just provide your own
            <code>log_client.properties</code> file (it has to be named this
            way) and put in the client side classpath <strong>before</strong>
            the <code>cactus.jar</code> file.
          </p>

        </s3>

        <anchor id="client_command_line"/>
        <s3 title="Command line parameters">

          <note>
            Command line parameters are purely optional and should only be used
            for very specific cases where the preferred method cannot be used
            (the preffered method is through <code>cactus.properties</code>).
          </note>

          <p>
            The following command line properties can be passed on the java
            command line :
          </p>

          <table>
            <tr>
              <td>
                <strong>Property Name</strong>
              </td>
              <td>
                <code>cactus.enableLogging</code>
              </td>
            </tr>
            <tr>
              <td>
                <strong>Description</strong>
              </td>
              <td>
                If set to "true" Cactus internal logging is enabled. Note that
                you will also need <code>log4j.jar</code> in your classpath to
                activate logging. If not specified or set to a value different
                than "true", Cactus logging is disabled.
              </td>
            </tr>
            <tr>
              <td>
                <strong>Example</strong>
              </td>
              <td>
                <code>-Dcactus.enableLogging=true</code>
              </td>
            </tr>
          </table>

          <p>
            <br/>
          </p>

          <table>
            <tr>
              <td>
                <strong>Property Name</strong>
              </td>
              <td>
                <code>cactus.config</code>
              </td>
            </tr>
            <tr>
              <td>
                <strong>Description</strong>
              </td>
              <td>
                Specify where to find the Cactus configuration file.
                By default Cactus looks for a <code>cactus.properties</code>
                file in the classpath. This property overrides this behaviour.
              </td>
            </tr>
            <tr>
              <td>
                <strong>Example</strong>
              </td>
              <td>
                <code>-Dcactus.config=conf/mycactus.properties</code>
              </td>
            </tr>
          </table>

        </s3>

      </s2>

      <anchor id="serverside"/>
      <s2 title="Server side configuration files">

        <s3 title="cactus.properties">

          <p>
            First and foremost, this file is completely optional on the server
            side (whereas it is mandatory on the client side). It is only
            used to turn on Cactus internal logging on the server side.
          </p>
          <note>
            Please note that Cactus logging on the server side can also be
            turned on by using a java command line property (see the
            <jump anchor="server_command_line">command line</jump> section
            below).
          </note>

          <p>
            Here are the properties that you can set in
            <code>cactus.properties</code> :
          </p>

          <table>
            <tr>
              <td>
                <strong>Property Name</strong>
              </td>
              <td>
                <code>cactus.enableLogging</code>
              </td>
            </tr>
            <tr>
              <td>
                <strong>Description</strong>
              </td>
              <td>
                If set to "true" Cactus internal logging is enabled. Note that
                you will also need <code>log4j.jar</code> in your classpath to
                activate logging. If not specified or set to a value different
                than "true", Cactus logging is disabled.
              </td>
            </tr>
            <tr>
              <td>
                <strong>Example</strong>
              </td>
              <td>
                <code>cactus.enableLogging = true</code>
              </td>
            </tr>
          </table>

          <p>
            Location of <code>cactus.properties</code> works in the same
            way as on the
            <jump anchor="client_location_cactus_properties">client side</jump>.
          </p>

        </s3>

        <s3 title="web.xml">

          <p>
            Your server side tests are packaged as a web application (either
            expanded or as .war file) and thus you need to have a
            <code>web.xml</code> file to configure your test web application.
          </p>
          <note>
            If your servlet engine does not support web applications, it
            won't support a <code>web.xml</code> file. You'll need to edit
            your servlet engine proprietary configuration file and find out
            out to map a Servlet, JSP or Filter to a URL.
          </note>
          <p>
            You need to register the Cactus Redirectors that you use (see
            <link href="how_it_works.html">How it works</link> if you don't
            know what a Cactus Redirector is).
          </p>
          <p>
            For example, in order to match the sample
            <code>cactus.properties</code> file defined above, we'll need to
            name our web application "<code>test</code>" and  write our
            <code>web.xml</code> in the following way :
          </p>

<source><![CDATA[
<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE web-app
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
    "http://java.sun.com/j2ee/dtds/web-app_2_3.dtd">

<web-app>

    <filter>
        <filter-name>FilterRedirector</filter-name>
        <filter-class>org.apache.cactus.server.FilterTestRedirector</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>FilterRedirector</filter-name>
        <url-pattern>/FilterRedirector</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>ServletRedirector</servlet-name>
        <servlet-class>org.apache.cactus.server.ServletTestRedirector</servlet-class>
    </servlet>

    <servlet>
        <servlet-name>JspRedirector</servlet-name>
        <jsp-file>/jspRedirector.jsp</jsp-file>
    </servlet>

    <servlet-mapping>
        <servlet-name>ServletRedirector</servlet-name>
        <url-pattern>/ServletRedirector</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>JspRedirector</servlet-name>
        <url-pattern>/JspRedirector</url-pattern>
    </servlet-mapping>

</web-app>
]]></source>

          <note>
            If you are using the JSP Redirector (i.e. you have test classes
            that extend <code>JspTestCase</code>), you <strong>must</strong>
            copy the <code>jspRedirector.jsp</code> file (found in the
            <code>sample/web</code> directory where you unpacked your
            Cactus distribution) in a directory in your webapp and you need to
            put it's relative path in the mapping defined above (here we
            have put it in the webapp root.
          </note>

          <p>
            If you want to provide some initialisation parameters that will
            be available to the <code>config</code> implicit object available
            in your test case, simply use the standard <code>
            &lt;init-param&gt;</code> tags.
          </p>
          <p>
            For example, for the Servlet Redirector (same principle applies
            to all other redirectors) :
          </p>

<source><![CDATA[
[...]
    <servlet>
        <servlet-name>ServletRedirector</servlet-name>
        <servlet-class>org.apache.cactus.server.ServletTestRedirector</servlet-class>
        <init-param>
          <param-name>param1</param-name>
          <param-value>value1 used for testing</param-value>
        </init-param>
    </servlet>
[...]
]]></source>

          <note>
            Within your <code>testXXX()</code> code, you can also call the
            <code>config.setInitParameter()</code> method (<code>config</code>
            being the implicit object of type <code>ServletConfig</code>) to
            simulate initialisation parameters as if they had been defined in
            your <code>web.xml</code>.
          </note>

          <p>
            Lastly, if you need to unit test code that uses the Servlet
            Security API, please check the
            <link href="howto_security.html">Security Howto</link>.
          </p>

        </s3>

        <s3 title="log_server.properties">

          <p>
            It works in the same way as for the
            <jump anchor="client_log_client_properties">client side</jump>.
          </p>
          <p>
            The default <code>log_server.properties</code> is :
          </p>

<source><![CDATA[
# Properties for configuring Log4j
# This is the configuring for logging on the server side

log4j.appender.cactus = org.apache.log4j.FileAppender
log4j.appender.cactus.File = cactus_server.log
log4j.appender.cactus.Append = false
log4j.appender.cactus.layout = org.apache.log4j.PatternLayout
log4j.appender.cactus.layout.ConversionPattern = %d{ABSOLUTE} [%t] %-5p %-30.30c{2} %x - %m %n

# Any application log which uses Log4J will be logged to the Cactus log file
log4j.rootCategory=DEBUG, cactus

# By default we don't log at the DEBUG level for Cactus log, in order not to generate too
# many logs. However, should a problem arise and logs need to be sent to the Cactus dev team,
# then we will ask you to change this to DEBUG.
log4j.category.org.apache.cactus = WARN, cactus
log4j.additivity.org.apache.cactus=false
]]></source>

          <p>
            If you wish to define another file name and location or other
            logging parameter, just provide your own
            <code>log_server.properties</code> file (it has to be named this
            way) and put in the <code>WEB-INF/classes</code> directory of
            your webapp (and hope that the webapp classloader of your server
            picks up the files in <code>WEB-INF/classes</code> before the ones
            in <code>WEB-INF/lib</code>, where <code>cactus.jar</code>
            is located ... :) I don't know if this is part of the
            specification). Alternatively, edit the file in
            <code>cactus.jar</code> !
          </p>

        </s3>

        <anchor id="server_command_line"/>
        <s3 title="Command line parameters">

          <p>
            Command line parameters on the server side are exactly the same
            as on the client side. in order to use them you'll have to modify
            the startup script of your container and add your properties to it.
          </p>
          <p>
            Again, please bear in mind that this is completely optional and
            that the preferred method is by using
            <code>cactus.properties</code>.
          </p>

        </s3>

      </s2>

    </s1>

  </body>
</document>
