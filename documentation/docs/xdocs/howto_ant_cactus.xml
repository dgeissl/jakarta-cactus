<?xml version="1.0"?>

<!DOCTYPE document SYSTEM "./dtd/document-v10.dtd">

<document>
  <header>
    <title>Running Cactus tests from Ant</title>
    <authors>
      <person name="Vincent Massol" email="vmassol@apache.org"/>
    </authors>
  </header>

  <body>

    <s1 title="Introduction">

      <note>
        <strong>You need to have a good understanding of Ant before
        reading this tutorial. If you don't, I suggest you read the
        <link href="http://jakarta.apache.org/ant/manual/index.html">Ant
        User Manual</link> first</strong>.
      </note>

      <p>
        This tutorial explains how start Cactus tests from your Ant build
        script (i.e. <code>build.xml</code>).
      </p>
      <p>
        The Ant tasks involved for running a Cactus test are the following :
      </p>
      <ul>
        <li>
          <em>Step 0</em> : (optional) Deploy configuration files for your
          container,
        </li>
        <li>
          <em>Step 1</em> : Package your Cactus tests as a WAR file and
          deploy it to your servlet engine webapps directory,
        </li>
        <li>
          <em>Step 2</em> : Start your servlet engine if it is not already
          started,
         </li>
         <li>
           <em>Step 3</em> : Run the tests using JUnit,
         </li>
         <li>
           <em>Step 4</em> : Stop the servlet engine (if need be)
         </li>
       </ul>
       <p>
         Cactus provides a custom Ant task (called the
         <code>runservertests</code> task) that helps perform all these tasks.
         The rest of this tutorial will explain how to write an Ant build
         file (<code>build.xml</code>) that performs these tasks and use
         the Cactus custom Ant task.
       </p>
        <p>
          During the remainder of this tutorial we will show examples for
          Tomcat 4.0. However, the principle can be applied to any other
          container. Ant Scripts for other containers can be found in the
          <code>/sample/build</code> directory where you have unpacked the
          Cactus distribution.
        </p>

     </s1>

     <s1 title="The 'runservertests' task">

        <p>
          This task will perform several actions, in the following order :
        </p>
        <ul>
          <li>
            Check if a server is already started by constantly trying to
            call the test URL defined by the <code>testURL</code>
            attribute (see the example below),
          </li>
          <li>
            If a server is not started, call the Ant target defined by the
            <code>startTarget</code> attribute (see the example below). This
            target is
            supposed to start your container. The <code>runservertests</code>
            task will then constantly poll the server by calling the test URL
            until the server answers back,
          </li>
          <li>
            It will then call the Ant target defined by the
            <code>testTarget</code> attribute (see the example below). This
            target is
            supposed to start the unit tests. This is usually implemented
            by using the Ant <code>junit</code> task,
          </li>
          <li>
            Once the tests are finished (i.e. when the
            <code>testTarget</code> has finished executing), it will then
            call the Ant target defined by the <code>stopTarget</code>
            attribute (see the example below). This target is supposed to stop
            the container. The <code>runservertests</code>
            task will then constantly poll the server by calling the test URL
            until the server stops answering, at which point it will consider
            the server to be stopped. Note that the <code>stopTarget</code>
            will only get called if the server was not already started when
            the <code>runservertests</code> task began executing. This is to
            allow keeping running servers for intensive debugging phases.
          </li>
        </ul>
        <p>
          The <code>runservertests</code> task is generic in the sense that
          you are free to implement the <code>startTarget</code>,
          <code>testTarget</code> and <code>stopTarget</code> as you wish and
          they will get called at the right time.
        </p>
        <p>
          Example :
        </p>

<source><![CDATA[
<!--
   ======================================================================
     Run Tomcat 4.0 tests
   ======================================================================
-->
<target name="tests_tomcat"
    depends="init,deploy_config,create_test_war" if="tomcat.home">

    <!-- We suppose our webapp is named "test" -->
    <runservertests testURL="http://localhost:8080/test"
        startTarget="start_tomcat"
        stopTarget="stop_tomcat"
        testTarget="run_tests"/>

</target>
]]></source>

       <p>
         Before you can execute the <code>runservertests</code> task, you
         need to define it for Ant as it is not a standard Ant task. A
         good place to do this is in the <code>init</code> target.
       </p>
       <p>
         Example :
       </p>

<source><![CDATA[
<!--
   ======================================================================
     Initialize the build. Must be called by all targets
   ======================================================================
-->
<target name="init">
    [...]
    <taskdef name="runservertests" classname="org.apache.cactus.ant.RunServerTestsTask">
        <classpath>
            <pathelement location="${cactus.ant.jar}"/>
            <pathelement path="${java.class.path}"/>
        </classpath>
    </taskdef>
    [...]
</target>
]]></source>

       <p>
         where <code>${cactus.ant.jar}</code> is an Ant property that points
         to the <code>cactus-ant.jar</code> file found in the
         <code>lib/</code> directory where you unpacked the Cactus
         distribution.
       </p>

       <note>
         The <code>deploy_config</code> target is described in
         Step 0 below.
       </note>

       <note>
         The <code>create_test_war</code> target is described in
         Step 1 below.
       </note>

       <note>
         The <code>tomcat.home</code> is simply an Ant property that
         points to the directory where Tomcat 4.0 has been installed. If this
         property is not defined we don't run the tests.
       </note>

     </s1>

     <s1 title="Step 0: Deploy container configuration files">

       <p>
         There are 2 possibilities for configuring your application server :
       </p>
       <ol>
         <li>
           You install it somewhere on your computer (or on another machine)
           and you deploy your test WAR (see Step 1 below) by copying it
           to the right subdirectory within it. Your WAR will then be placed
           alongside with others and your webapp will use the configuration
           files common to all webapps,
         </li>
         <li>
           Or, you can create your own set of container configuration files,
           hosted within your project, that you copy to your own deployment
           subdirectory (i.e. not shared).
         </li>
       </ol>
       <p>
         In the provided Cactus Ant scripts, we have decided to follow
         approach 2 for the following reasons :
       </p>
       <ul>
         <li>
           We keep the control of our project files as they are deployed
           within the directory of our project and thus it is easy to
           perform a clean of all generated files,
         </li>
         <li>
           We do not "pollute" the installed container by dropping files
           within it and we do not need to modify global configuration
           files that may prevent other applications we are developing
           from not running someday (because we would have made an
           incompatible change),
         </li>
         <li>
           We completely control our needed container configuration.
         </li>
         <li>
           We can guarantee to the user who wants to try the Cactus sample
           application that it will not deploy anything outside the scope of
           the Sample directory. Unlike windows applications that you install
           and that copies tens of DLL to shared directory, overwrite existing
           files, ... :(
         </li>
       </ul>
       <p>
         However, this may not be the best approach for all cases, as :
       </p>
       <ul>
         <li>
           It is more difficult to set up as you need to understand how your
           container is configured (However, we have already done the job for
           you for most of the existing containers),
         </li>
         <li>
           You have only a single application to run and test and have
           dedicated your application server installation for it so you don't
           care about putting files in there and modifying global
           configuration,
         </li>
         <li>
           You want to be able to deploy in production several webapps that
           share the same server and thus must coexist and share common
           configuration files.
         </li>
       </ul>

       <p>
         If you choose solution 1, then you can simply skip this step. The
         only actions to perform will be, for some containers, to edit their
         configuration files to tell them about your webapp (some will
         automatically pick you test WAR if you drop it in the correct
         directory).
       </p>

       <p>
         Example :
       </p>

<source><![CDATA[
<!--
   ======================================================================
     Deploy container configuration files
   ======================================================================
-->
<target name="deploy_config" if="tomcat.home">

    <!-- This filter is needed to set the absolute path to the webapps
         directory in the Tomcat server.xml configuration file -->
    <filter token="out.server.webapp.dir" value="${basedir}/${out.server.dir}/webapps"/>

    <!-- Delete the deployed file to ensure that they are reread at every
         deployment by Tomcat -->
    <delete dir="${out.server.dir}/conf"/>
    <delete dir="${out.server.dir}/webapps"/>

    <!-- Create work and conf directories and copy configuration files -->
    <mkdir dir="${out.server.dir}/conf"/>
    <mkdir dir="${out.server.dir}/work"/>
    <mkdir dir="${out.server.dir}/webapps"/>

    <!-- Copy the Tomcat configuration files to our conf directory -->
    <copy file="${conf.server.dir}/web.xml" todir="${out.server.dir}/conf"/>
    <copy file="${conf.server.dir}/server.xml"
        todir="${out.server.dir}/conf" filtering="on"/>

</target>
]]></source>

       <note>
         The <code>${out.server.dir}</code> Ant property needs to be
         defined prior to calling this target and needs to be set to the
         location where the tests will be deployed. It should be set to any
         subdirectory of your output directory. This property will also be
         used later on in step 1 to copy the test WAR file.
       </note>

       <note>
         The <code>${conf.server.dir}</code> Ant property also needs to be
         defined prior to calling this target and represent the location of
         server configuration files (in the current example of Tomcat 4.0,
         these are the global <code>web.xml</code> and
         <code>server.xml</code>).
       </note>

     </s1>

     <s1 title="Step 1: create and deploy test WAR file">

        <p>
          Creating a WAR file is the preferred way of deploying Cactus tests
          to your servlet engine. Check the
          <link href="getting_started.html">Getting Started</link> guide and
          the example below for details on what files to include in the WAR.
        </p>
        <p>
          Example :
        </p>

<source><![CDATA[
<!--
   ======================================================================
     Create a test war file that includes the sample application unit
     tests and deploy it to the webapps directory
   ======================================================================
-->
<target name="create_test_war" depends="compile">

    <war warfile="${out.server.dir}/webapps/test.war"
         webxml="${conf.test.dir}/web.xml">

        <classes dir="${out.classes.dir}"/>
        <lib dir="${lib.dir}"/>
        <fileset dir="${web.dir}"/>
   </war>

</target>
]]></source>

       <p>
         where :
       </p>
       <ul>
         <li>
           <code>${conf.test.dir}</code> : directory containing configuration
           files for the test. Namely <code>web.xml</code>,
         </li>
         <li>
           <code>${out.classes.dir}</code> : directory where the java classes
           have been compiled. These are the classes under test + the test
           classes,
         </li>
         <li>
           <code>${lib.dir}</code> : directory containing the needed jars
           (<code>junit.jar</code>, <code>cactus.jar</code>, ...).
         </li>
         <li>
           <code>${web.dir}</code> : directory containing the web files to
           include in the test webapp (JSPs, HTML, ...).
         </li>
       </ul>

       <note>
         The <code>compile</code> target is used to compile all java classes
         into the <code>${out.classes.dir}</code> directory.
       </note>

     </s1>

     <s1 title="Step 2: Start the container">

       <p>
         Example :
       </p>

<source><![CDATA[
<!--
   ======================================================================
     Start Tomcat 4.0
   ======================================================================
-->
<target name="start_tomcat">

    <java classname="org.apache.catalina.startup.Bootstrap" fork="yes">

        <jvmarg value="-Dcatalina.home=${tomcat.home}"/>

        <arg value="-config"/>
        <arg value="${basedir}/${out.server.dir}/conf/server.xml"/>
        <arg value="start"/>

        <classpath>
          <fileset dir="${tomcat.home}">
              <include name="bin/bootstrap.jar"/>
              <include name="server/catalina.jar"/>
          </fileset>
        </classpath>

    </java>

</target>
]]></source>

     </s1>

     <s1 title="Step 3: Run the unit tests">

       <p>
         We start the unit test by calling a JUnit test runner (we use the
         text runner in this example). Example :
       </p>

<source><![CDATA[
<!--
   ======================================================================
     Run the Cactus test cases by starting a JUnit test runner.
   ======================================================================
-->
<target name="run_tests">

    <junit printsummary="yes" haltonfailure="yes" haltonerror="yes" fork="yes">

        <classpath>
            <!-- The Servlet API jar -->
            <pathelement location="${servlet.jar}"/>

            <!-- (optional) Will be ignore if log4j.jar is not defined -->
            <pathelement location="${log4j.jar}"/>

            <pathelement location="${cactus.jar}"/>
            <pathelement location="${junit.jar}"/>

            <!-- for Cactus 1.2 and above only -->
            <pathelement location="${httpclient.jar}"/>

            <!-- The test classes and classes to test -->
            <pathelement location="${out.classes.dir}"/>
        </classpath>

        <formatter type="plain" usefile="false"/>

        <test name="your.package.YourTestCaseClass1"/>
        [...]
        <test name="your.package.YourTestCaseClassN"/>

        <!-- Or you can gather all the tests in a TestAll class that start
             them all -->

        <!-- Or you can use the junit task batchtest nested element -->

    </junit>

</target>
]]></source>

       <note>
         The list of jars to include in your classpath is explained and
         detailed in the <link href="getting_started.html">Getting
         Started</link> guide.
       </note>

     </s1>

     <s1 title="Step 4: Stop the container">

       <p>
         Example :
       </p>

<source><![CDATA[
<!--
   ======================================================================
     Stop Tomcat 4.0
   ======================================================================
-->
<target name="stop_tomcat">

    <java classname="org.apache.catalina.startup.Bootstrap" fork="yes">

        <jvmarg value="-Dcatalina.home=${tomcat.home}"/>
        <arg value="stop"/>

        <classpath>
          <fileset dir="${tomcat.home}">
              <include name="bin/bootstrap.jar"/>
              <include name="server/catalina.jar"/>
          </fileset>
        </classpath>

    </java>

</target>
]]></source>

     </s1>

  </body>
</document>
