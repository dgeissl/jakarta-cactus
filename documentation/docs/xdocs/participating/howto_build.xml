<?xml version="1.0"?>

<document id="howto_build">

  <properties>
    <title>Building Cactus from the Source</title>
    <authors>
      <author name="Vincent Massol" email="vmassol@apache.org"/>
    </authors>
  </properties>

  <body>

    <section title="Introduction">
      <p>
        This tutorial explains how to build Cactus from CVS or from a source
        download.
      </p>
      <note>
        If you just want to use Cactus, it will be easier to simply download
        a <link href="site:downloads">nightly build</link> (if you need the
        latest and greatest), or the latest 
        <link href="site:downloads">stable release</link> otherwise.
      </note>
    </section>

    <section title="Getting the Source">
      <p>
        There are two ways to obtain the source code for Cactus: either 
        directly from CVS, or by downloading a prepackaged source archive.
      </p>

      <section title="CVS">
      	<p>
          To get the current development version of the Cactus source code,
          you'll need to download the source from CVS. To do this, you'll need
          to have a CVS client installed.
        </p>
        <p>
          Detailled instructions about accessing the Apache CVS repository can
          be found
          <link href="ext:cvs">here</link>. The module name for Cactus is 
          <code>jakarta-cactus</code>.
        </p>
      </section>

      <section title="Prepackaged Source Archives">
        <p>
          If you don't have access to the Apache CVS repository (because you're
          behind a firewall, for example), or you don't need to be absolutely 
          up to date, you can download an archive containing a snapshot of the
          Cactus code base.
        </p>
        <p>
          Such archives are made available for each release as well as for the
          nightly builds. Go <link href="site:downloads">here</link> to find 
          out about the download locations.
        </p>
      </section>

    </section>

    <section title="Prerequisites">
      <p>
        To build Cactus from source, you'll need to have
        <link href="ext:ant">Ant</link> 1.5 (or later)
        installed. Please make sure that the distribution also includes the JAR
        containing the optional tasks (<code>optional.jar</code>). In addition,
        please add an XSLT processor (like
        <link href="ext:xalanj">Xalan</link> to the 
        <code>lib</code> directory of your Ant installation.
      </p>
      <p>
        In addition, Cactus depends on a number of additional external
        libraries at build time. These can be used by either placing them in
        the <code>lib</code> directory of your Ant installation, or by
        explicitly specifying their location in a
        <code>build.properties</code> file at the root of the Cactus source
        distribution.
      </p>

      <section title="Required Libraries">
        <table>
          <tr>
            <th>Name</th>
            <th>Version</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>junit.jar</td>
            <td>3.7 or later</td>
            <td>
              The JUnit framework.
              Availabe <link href="ext:junit">here</link>.
              This JAR file must be placed in the <code>lib</code> directory of
              your Ant installation, or Ant will not be able to load the 
              required classes.
            </td>
          </tr>
          <tr>
            <td>aspectjrt.jar</td>
            <td>1.0.6 or later</td>
            <td>
              The AspectJ runtime.
              Availabe <link href="ext:aspectj">here</link>.
            </td>
          </tr>
          <tr>
            <td>aspectjtools.jar</td>
            <td>1.0.6 or later</td>
            <td>
              The AspectJ compiler and other tools.
              Availabe <link href="ext:aspectj">here</link>.
            </td>
          </tr>
          <tr>
            <td>aspectj-ant.jar</td>
            <td>1.0.6 or later</td>
            <td>
              The AspectJ Ant tasks.
              Availabe <link href="ext:aspectj">here</link>.
            </td>
          </tr>
        </table>
      </section>

      <section title="Optional Libraries">
        <table>
          <tr>
            <th>Name</th>
            <th>Version</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>checkstyle.jar</td>
            <td>3.0-dev</td>
            <td>
              The Checkstyle code auditing tool.
              Availabe <link href="ext:checkstyle">here</link>.
            </td>
          </tr>
          <tr>
            <td>antlr.jar</td>
            <td>2.7.1</td>
            <td>
              The ANTLR translator generator (required by Checkstyle).
              Availabe <link href="ext:antlr">here</link>.
            </td>
          </tr>
          <tr>
            <td>commons-beanutils.jar</td>
            <td>1.5</td>
            <td>
              Jakarta Commons BeanUtils (required by Checkstyle).
              Available <link href="ext:beanutils">here</link>.
            </td>
          </tr>
          <tr>
            <td>commons-collections.jar</td>
            <td>2.1</td>
            <td>
              Jakarta Commons Collections (required by Checkstyle).
              Available <link href="ext:collections">here</link>.
            </td>
          </tr>
          <tr>
            <td>regexp.jar</td>
            <td>1.2</td>
            <td>
              Jakarta RegExp (required by Checkstyle).
              Available <link href="ext:regexp">here</link>.
            </td>
          </tr>
          <tr>
            <td>clover.jar</td>
            <td>1.0</td>
            <td>
              Clover code coverage tool.
              Available <link href="ext:clover">here</link>.
              This JAR file must be placed in the <code>lib</code> directory of
              your Ant installation, or Ant will not be able to load the 
              required classes.
            </td>
          </tr>
          <tr>
            <td>velocity.jar</td>
            <td>1.3</td>
            <td>
              Velocity template engine (required by Clover).
              Available <link href="ext:velocity">here</link>,
              but also included with the Clover download.
              This JAR file must be placed in the <code>lib</code> directory of
              your Ant installation, or Ant will not be able to load the 
              required classes.
            </td>
          </tr>
        </table>
      </section>

      <note>
        <strong>If you don't want to have problems with versions, you need 
        to get the versions corresponding to Cactus releases. For example,
        If you're building Cactus 1.3 from its sources, you'll need to get 
        the jars found in the corresponding Cactus prepackaged 
        jar for Ant. IF you are building from CVS, you can get the latest
        jars from the <link href="ext:gump_jars">Gump nightly builds</link>
        </strong>.
      </note>

      <note>
        In the future we will make this process easier by moving our build
        system to Maven.
      </note>

      <note>
        Make sure you have only one XML parser. If you had the Crimson jar
        you will need to remove it.
      </note>

    </section>

    <section title="Understanding the directory structure">
      <p>
        The Cactus project is divided into several subprojects, each having 
        its own build. Examples of subprojects are:
      </p>
      <ul>
        <li>
          <strong>anttasks</strong>: Some Ant tasks useful for Cactus
        </li>
        <li>
          <strong>framework</strong>: The main Cactus framework
        </li>
        <li>
          <strong>sample-servlet</strong>: Sample application using Cactus.
          Currently also acts as functional and acceptance testing for the
          Cactus framework.
        </li>
        <li>
          <strong>documentation</strong>: Cactus documentation
        </li>
      </ul>
      <p>
      	Then, there is a special project, which is the top level project,
      	which is simply a wrapper on all the other projects and allow to
      	easily build them all.
      </p>
      <p>
        All projects follow the same directory structure and they all use
        Ant as the build tool.
      </p>        
    </section>

    <section title="Building a Cactus project">
      <p>
        First, you need to create a <code>build.properties</code> file
        in the directory for the project you wish to build. You will find 
        existing <code>build.properties.sample</code> files in project 
        directories. Simply copy them to <code>build.properties</code> and 
        edit the file. Mostly, it asks for locations of jars that you will 
        need to have put somewhere on your local filesystem.
      </p>
      <p>
        Then, open a shell, chdir to the project directory and type
        <code>ant -projecthelp</code>. That will give you the list of 
        available Ant targets. Typical targets are: <code>clean</code>, 
        <code>dist</code>, <code>test</code>, etc.
      </p>
      <p>
      	Then, execute the target you want. For example if you wish to build
      	the Cactus framework, cd to <code>framework/</code> and type
      	<code>ant dist</code> (or simply <code>ant jar</code> if you simply
      	want to build the jar).
      </p>

      <note>
        Some projects depends on others and thus you may need to run the build
        for those projects before. The order is as follows: anttasks, then
        framework (or documentation), then sample projects.
      </note>
    </section>

    <section title="Building the full Cactus distribution">
      <p>
        Go to the top level directory, create a <code>build.properties</code>
        and type <code>ant release</code>.
      </p>
    </section>
        
  </body>
</document>
