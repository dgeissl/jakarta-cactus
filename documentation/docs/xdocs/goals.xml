<?xml version="1.0"?>

<document>

  <properties>
    <title>Cactus goals</title>
    <authors>
      <author name="Vincent Massol" email="vmassol@apache.org"/>
    </authors>
  </properties>

  <body>

    <s1 title="General goals">

      <ul>
        <li>
          Provide a simple unit testing framework focused on server side java 
          code which tries to cover all J2EE component models,
        </li>
        <li>
          Try to be the preferred Jakarta unit testing framework. This may
          mean providing specific extensions to ease writing unit test for
          Jakarta frameworks (like for Struts, Turbine, ...),
        </li>
        <li>
          To be the framework of reference for in-container unit testing
          strategy
        </li>
      </ul>          
        
    </s1>

    <s1 title="Short terms goals">

      <p>
        The short term goals for Cactus are to continue providing and improving
        support for J2EE unit testing. More specifically the following areas
        are being considered and researched:
      </p>
        
      <ul>
        <li>
          Add support for Servlet API 2.4/JSP 1.4 (by using Tomcat 5),
        </li>
        <li>
          Pre-packaged Cactus with leading containers so that it is ultra-easy 
          to test a user application. Some already implemented ideas:
          <ul>
          	<li>
              See the <link href="howto_tomcat.html">Tomcat Howto</link> for 
              an example of Tomcat integration. However, it could be made even 
              easier by providing a packaged Tomcat.
            </li>
            <li>
              Jetty integration is mostly finished and provides an 
              unpredecented ease of use.
            </li>
          </ul>
        </li>
        <li>
          Provide a full servlet container test suite a la Watchdog using Cactus.,
        </li>
        <li>
          Performance unit testing: Add performance extensions to be able to 
          test each single method in performance.
        </li>
        <li>
          More tutorial on AspectJ testing. Potentially add a Cactus Aspect 
          extension to allow writing test cases as Aspects (this would allow to
          remove the need for Cactus redirectors in most cases).
        </li>
        <li>
          Improve Cactus usability by providing different Cactus front ends 
          that does all the packaging of the application by simply specifying 
          source location, resource location and web.xml. These front ends would
          already contains all the logic to create the war and deploy it 
          for a given application server. Possibilies are:
          <ul>
            <li>
          	  Cactus standalone application which uses the JUnit Swing TestRunner
          	</li>
          	<li>
          	  Cactus Ant tasks
          	</li>
          	<li>
          	  Generic Cactus plugin for IDEs
          	</li>
          	<li>
          	  Special Cactus plugin for Eclipse
          	</li>
          </ul>
        </li>
        <li>
          Add EJB Redirectors to be able to unit test Session Beans, Entity Beans
          and MessageDriven Beans          
        </li>
        <li>
          Ability to write Cactus tests by extending normal JUnit TestCase instead
          of Cactus extensions (by using special Cactus TestSuite objects). This
          will allow to easily execute the same test outside and inside of the 
          container (for test not depending on container objects).
        </li>
      </ul>

    </s1>

    <s1 title="Long term goals">

      <s2 title="The Future of Component Unit Testing">

        <p>
          We believe unit testing server side components is going to get harder
          and harder in the future (unless something is done about it !). 
          Even now, depending on the specifications
          for a given component model it is more or less easy. Sometimes it is
          even not feasible to test all kind of code.
        </p>
        <p>
          We believe that we will see more and more components in the future.
          By components we mean pieces of code that execute in a container.
          The container will provide more and more services for the components
          (like transactions, security, life cycle, persistence, interfaces
          - like web services -, logging, ...). The consequences will be :
        </p>
        <ul>
          <li>
            testing strategies that are not in-container, like Mock Objects
            will still very useful but will provide less added value in
            ensuring that the code behaves ok. Indeed, as the components will
            rely more and more on the container's services, the confidence that
            the tests will run well when deployed will decrease and the need
            for a solution that ensures the code will run correctly in it's
            environment will increase,
          </li>
          <li>
            it will become more and more difficult to offer an in-container
            unit testing framework that lives outside the container.
          </li>
        </ul>

      </s2>

      <s2 title="Long term goals for Cactus">

        <p>
          Consequently to the above predictions, there are 2 long term goals
          for Cactus :
        </p>
        <ul>
          <li>
            Continue with the in-container approach as much as possible. It is
            a best try effort in order to provide tests in which you can have
            a good confidence,
          </li>
          <li>
            However, we believe the only satisfactory and long term solution 
            is to include (unit) testing APIs as <em>part</em> of the container
            specifications. This could be done in the form of a SPI 
            (Service Provider Interface) against which a generic unit testing 
            framework could be plugged, thus leaving the implementation details
            to an external framework and only providing maybe a generic
            and simple implementation. Thus, the goal of Cactus will be
            to help specify needed container API/SPI for unit testing, 
            i.e. create
            an additional service of the container :  a "unit-testing service"
            (in addition to the existing Security, Transaction, Life Cycle, ...
            Services). As Cactus and Tomcat projects are both hosted on Jakarta
            it might be a good test ground for this kind of work. Of course,
            the first step would be to convince Tomcat developers that unit
            testing (and testing in general) is indeed a need to be
            addressed in the container itself. The ultimate
            goal will be reached when this new API/SPI is accepted and become
            a de jure standard. It would then be time to think about 
            integrating it into the Servlet Specifications 
            (or other components -like EJBs -
            specifications). Agreed, this far-streched at the current time
            but it is the Cactus vision !
          </li>        
        </ul>

      </s2>

    </s1>

    <s1 title="Feedback needed !">

      <p>
        Cactus is an open source project where everyone is free to participate
        (and even encouraged). Thus, we'd really like to have your opinions on
        the subject of Cactus future.
      </p>
      <p>
        How do you view the future of Cactus ?
      </p>
      <p>
        Do you like the goals defined above ?
      </p>
      <p>
        Do you think it is feasible ?
      </p>
      <p>
        Please send all answers to the <link href="mailinglist.html">
        Cactus mailing list</link>.
      </p>
      <p>
        Thanks.
      </p>

    </s1>

  </body>
</document>
