<?xml version="1.0"?>

<document id="integration_jetty">

  <properties>
    <title>Jetty Integration</title>
    <authors>
      <author name="Julien Ruaux" email="jruaux@octo.com"/>
    </authors>
  </properties>

  <body>

    <section title="Forewords and Requirements">

      <p>
        This page explains how to run Cactus tests with the Jetty servlet
        container. You will need the single <link href="ext:jetty">Jetty</link>
        jar, and if you are using JSPs you will also need the Jasper jars.
      </p>

    </section>
    
    <section title="Setting up Jetty">

      <p>
        The idea is to use the Jetty initializer provided by Cactus so that
        Jetty is run before the tests are run. Generally Cactus tests are
        launched by a JUnit runner, so we will describe here how to hook the
        initializer to it.
      </p>
      
      <p>
        There are only two things to do to set up Cactus for Jetty :
        <ul>
          <li>
            Add the Jetty and optionally Jasper jars to the classpath
          </li>
          <li>
            Set the appropriate system properties :
            <ul>
              <li>
                <code>cactus.initializer</code> (required), value :
                <code>org.apache.cactus.extension.jetty.JettyInitializer</code> 
                : tells Cactus to use JettyInitializer as the initializer.
              </li>
              <li>
                <code>cactus.jetty.config</code> (optional), value :
                location of a jetty.xml file (see Jetty's documentation
                for details)
              </li>
              <li>
                <code>cactus.jetty.resourceDir</code> (optional), value :
                location of a webapp directory (expanded war)
              </li>
            </ul>
          </li>
        </ul>
      </p>

	    <section title="Case 1: running from Ant">
	
	      <p>
	        Let's assume we have a JUnit task that launches the tests.
	        All we have to do is add the correct VM arguments to tell Cactus
	        to launch Jetty before the tests, and add the Jetty and optionally
	        Jasper jars to the classpath. For example : <br/><br/>
<source><![CDATA[
<junit>

    [...]
    
    <jvmarg value="-Dcactus.contextURL=http://localhost:${test.port}/test"/>
    <jvmarg value="-Dcactus.jetty.resourceDir=${src.webapp.dir}"/>
    <jvmarg value="-Dcactus.initializer=org.apache.cactus.extension.jetty.JettyInitializer"/>
    <jvmarg value="-Dcactus.jetty.config=${src.webapp.dir}/test/jetty.xml"/>

    <classpath>
        [...]
        <!-- Include Jetty jar and optionally Jasper jars in the classpath -->
        <pathelement location="${jetty.jar}"/>
        <pathelement location="${jasperc.jar}"/>
        <pathelement location="${jasperr.jar}"/>    
    </classpath>
    
    <test name="org.apache.cactus.sample.TestAll"/>

</junit>
]]></source>
	      </p>
	    
	    </section>
	    
		  <section title="Case 2: running from an IDE">
		
		    <p>
		      Again all you have to do is add the correct VM arguments, and the
		      Jetty and Jasper jars, to the JUnit launch.
		    </p>
		    
		    <p>
		      For example in Eclipse you would add the jars, and create a JUnit
		      launch configuration as below:
		      <figure src="images/jetty_eclipse.png"
		        alt="Eclipse configuration for Jetty"/>          
		    </p>
		
		  </section>

    </section>
  </body>
</document>
