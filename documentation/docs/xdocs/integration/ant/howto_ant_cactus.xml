<?xml version="1.0"?>

<document id="howto_ant_cactus">

  <properties>
    <title>Running Cactus tests from Ant</title>
    <authors>
      <author name="Vincent Massol" email="vmassol@apache.org"/>
      <author name="Christopher Lenz" email="cmlenz@apache.org"/>
    </authors>
  </properties>

  <body>

    <section title="Introduction">

      <note>
        <strong>You need to have a good understanding of Ant before
        reading this tutorial. If you don't, I suggest you read the
        <link href="http://ant.apache.org/manual/index.html">Ant
        User Manual</link> first</strong>.
      </note>

      <p>
        This tutorial explains how to integrate Cactus tests with a build
        process based on Apache <link href="ext:ant">Ant</link>.
      </p>
      <p>
        The Ant tasks involved for running a Cactus test are the following:
      </p>
      <ul>
        <li>
          <em>Step 0</em>: (optional) Deploy configuration files for your
          container
        </li>
        <li>
          <em>Step 1</em>: Package your Cactus tests as a WAR file and
          deploy it to your servlet engine webapps directory
        </li>
        <li>
          <em>Step 2</em>: Start your servlet engine if it is not already
          started
        </li>
        <li>
          <em>Step 3</em>: Run the tests using JUnit
        </li>
        <li>
          <em>Step 4</em>: Stop the servlet engine if it hadn't been running
          before
        </li>
      </ul>
      <p>
        Cactus provides a couple of custom Ant tasks that help perform these 
        steps. The rest of this tutorial will explain how to write an Ant 
        build file (<code>build.xml</code>) that performs the above steps using
        the Cactus custom Ant tasks.
      </p>
      <p>
        During the remainder of this tutorial we will show examples for
        Tomcat 4.0. However, the principle can be applied to any other
        container. Ant scripts for other containers are included with the 
        distribution of the Cactus/Ant-integration.
      </p>

    </section>

    <section title="Using the Cactus Ant Tasks">

      <p>
        The Cactus/Ant-integration includes some custom tasks that can be used
        from within Ant build files.
        <ul>
          <li>
            <link href="site:task_runservertests">RunServerTests</link>
            provides support for starting up a servlet container to run
            in-container tests, and shutting it down again after the tests have
            completed.
          </li>
          <li>
            <link href="site:task_webxmlmerge">WebXmlMerge</link> provides a
            convenient way to inject external definitions into a web deployment
            descriptor (<code>web.xml</code>) from an Ant build
          </li>
        </ul>
      </p>
      
      <p>
        Before you can use one of these tasks, you need to introduce it to Ant
        as it is not a built-in task. This is done in a build file using the
        <code>taskdef</code> task:
      </p>

<source><![CDATA[
<taskdef resource="cactus.tasks">
  <classpath>
    <pathelement location="${cactus-ant.jar}"/>
  </classpath>
</taskdef>
]]></source>

       <p>
         In this example, <code>${cactus-ant.jar}</code> is an Ant property that
         points to the Cactus JAR that contains the custom Ant tasks. Note that
         by specifying the <code>resource</code> attribute, it is not
         necessary to define each task individually. The value of this
         attribute, <code>cactus.tasks</code>, is a property file contained in 
         the JAR file which lists all tasks provided by Cactus.
       </p>

     </section>

     <section title="Step 0: Deploy container configuration files">

       <p>
         There are 2 possibilities for configuring your application server:
       </p>
       <ol>
         <li>
           You install it somewhere on your computer (or on another machine)
           and you deploy your test WAR (see Step 1 below) by copying it
           to the right subdirectory within it. Your WAR will then be placed
           alongside with others and your webapp will use the configuration
           files common to all webapps,
         </li>
         <li>
           Or, you can create your own set of container configuration files,
           hosted within your project, that you copy to your own deployment
           subdirectory (i.e. not shared).
         </li>
       </ol>
       <p>
         In the provided Cactus Ant scripts, we have decided to follow
         approach 2 for the following reasons:
       </p>
       <ul>
         <li>
           We keep the control of our project files as they are deployed
           within the directory of our project and thus it is easy to
           perform a clean of all generated files,
         </li>
         <li>
           We do not "pollute" the installed container by dropping files
           within it and we do not need to modify global configuration
           files that may prevent other applications we are developing
           from not running someday (because we would have made an
           incompatible change),
         </li>
         <li>
           We completely control our needed container configuration.
         </li>
         <li>
           We can guarantee to the user who wants to try the Cactus sample
           application that it will not deploy anything outside the scope of
           the Sample directory. Unlike windows applications that you install
           and that copies tens of DLL to shared directory, overwrite existing
           files, ... :(
         </li>
       </ul>
       <p>
         However, this may not be the best approach for all cases, as:
       </p>
       <ul>
         <li>
           It is more difficult to set up as you need to understand how your
           container is configured (However, we have already done the job for
           you for most of the existing containers),
         </li>
         <li>
           You have only a single application to run and test and have
           dedicated your application server installation for it so you don't
           care about putting files in there and modifying global
           configuration,
         </li>
         <li>
           You want to be able to deploy in production several webapps that
           share the same server and thus must coexist and share common
           configuration files.
         </li>
       </ul>

       <p>
         If you choose solution 1, then you can simply skip this step. The
         only actions to perform will be, for some containers, to edit their
         configuration files to tell them about your webapp (some will
         automatically pick you test WAR if you drop it in the correct
         directory).
       </p>

       <p>
         Example:
       </p>

<source><![CDATA[
<!--
   ========================================================================
     Prepare directories and variables for running the tests
   ========================================================================
-->
<target name="prepare.test.tomcat.40"
    depends="check.test.tomcat.40,testwar" if="tomcat.home.40">

    <echo message="tomcat.home.40 = ${tomcat.home.40}"/>

    <property name="target.tomcat40.dir"
        value="${target.test.dir}/tomcat40"/>
    <property name="conf.tomcat40.dir" value="${conf.test.dir}/tomcat40"/>

    <!-- Create work and conf directories and copy configuration files -->
    <mkdir dir="${target.tomcat40.dir}/conf"/>
    <mkdir dir="${target.tomcat40.dir}/work"/>
    <mkdir dir="${target.tomcat40.dir}/webapps"/>

    <!-- Delete some config file so that they will be copied every time -->
    <delete file="${target.tomcat40.dir}/conf/server.xml"/>

    <!-- Remove the auto deployed webapp so that it is redeployed every
         time -->
    <delete dir="${target.tomcat40.dir}/webapps/test"/>

    <copy todir="${target.tomcat40.dir}/conf" filtering="on">
        <fileset dir="${conf.tomcat40.dir}"/>
    </copy>

    <!-- Copy the Tomcat web.xml -->
    <copy file="${tomcat.home.40}/conf/web.xml"
        todir="${target.tomcat40.dir}/conf"/>

    <!-- Copy the war file -->
    <copy file="${target.test.dir}/test.war"
        tofile="${target.tomcat40.dir}/webapps/test.war"/>

</target>
]]></source>

       <note>
         The <code>${target.test.dir}</code> Ant property needs to be
         defined prior to calling this target and needs to be set to the
         location where the tests will be deployed. It should be set to any
         subdirectory of your output directory. This property will also be
         used later on in step 1 to copy the test WAR file.
       </note>

       <note>
         The <code>${conf.test.dir}</code> Ant property also needs to be
         defined prior to calling this target and represent the location of
         server configuration files (in the current example of Tomcat 4.0,
         these are the global <code>web.xml</code> and
         <code>server.xml</code>).
       </note>

     </section>

     <section title="Step 1: create and deploy test WAR file">

        <p>
          Creating a WAR file is the preferred way of deploying Cactus tests
          to your servlet engine. Check the
          <link href="site:getting_started">Getting Started</link> guide and
          the example below for details on what files to include in the WAR.
        </p>
        <p>
          Example:
        </p>

<source><![CDATA[
<!--
   ========================================================================
     Create a Cactus test war file for the sample application.
   ========================================================================
-->
<target name="testwar" depends="compile">

    <!-- Create the war file -->
    <war warfile="${target.test.dir}/test.war"
         webxml="${conf.test.dir}/web.xml">

        <classes dir="${target.classes.sample.dir}"/>
        <classes dir="${target.classes.unit.dir}"/>

        <!-- log_server.properties need to be in the server classpath -->
        <classes dir="${conf.test.dir}">
            <include name="log_server.properties"/>
            <include name="cactus.properties"/>
        </classes>

        <lib dir="${target.lib.dir}"/>
        <fileset dir="${web.dir}"/>
   </war>

</target>
]]></source>

       <p>
         where:
       </p>
       <ul>
         <li>
           <code>${conf.test.dir}</code>: directory containing configuration
           files for the test,
         </li>
         <li>
           <code>${target.classes.*.dir}</code>: directory where the java
           classes have been compiled. These are the classes under test + the
           test classes,
         </li>
         <li>
           <code>${target.lib.dir}</code>: directory containing the needed jars
           (<code>junit.jar</code>, <code>cactus.jar</code>, ...).
         </li>
         <li>
           <code>${web.dir}</code>: directory containing the web files to
           include in the test webapp (JSPs, HTML, ...).
         </li>
       </ul>

       <note>
         The <code>compile</code> target is used to compile all java classes
         into the <code>${target.classes.*.dir}</code> directory.
       </note>

     </section>

     <section title="Step 2: Start the container">

       <p>
         Example:
       </p>

<source><![CDATA[
<!--
   ========================================================================
     Start Tomcat 4.0
   ========================================================================
-->
<target name="start.tomcat.40">

    <java classname="org.apache.catalina.startup.Bootstrap" fork="yes">
        <jvmarg value="-Dcatalina.home=${tomcat.home.40}"/>
        <jvmarg value="-Dcatalina.base=${target.tomcat40.dir}"/>
        <arg value="start"/>
        <classpath>
            <pathelement path="${java.home}/../lib/tools.jar"/>
            <fileset dir="${tomcat.home.40}">
                <include name="bin/bootstrap.jar"/>
            </fileset>
        </classpath>
    </java>

</target>
]]></source>

     </section>

     <section title="Step 3: Run the unit tests">

       <p>
         We start the unit test by calling a JUnit test runner (we use the
         text runner in this example). Example:
       </p>

<source><![CDATA[
<!--
   ========================================================================
     Run the client JUnit test cases.
   ========================================================================
-->
<target name="test">

    <junit printsummary="yes" haltonfailure="yes" haltonerror="yes"
        fork="yes">

        <classpath>
            <!-- Cactus.propertie and log_client.properties need to be in
                 the classpath -->
            <pathelement location="${target.conf.dir}"/>
            <pathelement location="${target.classes.sample.dir}"/>
            <pathelement location="${target.classes.unit.dir}"/>
            <path refid="project.class.path"/>
        </classpath>

        <formatter type="plain" usefile="false"/>
        <test name="org.apache.cactus.unit.TestAll"/>
        <test name="org.apache.cactus.sample.TestAll"/>

    </junit>

</target>
]]></source>

       <note>
         The list of jars to include in your classpath is explained and
         detailed in the <link href="site:howto_classpath">Classpath
         Howto</link> guide.
       </note>

     </section>

     <section title="Step 4: Stop the container">

       <p>
         Example:
       </p>

<source><![CDATA[
<!--
   ========================================================================
     Stop Tomcat 4.0
   ========================================================================
-->
<target name="stop.tomcat.40">

    <java classname="org.apache.catalina.startup.Bootstrap" fork="yes">
        <jvmarg value="-Dcatalina.home=${tomcat.home.40}"/>
        <jvmarg value="-Dcatalina.base=${target.tomcat40.dir}"/>
        <arg value="stop"/>
        <classpath>
          <fileset dir="${tomcat.home.40}">
              <include name="bin/bootstrap.jar"/>
          </fileset>
        </classpath>
    </java>

</target>
]]></source>

     </section>

  </body>
</document>
