<?xml version="1.0"?>

<roadmap title="Roadmap/Todo for Cactus">

  <s1 title="Forewords">
    <p>
      As is stated on the Cactus <link href="goals.html">goals</link> page, the
      intention is to explore as much as possible in the realm of unit testing
      of server side java code ...
    </p>
    <p>
      This brings a bad news and a good one ... The
      bad one is that the TODO list is likely to keep growing or at least
      have a respectable size ... The good one
      is that there will be work for everyone ... :-)
    </p>
    <p>
      If you are interested in participating, send an email on the Cactus mailing
      list stating your interest and you'll be enrolled right away ... We're
      always looking for help ! Don't be put off if in the "Volunteer" column
      there is already a person listed. On the contrary, the more person that
      participate in a given task, the better (like in pair programming, several
      sets of eyes are always better than one!). However you'll need to sync.
      with these others persons but this is easily done by posting to the
      mailing-list.
    </p>
    <p>
      The game has just begun ... !
    </p>
  </s1>

  <version title="Version 1.5">

    <category title="Documentation">
      <action>
        Update web site for new <code>begin()</code> and <code>end()</code>
        methods.
      </action>
      <action>
        Add a tutorial for building Cactus from the source distribution.
      </action>
      <action>
        Fix Clover reports as they seem broken. They do not count any tests
        executed on the server. Overall coverage is reported as 45% whereas
        it is more thaqn 60% in reality ...
      </action>
    </category>

    <category title="Build Process">
      <p>
        All tasks that are related to building Cactus in general.
      </p>
      <action assigned-to="Bob Tanner">
        Finalize support for Enhydra 3.1.1. There are some errors upon
        starting the enhydra server and the <code>testOut()</code> method
        is failing. Need help from Enhydra experts to go forward.
      </action>
      <action>
        Add the Ant scripts for JBoss 2.x w/Tomcat provided by Jeffrey Madynski
        (jmadynski@food.com) on the jakarta-commons mailing list (Subject
        "[cactus] Using Cactus with JBoss-2.2.1 with Embedded Tomcat"). The
        scripts need to be reworked so that the deployed test war is deployed
        within the <code>target</code> output directory and not to where
        JBoss/Tomcat is installed.
      </action>
      <action>
      	Move Cactus to Maven.
      </action>
    </category>

    <category title="Design/Code">
      <action>
      	Remove HttpURLConnection and replace it by the one we have submitted
      	to the HttpClient project.
      </action>
      <action>
        Improve the ServletTestRunner. Move stylesheet definition to web.xml
        and provide support for XSLT performed inside ServletTestRunner.
      </action>
      <action>
        Write a JMS Redirector/Client to test Message Driven Beans.
      </action>
      <action assigned-to="Peter Wong, Jason Robertson, Vincent Massol">
        Add support for Form-based authentication.
      </action>
      <action>
        Provide support for generating Session cookies and URL Sessions
        (URL rewriting). A description of the mechanism has been
        posted in thread "How does cactus simulate a session" on the
        Cactus user mailing list. Thanks to
        <link href="mailto:kyle.w.willkomm@accenture.com">Kyle W.
        Willkomm</link>.
      </action>
      <action>
        Add EJB Redirectors so that unit testing of code that require an EJB
        is facilitated. For example, let's imagine you need to test that an
        object that has been put in the JNDI tree by a servlet can be retrieved
        by an EJB. These are not unit tests per see but rather integration
        tests, which is Cactus favorite domain. Also these redirectors could be
        used to directly unit tests EJB whithout requiring a servlet
        environment (at the current time, you need to call your EJB from a
        Servlet/JSP/Filter Redirector, which is fine for certain tests but not
        needed for others.
      </action>
      <action assigned-to="Hudson Wong, Vincent Massol">
        Add an EJB sample application to demonstrate how to perform EJB
        unit testing (the tutorial that explains the process will be part
        of Cactus 1.2 but the inclusion of the sample will be delivered
        in a subsequent release as it involves some changes in the build
        process).
      </action>
    </category>

  </version>

  <version title="Undefined">

    <category title="Ideas">
      <p>
        Ideas to explore ...
      </p>
      <action>
      	Bundling of JUnitEE.
      </action>
      <action>
      	Notion of initializer in <code>XXXTestCase</code> that allows some
      	one time setup to happen for the tests running in a given JVM. This
      	will allow for example a servlet engine like Jetty be automatically
      	configured and started before the test simply using a normal JUnit
      	TestRunner.
      </action>
      <action>
        Create a new package <code>org.apache.cactus.extensions</code> for
        putting extensions to Cactus Test Cases. The first extension
        would be an extension that runs a bunch of test at the same time,
        thus spawing several threads in the container in order to discover
        bugs [Note: We would have to correct the name under which Cactus test
        results are stored in the application context so that it is unique
        per test case]. We would need to create a
        <code>org.apache.cactus.extensions.ParallelServletTestCase</code>.
        The constructor would take some parameters, such as the number of
        parallel threads to spawn, ... Idea suggested by
        <link href="mailto:rimovm@centercomp.com">Michael Rimov</link>.
      </action>
      <action>
        Use <link href="http://xdoclet.sourceforge.net/docs/">XDoclet</link>
        with Cactus to better provide continuous integration. It could be
        used to automatically generate <code>web.xml</code> files,
        automatically generating test cases from methods to test, ...
      </action>
      <action>
        Integration to Eclipse.
      </action>
      <action assigned-to="Vincent Massol">
        Evaluate the use of AspectJ for writing Cactus test cases.
      </action>
      <action>
        Help Cactus users test multipart/form-data. At least explain how to do
        it. Some idea: use cos.jar (from
        <link href="http://www.servlets.com/cos/index.html">http://www.servlets.com/cos/index.html</link>)
        to read multipart/form-data on the server side. Now we still need to
        provide a mechanism to easily send multipart/form-data on the Cactus
        client side. The best solution would be to use HttpClient but we need
        to check if it has this feature or if it can be added. Submitted by
        <link href="mailto:Gunnar.Skogen@ergo.no">Gunnar Ole Skogen</link>.
      </action>
    </category>

  </version>

</roadmap>