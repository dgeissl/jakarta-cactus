<?xml version="1.0"?>
<!DOCTYPE project [
    <!ENTITY common SYSTEM "file:../../common.xml">
]>

<!--
  =============================================================================
    Build file for the Cactus Ant Petal project.

    This script should be started with the following command line :

        ant <target>

    Run "ant -projecthelp" to get a list of available targets. The default
    target is "dist"

    Note: basedir points to the main Cactus directory in order to have the same
          base dir for all Cactus subprojects and thus be able to share
          relative paths.
  =============================================================================
-->
<project name="Cactus Ant Petal" default="dist" basedir="../..">

    <!-- Give user a chance to override without editing this file
         (and without typing -D each time it compiles it) -->
    <property file="${basedir}/petals/ant/build.properties" />
    <property file="${basedir}/build.properties" />
    <property file="${user.home}/build.properties" />

    <!-- Global project properties -->
    <property name="project.name.text" value="Cactus Ant Petal"/>
    <property name="project.name.file" value="cactus-petal-ant"/>
    <property name="project.version" value="1.5dev"/>

    <!-- Prefix to add to all distributable files -->
    <property name="project.prefix" value="jakarta-"/>

    <!--
       ========================================================================
         Default values for properties not defined in build.properties or in
         a higher level calling Ant script
       ========================================================================
    -->
    <property name="year" value="2000-2003"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="off"/>
    <property name="deprecation" value="off"/>

    <!-- The location of the Cactus custom Ant tasks jar -->
    <property name="cactus.ant.jar" value="anttasks/dist/lib/cactus-ant.jar"/>

    <!--
       ========================================================================
         Base directory for all file related operations
       ========================================================================
    -->
    <property name="base.dir" location="petals/ant"/>

    <!--
       ========================================================================
         Set the properties related to the source tree.
         Note: These properties are defined in a target as some need the
               j2ee.api property to be set
       ========================================================================
    -->
    <target name="properties.source">

	    <property name="src.dir" location="${base.dir}/src"/>
	    <property name="src.java.dir" location="${src.dir}/java"/>
	    <property name="src.script.dir" location="${src.dir}/scripts"/>
	    <property name="src.conf.dir" location="${src.dir}/confs"/>
	    <property name="build.dir" location="${base.dir}/."/>

	    <!-- The location of the web files generated by the Cactus framework
	         (i.e. the JSP Redirector) -->
	    <property name="cactus.framework.web" 
	    	value="framework/dist-${j2ee.api}/web"/>

	    <!-- The location of the Cactus framework jar -->
        <property name="cactus.framework.jar"
            value="framework/dist-${j2ee.api}/lib/cactus.jar"/>

	</target>
	
    <!--
       ========================================================================
         Set the properties related to the target tree
         Note: These properties are defined in a target as some need the
               j2ee.api property to be set
       ========================================================================
    -->
    <target name="properties.target">

	    <property name="target.dir" location="${base.dir}/target"/>
	    <property name="target.classes.dir" location="${target.dir}/classes"/>
	    <property name="target.classes.java.dir"
	        location="${target.classes.dir}/java"/>
	    <property name="target.doc.dir" location="${target.dir}/doc"/>
	    <property name="target.doc.api.dir" location="${target.doc.dir}/api"/>
		<property name="target.test.dir" location="${target.dir}/test/tomcat4x"/>

	</target>

    <!--
       ========================================================================
         Set the properties related to the distribution tree
         Note: These properties are defined in a target as some need the
               j2ee.api property to be set
       ========================================================================
    -->
    <target name="properties.distribution">

	    <property name="dist.dir" location="${base.dir}/dist"/>
	    <property name="dist.lib.dir" location="${dist.dir}/lib"/>
	    <property name="dist.lib.client.dir" location="${dist.lib.dir}/client"/>
	    <property name="dist.lib.server.dir" location="${dist.lib.dir}/server"/>
	    <property name="dist.lib.common.dir" location="${dist.lib.dir}/common"/>
	    <property name="dist.doc.dir" location="${dist.dir}/doc"/>
	    <property name="dist.doc.api.dir" location="${dist.doc.dir}/api"/>
	    <property name="dist.script.dir" location="${dist.dir}/scripts"/>
	    <property name="dist.conf.dir" location="${dist.dir}/confs"/>

	</target>

    <!--
       ========================================================================
        Names of deliverables
       ========================================================================
    -->

    <!-- The Ant Petal jar and helper classes -->
    <property name="antpetal.jar.name" value="${project.name.file}"/>

    <!-- The global Ant Petal zip -->
	<property name="antpetal.zip.name" value="${project.name.file}"/>
	
    <!--
       ========================================================================
         Include common targets and properties
       ========================================================================
    -->
    &common;

    <!--
       ========================================================================
         Display configurable properties values
       ========================================================================
    -->
    <target name="display.properties">

        <echo>----- ${project.name.text} ${project.version} -----</echo>
        <echo></echo>
        <echo>java.class.path = ${java.class.path}"</echo>
        <echo></echo>
        <echo>java.home = ${java.home}</echo>
        <echo>user.home = ${user.home}</echo>
        <echo>ant.home = ${ant.home}</echo>
        <echo></echo>

    </target>

    <!--
       ========================================================================
         Verify that all mandatory properties have been set
       ========================================================================
    -->
    <target name="check.properties">

        <taskdef name="checkProperty" classname="org.apache.cactus.ant.CheckPropertiesTask">
            <classpath>
                <pathelement location="${cactus.ant.jar}"/>
            </classpath>
        </taskdef>

        <checkProperty>
            <property name="servlet.jar" isfile="true"/>
            <property name="aspectjrt.jar" isfile="true"/>
            <property name="commons.logging.jar" isfile="true"/>
            <property name="commons.httpclient.jar" isfile="true"/>
            <property name="junit.jar" isfile="true"/>
            <property name="httpunit.jar" isfile="true"/>
            <property name="log4j.jar" isfile="true"/>
        </checkProperty>

    </target>

    <!--
       ========================================================================
         Find out the J2EE API version
       ========================================================================
    -->
    <target name="check.j2ee.version">

        <condition property="j2ee.api" value="13">
            <available classname="javax.servlet.Filter">
	            <classpath>
	                <pathelement location="${servlet.jar}"/>
	            </classpath>
            </available>
        </condition>

        <condition property="j2ee.api" value="12">
            <available classname="javax.servlet.Servlet">
	            <classpath>
	                <pathelement location="${servlet.jar}"/>
	            </classpath>
            </available>
        </condition>

        <fail message="Unsupported J2EE version" unless="j2ee.api"/>

        <echo message="j2ee.api = ${j2ee.api}"/>

    </target>

    <!--
       ========================================================================
         Load all dynamic properties
       ========================================================================
    -->
    <target name="load.properties"
        depends="check.j2ee.version,properties.source,properties.target,properties.distribution"/>

    <!--
       ========================================================================
         Initialize the build. Must be called by all targets
       ========================================================================
    -->
    <target name="init"
        depends="display.properties,check.properties,load.properties">

        <tstamp/>

    </target>

    <!--
       ========================================================================
         Compiles the sources
       ========================================================================
    -->
    <target name="compile" depends="init" description="Compile the sources">

        <mkdir dir="${target.classes.java.dir}"/>

        <javac srcdir="${src.java.dir}" destdir="${target.classes.java.dir}"
          deprecation="${deprecation}" optimize="${optimize}"/>

    </target>

    <!--
       ========================================================================
         Create the runtime jar file
       ========================================================================
    -->
    <target name="jar" depends="compile" description="Generate the petal jar">

        <jar jarfile="${target.dir}/${antpetal.jar.name}.jar">

            <manifest>
                <section name="org/apache/cactus/petal/ant/">
                    <attribute name="Specification-Title"
                        value="${project.name.text}"/>
                    <attribute name="Specification-Version"
                        value="${project.version}"/>
                    <attribute name="Specification-Vendor"
                        value="Apache Software Foundation"/>
                    <attribute name="Implementation-Title"
                        value="${project.name.file}"/>
                    <attribute name="Implementation-Version"
                        value="${project.version} ${TODAY}"/>
                    <attribute name="Implementation-Vendor"
                        value="Apache Software Foundation"/>
                </section>
            </manifest>

            <metainf dir=".">
                <include name="LICENSE.cactus"/>
            </metainf>
            <fileset dir="${target.classes.java.dir}"/>
        </jar>

    </target>

    <!--
       ========================================================================
         Generate the documentation (javadoc)
       ========================================================================
    -->
    <target name="doc.check"
        depends="init">

      <uptodate property="doc.uptodate"
          targetfile="${target.doc.api.dir}/index.html">
          <srcfiles dir="${src.java.dir}"
              includes="**/*.java, **/*.html"/>
      </uptodate>

    </target>

    <target name="doc"
        depends="doc.check"
        unless="doc.uptodate"
        description="Generates the API documentation">

        <mkdir dir="${target.doc.api.dir}"/>

        <javadoc
            sourcepath="${src.java.dir}"
            packagenames="org.apache.cactus.petal.ant.*"
            destdir="${target.doc.api.dir}"
            author="true"
            public="true"
            version="true"
            use="true"
            windowtitle="${project.name.text} ${project.version}"
            doctitle="${project.name.text} ${project.version}"
            bottom="Copyright &amp;copy; ${year} Apache Software Foundation.
                    All Rights Reserved.">

        </javadoc>

    </target>

    <!--
       ========================================================================
         Generate the distributable files
       ========================================================================
    -->
    <target name="dist" depends="jar,doc,checkstyle"
        description="Generate the distributable files">

        <mkdir dir="${dist.lib.client.dir}"/>
        <mkdir dir="${dist.lib.server.dir}"/>
        <mkdir dir="${dist.lib.common.dir}"/>
        <mkdir dir="${dist.script.dir}"/>
        <mkdir dir="${dist.conf.dir}"/>

		<!-- Gather all server side Cactus jars -->
        <!-- (None at the moment) -->
        
		<!-- Gather all client side Cactus jars -->
        <copy tofile="${dist.lib.client.dir}/${antpetal.jar.name}-${project.version}.jar"
            file="${target.dir}/${antpetal.jar.name}.jar"/>
        <copy todir="${dist.lib.dir}/client" file="${servlet.jar}"/>
        <copy todir="${dist.lib.dir}/client" file="${commons.httpclient.jar}"/>
        <copy todir="${dist.lib.dir}/client" file="${httpunit.jar}"/>

		<!-- Gather all shared (client and server) Cactus jars -->
        <copy tofile="${dist.lib.common.dir}/cactus-${project.version}.jar" 
        	file="${cactus.framework.jar}"/>
        <copy todir="${dist.lib.common.dir}" file="${commons.logging.jar}"/>
        <copy todir="${dist.lib.common.dir}" file="${log4j.jar}"/>
        <copy todir="${dist.lib.common.dir}" file="${aspectjrt.jar}"/>
        <copy todir="${dist.lib.common.dir}" file="${junit.jar}"/>

		<!-- Copy the scripts for the current J2EE API -->

        <filter token="cactus.petal.ant.jar.name" 
        	value="${antpetal.jar.name}-${project.version}.jar"/>
        <filter token="cactus.framework.jar.name" 
        	value="cactus-${project.version}.jar"/>

		<basename property="log4j.jar.name" file="${log4j.jar}"/>
        <filter token="log4j.jar.name" value="${log4j.jar.name}"/>
		<basename property="aspectjrt.jar.name" file="${aspectjrt.jar}"/>
        <filter token="aspectjrt.jar.name" value="${aspectjrt.jar.name}"/>
		<basename property="commons.logging.jar.name" file="${commons.logging.jar}"/>
        <filter token="commons.logging.jar.name" value="${commons.logging.jar.name}"/>
		<basename property="junit.jar.name" file="${junit.jar}"/>
        <filter token="junit.jar.name" value="${junit.jar.name}"/>
		<basename property="commons.httpclient.jar.name" file="${commons.httpclient.jar}"/>
        <filter token="commons.httpclient.jar.name" value="${commons.httpclient.jar.name}"/>
		<basename property="httpunit.jar.name" file="${httpunit.jar}"/>
        <filter token="httpunit.jar.name" value="${httpunit.jar.name}"/>

		<copy todir="${dist.script.dir}" filtering="on">
			<fileset dir="${src.script.dir}/share"/>
			<fileset dir="${src.script.dir}/j2ee${j2ee.api}">
				<exclude name="build.xml"/>
			</fileset>
		</copy>
		<copy todir="${dist.dir}"
			file="${src.script.dir}/j2ee${j2ee.api}/build.xml"/>

		<!-- Copy the confs for the current J2EE API -->
		<copy todir="${dist.conf.dir}">
			<fileset dir="${src.conf.dir}/share"/>
			<fileset dir="${src.conf.dir}/j2ee${j2ee.api}"/>
		</copy>

		<!-- Copy the JSP Redirector -->
		<copy todir="${dist.conf.dir}" 
			file="${cactus.framework.web}/jspRedirector.jsp"/>
		
    </target>

    <!--
       ========================================================================
         Clean generated files (including distributables)
       ========================================================================
    -->
    <target name="clean" depends="load.properties"
    	description="Clean all generated files">

        <delete dir="${target.dir}"/>
        <delete dir="${dist.dir}"/>

    </target>

    <!--
       ========================================================================
         Perform a code audit using CheckStyle.
       ========================================================================
    -->
    <target name="checkstyle"
        depends="init, init.checkstyle"
        if="checkstyle.available"
        description="Perform a code audit using Checkstyle">

        <mkdir dir="${target.dir}"/>

        <checkstyle config="./checkstyle.xml" 
            failOnViolation="false">

            <fileset dir="${src.java.dir}">
                <include name="**/*.java"/>
            </fileset>
        
            <formatter type="plain"/>
            <formatter type="xml"
                toFile="${target.dir}/checkstyle_results.xml"/>

            <property key="checkstyle.header.file" file="./LICENSE.cactus"/>
        </checkstyle>

    </target>

</project>
