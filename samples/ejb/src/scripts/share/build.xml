<?xml version="1.0"?>

<!--
  =============================================================================
    Build file for the Cactus EJB Sample subproject. It shows how to use
    Cactus for unit testing EJBs.

    The following Ant tasks need to be available in your ant installation (i.e.
    the Ant task themselves and their dependent jars need to be put in
    ANT_HOME/lib):

        junit                  [REQUIRED] JUnit Ant task

    Check the build.properties file to find out what properties need to be set
    in order to successfully run this script.

    This script should be started with the following command line:

        ant <target>

    Run "ant -projecthelp" to get a list of available targets.
  =============================================================================
-->
<project name="Cactus EJB Sample" default="dist" basedir=".">

    <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it) -->
  <property file="build.properties" />
  <property file="${user.home}/build.properties" />

  <!-- Global project properties -->
  <property name="project.name.text" value="Cactus EJB Sample"/>
  <property name="project.name.file" value="cactus-sample-ejb"/>
  <property name="project.version" value="@version@"/>

  <!-- Prefix to add to all distributable files -->
  <property name="project.prefix" value="jakarta-"/>

  <!-- Generic properties -->
  <property name="year" value="@year@"/>
  <property name="debug" value="on"/>
  <property name="optimize" value="off"/>
  <property name="deprecation" value="off"/>

  <!-- Properties for the Cactus tests -->
  <property name="cactus.port" value="8080"/>
  <property name="cactus.jboss.startUpWait" value="2000"/>
  
  <!--
     ========================================================================
       Set the properties related to the source tree.
     ========================================================================
  -->
  <property name="src.dir" location="src"/>
  <property name="src.java.dir" location="${src.dir}/java"/>
  <property name="src.cactus.dir" location="${src.dir}/test-cactus"/>
  <property name="src.webapp.dir" location="${src.dir}/webapp"/>
  <property name="src.ejb.dir" location="${src.dir}/ejb"/>
  <property name="src.application.dir" location="${src.dir}/application"/>

  <!--
     ========================================================================
       Set the properties related to the target area
     ========================================================================
  -->
  <!-- Destination locations for the build -->
  <property name="target.dir" location="target"/>
  <property name="target.classes.dir" location="${target.dir}/classes"/>
  <property name="target.classes.java.dir"
      location="${target.classes.dir}/java"/>
  <property name="target.classes.cactus.dir"
      location="${target.classes.dir}/cactus"/>
  <property name="target.testreports.dir"
      location="${target.dir}/test-reports"/>

  <!-- Distribution directory, i.e. where the expanded distibutable files
       are located -->
  <property name="dist.dir" location="dist"/>

  <!--
     ========================================================================
       Set the properties related to the required libraries
     ========================================================================
  -->

  <!-- Libraries required for the sample project -->
  <property name="j2ee.jar"
      location="../../lib/@j2ee-dist.jar.name@"/>
  <path id="project.classpath">
    <pathelement location="${j2ee.jar}"/>
  </path>

  <!-- Libraries required for the Cactus tests -->
  <property name="aspectjrt.jar"
      location="../../lib/@aspectjrt.jar.name@"/>
  <property name="cactus.jar"
      location="../../lib/@cactus.jar.name@"/>
  <property name="cactus.ant.jar"
      location="../../lib/@cactus.ant.jar.name@"/>
  <property name="cargo.jar"
      location="../../lib/@cargo.jar.name@"/>
  <property name="cargo.ant.jar"
      location="../../lib/@cargo.ant.jar.name@"/>
  <property name="commons.httpclient.jar"
      location="../../lib/@commons.httpclient.jar.name@"/>
  <property name="commons.logging.jar"
      location="../../lib/@commons.logging.jar.name@"/>
  <property name="junit.jar"
      location="../../lib/@junit.jar.name@"/>
  <property name="htmlunit.jar"
      location="../../lib/@htmlunit.jar.name@"/>
  <path id="cactus.classpath">
    <path refid="project.classpath"/>
    <pathelement location="${aspectjrt.jar}"/>
    <pathelement location="${cactus.jar}"/>
    <pathelement location="${cactus.ant.jar}"/>
    <pathelement location="${cargo.jar}"/>
    <pathelement location="${cargo.ant.jar}"/>
    <pathelement location="${commons.httpclient.jar}"/>
    <pathelement location="${commons.logging.jar}"/>
    <pathelement location="${junit.jar}"/>
    <pathelement location="${htmlunit.jar}"/>
  </path>

  <!--
     ========================================================================
       Initialize the build. Must be called by all targets
     ========================================================================
  -->
  <target name="init">

    <condition property="properties.ok">
      <and>
        <available file="${j2ee.jar}"/>
      </and>
    </condition>
    <fail unless="properties.ok">Missing property or property pointing to an invalid file
(check your build.properties file)</fail>

    <taskdef resource="cactus.tasks" classpathref="cactus.classpath"/>
    <taskdef resource="cargo.tasks" classpathref="cactus.classpath"/>
    <tstamp/>

  </target>

  <!--
     ========================================================================
       Compiles the sources
     ========================================================================
  -->
  <!-- Compiles the java sources -->
  <target name="compile.java" depends="init">

    <mkdir dir="${target.classes.java.dir}"/>
    <javac destdir="${target.classes.java.dir}"
        deprecation="${deprecation}" optimize="${optimize}">
      <src path="${src.java.dir}"/>
      <classpath>
        <path refid="project.classpath"/>
      </classpath>
    </javac>

  </target>

  <!-- Compiles the Cactus test sources -->
  <target name="compile.cactus" depends="compile.java">

    <mkdir dir="${target.classes.cactus.dir}"/>
    <javac destdir="${target.classes.cactus.dir}"
        deprecation="${deprecation}" optimize="${optimize}">
      <src path="${src.cactus.dir}"/>
      <classpath>
        <path refid="cactus.classpath"/>
        <pathelement location="${target.classes.java.dir}"/>
      </classpath>
    </javac>

  </target>

  <target name="compile" depends="compile.java, compile.cactus"
      description="Compile the sources"/>

  <!--
     ========================================================================
       Create the runtime ejb-jar file.
     ========================================================================
  -->
  <target name="ejb" depends="compile.java"
      description="Generate the runtime ejb-jar">

    <!-- ATM, only support containers which do not need an ejb compilation
         step. For example: JBoss -->
    <jar jarfile="${target.dir}/${project.name.file}.jar">
      <fileset dir="${target.classes.java.dir}"/>
      <metainf dir="${src.ejb.dir}"/>
    </jar>

  </target>

  <!--
     ========================================================================
       Create the runtime ear file.
     ========================================================================
  -->
  <target name="ear" depends="ejb"
      description="Generate the runtime ear">

    <ear earfile="${target.dir}/${project.name.file}.ear"
        appxml="${src.application.dir}/application.xml">
      <fileset file="${target.dir}/${project.name.file}.jar"/>
    </ear>

  </target>

  <!--
     ========================================================================
       Generate the distributable files
     ========================================================================
  -->
  <target name="dist" depends="clean, ear, test"
      description="Generate the distributable files">

    <copy todir="${dist.dir}"
        file="${target.dir}/${project.name.file}.ear"/>

  </target>

  <!--
     ========================================================================
       Clean generated files (including distributables)
     ========================================================================
  -->
  <target name="clean" depends="init" description="Clean all generated files">

    <delete dir="${target.dir}"/>
    <delete dir="${dist.dir}"/>

  </target>

  <!--
     ========================================================================
       Create the war file that will hold the Cactus tests. At this point in
       time, as there isn't a <cactifyear> Ant task, we need to create
       manually a war file even if our application doesn't need one.
     ========================================================================
  -->
  <target name="test.war" depends="compile.cactus">

    <war warfile="${target.dir}/${project.name.file}.war"
         webxml="${src.webapp.dir}/WEB-INF/web.xml"/>

    <!-- Cactify the web-app archive -->
    <cactifywar srcfile="${target.dir}/${project.name.file}.war"
        destfile="${target.dir}/${project.name.file}-cactified.war"
        mergewebxml="${src.webapp.dir}/WEB-INF/cactus-web.xml">
      <classes dir="${target.classes.cactus.dir}"/>
      <!-- Needed for Clover coverage reports -->
      <@clover.begin@lib file="${clover.jar}"/@clover.end@>
    </cactifywar>

    <!-- Cactify the EAR -->    
    <ear earfile="${target.dir}/${project.name.file}-cactified.ear"
        appxml="${src.application.dir}/cactus/application.xml">   
      <zipfileset excludes="META-INF/application.xml"
          src="${target.dir}/${project.name.file}.ear"/>
      <fileset file="${target.dir}/${project.name.file}-cactified.war"/>
    </ear>
        
  </target>

  <!--
     ========================================================================
       Run the tests on the containers for which the Ant property
       "cactus.home.[container name]" has been defined.
     ========================================================================
  -->
 <target name="test.prepare" depends="ear, test.war">
  
	<!-- Convert the path to logging_*.properties to use forward slashes
	     so that it works when loaded as a String in Java (backslashes
	     won't work. -->
	<pathconvert property="target.dir.normalized" dirsep="/">
	  <path>
	    <pathelement location="${target.dir}"/>
	  </path>
	</pathconvert>
	<copy todir="${target.dir}" filtering="on" failonerror="false">
	  <fileset dir="${base.dir}">
	    <include name="logging_*.properties"/>
	  </fileset>
	  <filterset>
        <filter token="target.dir" value="${target.dir.normalized}"/>
      </filterset>
	</copy>
    <!-- Make sure logging_*.properties files exist, even if empty -->
    <touch file="${target.dir}/logging_client.properties"/>
    <touch file="${target.dir}/logging_server.properties"/>
  </target>


  <macrodef name="run-testcases">
    <attribute name="containerKey"/>
    <sequential>
      <mkdir dir="${target.testreports.dir}"/>
      <mkdir dir="${target.testreports.dir}/@{containerKey}"/>
      <cactustests fork="yes" failureproperty="tests.failed" haltonerror="true"
          servletport="${cactus.port}" earfile="${target.dir}/${project.name.file}-cactified.ear"
          todir="${target.testreports.dir}/@{containerKey}" logs="${target.dir.normalized}/logging_client.properties">

        <classpath>
          <path refid="project.classpath"/>
          <path refid="cactus.classpath"/>
          <pathelement location="${httpunit.jar}"/>
          <pathelement location="${nekohtml.jar}"/>
          <pathelement location="${target.classes.java.dir}"/>
          <pathelement location="${target.classes.cactus.dir}"/>
          <pathelement location="${log4j.jar}"/>
        </classpath>
        <formatter type="brief" usefile="false"/>
        <formatter type="xml"/>
        <batchtest>
        <fileset dir="${src.cactus.dir}">
          <include name="**/Test*.java"/>
          <exclude name="**/Test*All.java"/>
        </fileset>
       </batchtest>
      </cactustests>
    </sequential>
  </macrodef>

  <macrodef name="test-ejb">
    <attribute name="containerKey"/>
    <sequential>
      <antcall inheritAll="true" inheritRefs="true" target="test-container-internal">
        <param name="containerKey" value="@{containerKey}"/>
      </antcall>
    </sequential>
  </macrodef>
  <!-- Execute tests on a single container -->
  <macrodef name="test-container-internal-check">
    <attribute name="containerKey"/>
    <sequential>
      <condition property="container.shouldRun">
        <isset property="cactus.home.@{containerKey}"/>
      </condition>
    </sequential>
  </macrodef>
  <target name="test-container-internal-check">
    <test-container-internal-check containerKey="${containerKey}"/>
  </target>
  <target name="test-container-internal-ok" if="container.shouldRun">
    <echo>Running tests on ${containerKey} container...</echo>
    <start-container containerKey="${containerKey}"/>
    <run-testcases containerKey="${containerKey}"/> 
    <stop-container containerKey="${containerKey}"/> 
    <report-container containerKey="${containerKey}"/> 

  </target>
  <target name="test-container-internal-nok" unless="container.shouldRun">
    <echo>Not running tests on ${containerKey} container as [cactus.home.${containerKey}] property not defined</echo>
  </target>

  <target name="test-container-internal" 
      depends="test-container-internal-check,test-container-internal-ok,test-container-internal-nok"/>

  <!-- Start a container  -->
  <macrodef name="start-container">
    <attribute name="containerKey"/>
    <sequential>
      <mkdir dir="${target.dir}/@{containerKey}"/>
      <mkdir dir="${target.dir}/@{containerKey}/config"/>
      <cargo id="@{containerKey}" containerId="@{containerKey}" action="start"
          home="${cactus.home.@{containerKey}}" wait="false"
          log="${target.dir}/@{containerKey}/cargo_start.log"
          output="${target.dir}/@{containerKey}/container_start.log">
  	<configuration home="${target.dir}/@{containerKey}/config">
        <property name="cargo.servlet.port" value="${cactus.port}"/>
        <property name="cargo.logging" value="high"/>
        <deployable type="ear" file="${target.dir}/${project.name.file}-cactified.ear"/> 
	</configuration>
        <!-- Configure Cactus for logging -->
        <syspropertyset file="${target.dir.normalized}/logging_server.properties"/>

        <!-- Additional jars that will be added to the classpath used to start 
             the container -->
        <extraclasspath>
          <!-- pathelement location="${clover.jar}"/ -->
        </extraclasspath>
      </cargo>
    </sequential>
  </macrodef>
  <!-- Stop a container  -->
  <macrodef name="stop-container">
    <attribute name="containerKey"/>
    <sequential>
      <cargo refid="@{containerKey}" action="stop"
          log="${target.dir}/@{containerKey}/cargo_stop.log"
          output="${target.dir}/@{containerKey}/container_stop.log"/>
    </sequential>
  </macrodef>
  
  <!-- Generate JUnit test reports for a container -->
  <macrodef name="report-container">
    <attribute name="containerKey"/>
    <sequential>
      <junitreport todir="${target.testreports.dir}/@{containerKey}">
        <fileset dir="${target.testreports.dir}/@{containerKey}"
            includes="TEST-*.xml"/>
        <report todir="${target.testreports.dir}/@{containerKey}"
            format="frames"/>
      </junitreport>
    </sequential>
  </macrodef>

  <target name="test" depends="test.prepare"
      description="Run the tests on the defined containers">

    <test-ejb containerKey="jboss3x"/>
    <test-ejb containerKey="jboss4x"/>
    <test-ejb containerKey="orion1x"/>
    <test-ejb containerKey="orion2x"/>
    <test-ejb containerKey="weblogic8x"/>
    
    <fail if="tests.failed">At least one test failed!</fail>

  </target>


</project>
