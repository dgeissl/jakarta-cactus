<?xml version="1.0"?>

<!--
  =============================================================================
    Build file for the Cactus Jetty Sample subproject (it shows how to use
    Cactus and Jelly in an integrated way for unit testing the Servlet API : 
    Servlets, Fitlers, Taglibs).

    The following Ant tasks need to be available in your ant installation (i.e.
    the Ant task themselves and their dependent jars need to be put in
    ANT_HOME/lib) :

        junit                  [REQUIRED] JUnit Ant task

    The mandatory and optional Ant properties are defined in
    build.properties.sample. Please read and edit that file.

    This script should be started with the following command line :

        ant <target>

    Run "ant -projecthelp" to get a list of available targets. The default
    target is "dist"
  =============================================================================
-->
<project name="Cactus Jetty Sample" default="test" basedir=".">

    <!-- Give user a chance to override without editing this file
         (and without typing -D each time it compiles it) -->
    <property file="build.properties"/>
    <property file="${user.home}/build.properties" />

    <!-- Global project properties -->
    <property name="project.name.text" value="Cactus Jetty Sample"/>
    <property name="project.name.file" value="sample-jetty"/>
    <property name="project.version" value="@version@"/>

    <!-- Prefix to add to all distributable files -->
    <property name="project.prefix" value="jakarta-"/>

    <!-- Generic properties -->
    <property name="year" value="@year@"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="off"/>
    <property name="deprecation" value="off"/>

    <!--
       ========================================================================
         Base directory for all file related operations
       ========================================================================
    -->
    <property name="base.dir" value="."/>

    <!--
       ========================================================================
         Set the properties related to the source tree.
       ========================================================================
    -->
    <property name="src.dir" value="${base.dir}/src"/>
    <property name="src.java.dir" value="${src.dir}/java"/>
    <property name="src.cactus.dir" value="${src.dir}/test-cactus"/>
    <property name="src.webapp.dir" value="${src.dir}/webapp"/>
    
    <property name="build.dir" value="${base.dir}/build"/>
    <property name="web.dir" value="${base.dir}/web"/>
    <property name="conf.dir" value="${base.dir}/conf"/>
    <property name="conf.test.dir" value="${conf.dir}/test"/>
    
    <!--
       ========================================================================
         Set the properties related to the target area
       ========================================================================
    -->
    <!-- Destination locations for the build -->
    <property name="target.dir" value="${base.dir}/target"/>
    <property name="target.classes.dir" value="${target.dir}/classes"/>
    <property name="target.classes.java.dir" value="${target.classes.dir}/java"/>
    <property name="target.classes.unit.dir" value="${target.dir}/cactus"/>
    <property name="target.conf.dir" value="${target.dir}/conf"/>
    <property name="target.conf.client.dir" value="${target.conf.dir}/client"/>
    <property name="target.conf.server.dir" value="${target.conf.dir}/server"/>
    <property name="target.doc.dir" value="${target.dir}/doc"/>
    <property name="target.doc.api.dir" value="${target.doc.dir}/api"/>
    <property name="target.test.dir" value="${target.dir}/test"/>
    <property name="target.lib.dir" value="${target.dir}/lib"/>

    <!-- Distribution directory, i.e. where the expanded distibutable files
         are located -->
    <property name="dist.dir" value="${base.dir}/dist"/>
    <property name="dist.bin.dir" value="${dist.dir}/bin"/>
    <property name="dist.doc.dir" value="${dist.dir}/doc"/>
    <property name="dist.doc.api.dir" value="${dist.doc.dir}/api"/>

    <!--
       ========================================================================
         Default values that can be overidden
       ========================================================================
    -->
    <!-- The port that will be used to start the servers -->
    <property name="test.port" value="8080"/>

    <!--
       ========================================================================
        Names of deliverables
       ========================================================================
    -->
    <!-- The Sample war -->
    <property name="sample.war.name" value="${project.name.file}"/>

    <!--
       ========================================================================
         Useful patterns for targets
       ========================================================================
    -->
    <path id="project.classpath">

        <pathelement location="${cactus.framework.jar}"/>
        <pathelement location="${servlet.jar}"/>
        <pathelement location="${log4j.jar}"/>
        <pathelement location="${commons.logging.jar}"/>
        <pathelement location="${commons.httpclient.jar}"/>
        <pathelement location="${httpunit.jar}"/>
        <pathelement location="${junit.jar}"/>
        <pathelement location="${aspectjrt.jar}"/>
        <pathelement location="${jetty.jar}"/>
        <pathelement location="${jasperc.jar}"/>
        <pathelement location="${jasperr.jar}"/>
        <pathelement location="${jstl.jar}"/>
        <pathelement location="${standard.jar}"/>

        <!-- Includes system classpath for jars that are in ANT_HOME/lib such
             as aspectrt.jar, etc -->
        <pathelement path="${java.class.path}"/>
    </path>
    
    <path id="cactus.classpath">
        <pathelement location="${target.classes.java.dir}"/>
        
        @cactus.clover.pathelement@
            
        <path refid="project.classpath"/>
    </path>

    <!--
       ========================================================================
         Display configurable properties values
       ========================================================================
    -->
    <target name="display.properties">

        <echo message="----- ${project.name.text} ${project.version} -----"/>
        <echo message=""/>
        <echo message="java.class.path = ${java.class.path}"/>
        <echo message=""/>
        <echo message="java.home = ${java.home}"/>
        <echo message="user.home = ${user.home}"/>
        <echo message="ant.home = ${ant.home}"/>
        <echo message=""/>
        <echo message="cactus.framework.jar = ${cactus.framework.jar}"/>
        <echo message="servlet.jar = ${servlet.jar}"/>
        <echo message="aspectjrt.jar = ${aspectjrt.jar}"/>
        <echo message="commons.logging.jar = ${commons.logging.jar}"/>
        <echo message="commons.httpclient.jar = ${commons.httpclient.jar}"/>
        <echo message="httpunit.jar = ${httpunit.jar}"/>
        <echo message="junit.jar = ${junit.jar}"/>
        <echo message="jetty.jar = ${jetty.jar}"/>
        <echo message="jasperr.jar = ${jasperr.jar}"/>
        <echo message="jasperc.jar = ${jasperc.jar}"/>
        <echo message="jstl.jar = ${jstl.jar}"/>
        <echo message="standard.jar = ${standard.jar}"/>
        <echo message=""/>
        <echo message="log4j.jar (optional) = ${log4j.jar}"/>
        <echo message="clover.jar (optional) = ${clover.jar}"/>
        <echo message=""/>
        <echo message="test.port = ${test.port}"/>
        <echo message=""/>

    </target>

    <!--
       ========================================================================
         Verify that all mandatory properties have been set
       ========================================================================
    -->
    <target name="check.properties"
        depends="display.properties,check.properties.test,check.properties.warn"/>

    <target name="check.properties.test">

        <condition property="properties.ok">
            <and>
                <available file="${cactus.framework.jar}"/>
                <available file="${servlet.jar}"/>
                <available file="${aspectjrt.jar}"/>
                <available file="${commons.logging.jar}"/>
                <available file="${commons.httpclient.jar}"/>
                <available file="${httpunit.jar}"/>
                <available file="${junit.jar}"/>
                <available file="${jetty.jar}"/>
                <available file="${jasperc.jar}"/>
                <available file="${jasperr.jar}"/>
           </and>
        </condition>

    </target>

    <target name="check.properties.warn" unless="properties.ok">

        <fail message="Missing property or property pointing to an invalid file (check your build.properties file)"/>

    </target>
    <!--
       ========================================================================
         Initialize the build. Must be called by all targets
       ========================================================================
    -->
    <target name="init" depends="check.properties">

        <tstamp/>

        <!-- Filters -->
        <filter token="version" value="${project.version}"/>
        <filter token="project.name.text" value="${project.name.text}"/>
        <filter token="project.name.file" value="${project.name.file}"/>
        <filter token="year" value="${year}"/>
        <filter token="test.port" value="${test.port}"/>

    </target>

    <!--
       ========================================================================
         Compiles the sources
       ========================================================================
    -->
    <!-- Compiles the sample sources -->
    <target name="compile.sample" depends="init">

        <mkdir dir="${target.classes.java.dir}"/>

        <javac destdir="${target.classes.java.dir}"
          deprecation="${deprecation}" optimize="${optimize}">

            <src path="${src.java.dir}"/>

            <classpath>
                <path refid="project.classpath"/>
            </classpath>

        </javac>

    </target>

    <!-- Compiles the unit sources -->
    <target name="compile.unit" depends="init">

        <mkdir dir="${target.classes.unit.dir}"/>

        <javac destdir="${target.classes.unit.dir}"
          deprecation="${deprecation}" optimize="${optimize}">

            <src path="${src.cactus.dir}"/>

            <classpath>
                <path refid="cactus.classpath"/>
            </classpath>

        </javac>

    </target>

    <target name="compile" depends="compile.sample,compile.unit"
        description="Compile the sources">
    </target>

    <!--
       ========================================================================
         Create the runtime war file
       ========================================================================
    -->
    <target name="war" depends="compile" description="Generate the runtime war">

        <mkdir dir="${target.conf.client.dir}"/>

        <!-- Copy the manifest in order to replace the version token filter -->
        <copy todir="${target.conf.client.dir}" filtering="on">
            <fileset dir="${conf.dir}" >
                <include name="manifest"/>
            </fileset>
        </copy>

        <war warfile="${target.dir}/${sample.war.name}.war"
             webxml="${conf.dir}/web.xml"
             manifest="${target.conf.client.dir}/manifest">

            <classes dir="${target.classes.java.dir}">
                <!-- Do not include test files in the runtime war -->
                <exclude name="**/Test*.*"/>
            </classes>
            <classes dir="${target.classes.unit.dir}">
                <!-- Do not include test files in the runtime war -->
                <exclude name="**/Test*.*"/>
            </classes>
        </war>

    </target>

    <!--
       ========================================================================
         Generate the documentation (javadoc)
       ========================================================================
    -->
    <target name="doc" depends="init" description="Generate the documentation">

        <mkdir dir="${target.doc.api.dir}"/>

        <javadoc
            packagenames="org.apache.cactus.sample.*,org.apache.cactus.unit.*"
            destdir="${target.doc.api.dir}"
            author="true"
            public="true"
            version="true"
            use="true"
            windowtitle="${project.name.text} ${project.version}"
            doctitle="${project.name.text} ${project.version}"
            bottom="Copyright &amp;copy; ${year} Apache Software Foundation. All Rights Reserved.">

            <sourcepath>
                <pathelement location="${src.sample.dir}"/>
                <pathelement location="${src.unit.dir}"/>
            </sourcepath>

            <classpath refid="project.classpath"/>

        </javadoc>

    </target>

    <!--
       ========================================================================
         Generate the distributable files
       ========================================================================
    -->
    <target name="dist" depends="clean,war,doc"
        description="Generate the distributable files">

        <mkdir dir="${dist.bin.dir}"/>
        <mkdir dir="${dist.doc.api.dir}"/>

        <copy todir="${dist.bin.dir}"
            file="${target.dir}/${sample.war.name}.war"/>
        <copy todir="${dist.doc.api.dir}">
            <fileset dir="${target.doc.api.dir}"/>
        </copy>

    </target>

    <!--
       ========================================================================
         Clean generated files (including distributables)
       ========================================================================
    -->
    <target name="clean" depends="init" description="Clean all generated files">

        <delete dir="${target.dir}"/>
        <delete dir="${dist.dir}"/>

    </target>

    <!--
       ========================================================================
         Run the Cactus test using the <junit> Ant task.
       ========================================================================
    -->
    <target name="prepare.test" depends="init">

        <!-- Copy log_client.properties so that it is in the classpath -->
        <!--copy tofile="${target.conf.client.dir}/log4j.properties"
            file="${conf.test.dir}/log_client.properties"/-->

    </target>

    <target name="test" depends="prepare.test,compile">

        <junit printsummary="yes" haltonfailure="yes" haltonerror="yes"
            fork="yes">

            <jvmarg value="-Dcactus.contextURL=http://localhost:${test.port}/test"/>
            <jvmarg value="-Dcactus.jetty.resourceDir=${src.webapp.dir}"/>
            <jvmarg value="-Dcactus.initializer=org.apache.cactus.extension.jetty.JettyInitializer"/>
            <jvmarg value="-Dcactus.jetty.config=${src.webapp.dir}/test/jetty.xml"/>
            
            <classpath>
                <!-- Cactus.propertie and log_client.properties need to be in
                     the classpath -->
                <pathelement location="${target.conf.client.dir}"/>
                <pathelement location="${target.classes.unit.dir}"/>
                <pathelement location="${target.classes.java.dir}"/>
                <path refid="project.classpath"/>
            </classpath>

            <formatter type="plain" usefile="false"/>

            <!-- Note: The unit tests must be run first. See
                 org.apache.cactus.unit.TestAll for details -->
            <!--test name="org.apache.cactus.sample.unit.TestAll"/-->
            <test name="org.apache.cactus.sample.TestAll"/>

        </junit>

    </target>

</project>