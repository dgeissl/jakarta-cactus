<?xml version="1.0" encoding="UTF-8"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!--
  =============================================================================
    Build file for the Cactus Jetty Sample subproject (it shows how to use
    Cactus and Jelly in an integrated way for unit testing the Servlet API : 
    Servlets, Fitlers, Taglibs).

    The following Ant tasks need to be available in your ant installation (i.e.
    the Ant task themselves and their dependent jars need to be put in
    ANT_HOME/lib) :

        junit                  [REQUIRED] JUnit Ant task

    The mandatory and optional Ant properties are defined in
    build.properties.sample. Please read and edit that file.

    This script should be started with the following command line :

        ant <target>

    Run "ant -projecthelp" to get a list of available targets. The default
    target is "dist"
  =============================================================================
-->
<project name="Cactus Jetty Sample" xmlns:ivy="antlib:org.apache.ivy.ant" default="test">

  <description>
     Cactus Jetty Sample
     ---------------------------------------------------------
     Sample web-application that demonstrates how Cactus can
     be used using the Jetty integration for unit testing 
     classes that use the servlet API (such as servlets, 
     filters and tag libraries).
  </description>

 <!--
     ========================================================================
       Initialize properties.
     ========================================================================
  -->	
  <target name="init" depends="">
  
	  <property name="cactus.sample.app.type" value="servlet"/>
		<property name="cactus.sample.archive.type" value="war"/>
    <property environment="env"/>
    <property file="../build.properties"/>
	 
	
		<path id="cactus.classpath">
			<fileset dir="${ivy.lib.dir}">
        <include name="*.jar"/>
      </fileset>
      <dirset dir="../servlet/target/">
				<include name="test-classes"/>
      </dirset>
		</path>
		
  </target>
  
<!--
     ========================================================================
       Prepare the folder structure.
     ========================================================================
  -->
	<target name="prepare" depends="init">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${logs.dir}"/>
		<mkdir dir="${reports.dir}"/>
	</target>

<!--
     ========================================================================
       Resolve Ivy dependencies.
     ========================================================================
  -->
	<target name="resolve" description="Retrieve dependencies with ivy" depends="prepare">
		<ivy:configure file="../ivysettings.xml" />
		<ivy:retrieve file="./ivy.xml" sync="true"/>
  </target>

<!--
     ========================================================================
       Load external ant tasks.
     ========================================================================
  -->
	<target name="load.tasks" depends="resolve">
		<taskdef resource="cactus.tasks"
			 classpathref="cactus.classpath">
		</taskdef>
	</target>



<!--
     ========================================================================
       Compile source classes as well as cactus classes.
     ========================================================================
  -->
	<!--Note that if some dependency is missing in the classpath, instead of compilation errors,
      Ivy reports to Maven 'No Compiler Found' error. -->
	<target name="compile" depends="load.tasks">
		
		<javac srcdir="${src.dir}"
		       destdir="${build.dir}"
		       classpathref="cactus.classpath"/>
	</target>

  <!--
     ========================================================================
       Create the runtime war file.
     ========================================================================
  -->
	<target name="package-war" depends="compile">
		<war destfile="${servlet.archive.name}" webxml="${basedir}/src/main/webapp/WEB-INF/web.xml">
		  <fileset dir="${basedir}/src/main/webapp/WEB-INF">
        <exclude name="cactus-report.xsl"/>
        <exclude name="cactus-web.xml"/>
        <exclude name="web.xml"/>
      </fileset>
      <fileset dir="${basedir}/src/main/webapp">
        <include name="test/test.jsp"/>
        <include name="org/apache/jsp/jspRedirector.jsp"/>
      </fileset>
			<classes dir="${build.dir}"/>
			<lib dir="${ivy.lib.dir}">
				<include name="**.jar"/>
				<exclude name="jsp-api-2.0.jar"/>
        <exclude name="servlet-api-2.5.jar"/>
			</lib>	
		</war>
	</target>


  <!--
     ========================================================================
       Generate the distributable files
     ========================================================================
  -->
  <target name="dist" depends="clean, package-war, test"
      description="Generate the distributable files">

    <copy todir="${dist.dir}"
        file="${target.dir}/${project.name.file}.war"/>

  </target>

  <!--
     ========================================================================
       Clean generated files (including distributables)
     ========================================================================
  -->
  <target name="clean" depends="init" description="Clean all generated files">

    <delete dir="${target.dir}"/>
    <delete dir="${dist.dir}"/>

  </target>

<!--
     ========================================================================
       Run the tests on Jetty.
     ========================================================================
  -->
  <target name="test" depends="compile">
    
    <junit fork="yes" failureproperty="tests.failed">
      <sysproperty key="cactus.contextURL"
          value="http://localhost:${cargo.servlet.port}/test"/>
      <sysproperty key="cactus.jetty.resourceDir" file="${src.webapp.dir}"/>
      <sysproperty key="cactus.jetty.config" file="${src.conf.dir}/5x/jetty.xml"/>
      <classpath>
        <path refid="cactus.classpath"/>
        <pathelement location="${build.dir}"/>
        <!-- Needed By Jasper to Compile the JSPs-->
        <pathelement location="${env.JAVA_HOME}\lib\tools.jar"/>
      </classpath>
      <formatter type="brief" usefile="false"/>
      <formatter type="xml"/>
      <test todir="${reports.dir}"
          name="org.apache.cactus.sample.jetty.TestJettyAll"/>
    </junit>

    <junitreport todir="${reports.dir}">
      <fileset dir="${reports.dir}" includes="TEST-*.xml"/>
      <report todir="${reports.dir}" format="frames"/>
    </junitreport>

    <fail if="tests.failed">At least one test failed!</fail>

  </target>

</project>
