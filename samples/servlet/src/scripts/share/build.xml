<?xml version="1.0"?>

<!--
  =============================================================================
    Build file for the Cactus Servlet Sample subproject. It shows how to use
    Cactus for unit testing the Servlet API (Servlets, Filters and Taglibs).

    The following Ant tasks need to be available in your ant installation (i.e.
    the Ant task themselves and their dependent jars need to be put in
    ANT_HOME/lib):

        junit                  [REQUIRED] JUnit Ant task

    Check the build.properties file to find out what properties need to be set
    in order to successfully run this script.

    This script should be started with the following command line:

        ant <target>

    Run "ant -projecthelp" to get a list of available targets.
  =============================================================================
-->
<project name="Cactus Servlet Sample" default="dist" basedir=".">

    <!-- Give user a chance to override without editing this file
         (and without typing -D each time it compiles it) -->
    <property file="build.properties" />
    <property file="${user.home}/build.properties" />

    <!-- Global project properties -->
    <property name="project.name.text" value="Cactus Servlet Sample"/>
    <property name="project.name.file" value="sample-servlet"/>
    <property name="project.version" value="@version@"/>

    <!-- Prefix to add to all distributable files -->
    <property name="project.prefix" value="jakarta-"/>

    <!-- Generic properties -->
    <property name="year" value="@year@"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="off"/>
    <property name="deprecation" value="off"/>

    <!-- Properties for the Cactus tests -->
    <property name="cactus.port" value="8080"/>

    <!--
       ========================================================================
         Set the properties related to the source tree.
       ========================================================================
    -->
    <property name="lib.dir" location="${basedir}/lib"/>
    <property name="src.dir" location="${basedir}/src"/>
    <property name="src.java.dir" location="${src.dir}/java"/>
    <property name="src.cactus.dir" location="${src.dir}/test-cactus"/>
    <property name="src.webapp.dir" location="${src.dir}/webapp"/>

    <!--
       ========================================================================
         Set the properties related to the target area
       ========================================================================
    -->
    <!-- Destination locations for the build -->
    <property name="target.dir" location="${basedir}/target"/>
    <property name="target.classes.dir" location="${target.dir}/classes"/>
    <property name="target.classes.java.dir"
        location="${target.classes.dir}/java"/>
    <property name="target.classes.cactus.dir"
        location="${target.classes.dir}/cactus"/>
    <property name="target.testreports.dir"
        location="${target.dir}/test-reports"/>

    <!-- Distribution directory, i.e. where the expanded distibutable files
         are located -->
    <property name="dist.dir" location="${basedir}/dist"/>

    <!--
       ========================================================================
         Set the properties related to the required libraries
       ========================================================================
    -->

    <property name="lib.dir" location="${basedir}/lib"/>

    <!-- Libraries required for the sample project -->
    <property name="servlet.jar"
        location="${lib.dir}/@servlet.jar.name@"/>
    <property name="jstl.jar"
        location="${lib.dir}/@jstl.jar.name@"/>
    <property name="standard.jar"
        location="${lib.dir}/@standard.jar.name@"/>
    <path id="project.classpath">
        <pathelement location="${servlet.jar}"/>
        <pathelement location="${jstl.jar}"/>
        <pathelement location="${standard.jar}"/>
    </path>

    <!-- Libraries required for the Cactus tests -->
    <property name="aspectjrt.jar"
        location="${lib.dir}/@aspectjrt.jar.name@"/>
    <property name="cactus.ant.jar"
        location="${lib.dir}/@cactus.ant.jar.name@"/>
    <property name="cactus.framework.jar"
        location="${lib.dir}/@cactus.framework.jar.name@"/>
    <property name="commons.httpclient.jar"
        location="${lib.dir}/@commons.httpclient.jar.name@"/>
    <property name="commons.logging.jar"
        location="${lib.dir}/@commons.logging.jar.name@"/>
    <property name="httpunit.jar"
        location="${lib.dir}/@httpunit.jar.name@"/>
    <property name="junit.jar"
        location="${lib.dir}/@junit.jar.name@"/>
    <property name="nekohtml.jar"
        location="${lib.dir}/@nekohtml.jar.name@"/>
    <path id="cactus.classpath">
        <path refid="project.classpath"/>
        <pathelement location="${aspectjrt.jar}"/>
        <pathelement location="${cactus.ant.jar}"/>
        <pathelement location="${cactus.framework.jar}"/>
        <pathelement location="${commons.httpclient.jar}"/>
        <pathelement location="${commons.logging.jar}"/>
        <pathelement location="${httpunit.jar}"/>
        <pathelement location="${junit.jar}"/>
        <pathelement location="${nekohtml.jar}"/>
        @cactus.clover.pathelement@
    </path>

    <!--
       ========================================================================
         Initialize the build. Must be called by all targets
       ========================================================================
    -->
    <target name="init">

        <condition property="properties.ok">
            <and>
                <available file="${servlet.jar}"/>
                <available file="${jstl.jar}"/>
                <available file="${standard.jar}"/>
           </and>
        </condition>
        <fail message="Missing property or property pointing to an invalid file
                       (check your build.properties file)"
             unless="properties.ok"/>

        <taskdef resource="cactus.tasks" classpathref="cactus.classpath"/>

        <tstamp/>

    </target>

    <!--
       ========================================================================
         Compiles the sources
       ========================================================================
    -->
    <!-- Compiles the java sources -->
    <target name="compile.java" depends="init">

        <mkdir dir="${target.classes.java.dir}"/>

        <javac destdir="${target.classes.java.dir}"
          deprecation="${deprecation}" optimize="${optimize}">

            <src path="${src.java.dir}"/>
            <classpath>
                <path refid="project.classpath"/>
            </classpath>
        </javac>

    </target>

    <!-- Compiles the Cactus test sources -->
    <target name="compile.cactus" depends="compile.java">

        <mkdir dir="${target.classes.cactus.dir}"/>

        <javac destdir="${target.classes.cactus.dir}"
          deprecation="${deprecation}" optimize="${optimize}">

            <src path="${src.cactus.dir}"/>
            <classpath>
                <path refid="cactus.classpath"/>
                <pathelement location="${target.classes.java.dir}"/>
            </classpath>
        </javac>

    </target>

    <target name="compile" depends="compile.java, compile.cactus"
        description="Compile the sources">
    </target>

    <!--
       ========================================================================
         Create the runtime war file
       ========================================================================
    -->
    <target name="war" depends="compile.java"
        description="Generate the runtime war">

        <war warfile="${target.dir}/${project.name.file}.war"
             webxml="${src.webapp.dir}/WEB-INF/web.xml">

            <fileset dir="${src.webapp.dir}">
                <exclude name="cactus-report.xsl"/>
                <exclude name="WEB-INF/web.xml"/>
            </fileset>

            <classes dir="${target.classes.java.dir}"/>

            <lib file="${jstl.jar}"/>
            <lib file="${standard.jar}"/>

        </war>

    </target>

    <!--
       ========================================================================
         Generate the distributable files
       ========================================================================
    -->
    <target name="dist" depends="clean, war, test"
        description="Generate the distributable files">

        <copy todir="${dist.dir}"
            file="${target.dir}/${sample.war.name}.war"/>

    </target>

    <!--
       ========================================================================
         Clean generated files (including distributables)
       ========================================================================
    -->
    <target name="clean" depends="init" description="Clean all generated files">

        <delete dir="${target.dir}"/>
        <delete dir="${dist.dir}"/>

    </target>

    <!--
       ========================================================================
         Run the tests on the containers for which the Ant property
         "cactus.home.[container name]" has been defined.
       ========================================================================
    -->
    <target name="test" depends="war, compile.cactus"
        description="Run the tests on the defined containers">

        <!-- Cactify the web-app archive -->
        <cactify srcfile="${target.dir}/${project.name.file}.war"
            destfile="${target.dir}/test.war">
          <classes dir="${target.classes.cactus.dir}"/>
          <!-- Orion fails on a servlet filter that is not mapped to an actual
               resource, to trick it -->
          <filterredirector mapping="/test/filterRedirector.jsp"/>
        </cactify>

        <!-- Prepare the directories for the JUnit reports -->
        <mkdir dir="${target.testreports.dir}"/>
        <@j2ee13.begin@mkdir dir="${target.testreports.dir}/jboss3x"/@j2ee13.end@>
        <mkdir dir="${target.testreports.dir}/orion1x"/>
        <mkdir dir="${target.testreports.dir}/orion2x"/>
        <mkdir dir="${target.testreports.dir}/resin2x"/>
        <@j2ee12.begin@mkdir dir="${target.testreports.dir}/tomcat3x"/@j2ee12.end@>
        <mkdir dir="${target.testreports.dir}/tomcat4x"/>
        <mkdir dir="${target.testreports.dir}/tomcat5x"/>
        <mkdir dir="${target.testreports.dir}/weblogic7x"/>

        <!-- Run the tests -->
        <cactus warfile="${target.dir}/test.war" fork="yes"
            printsummary="yes" failureproperty="tests.failed">
          <classpath>
            <path refid="project.classpath"/>
            <pathelement location="${target.classes.java.dir}"/>
            <pathelement location="${target.classes.cactus.dir}"/>
          </classpath>
          <containerset>
            <@j2ee13.begin@jboss3x if="cactus.home.jboss3x"
                dir="${cactus.home.jboss3x}"
                output="${target.testreports.dir}/jboss3x.out"
                todir="${target.testreports.dir}/jboss3x"/@j2ee13.end@>
            <orion1x if="cactus.home.orion1x"
                dir="${cactus.home.orion1x}" port="${cactus.port}"
                output="${target.testreports.dir}/orion1x.out"
                todir="${target.testreports.dir}/orion1x"/>
            <orion2x if="cactus.home.orion2x"
                dir="${cactus.home.orion2x}" port="${cactus.port}"
                output="${target.testreports.dir}/orion2x.out"
                todir="${target.testreports.dir}/orion2x"/>
            <resin2x if="cactus.home.resin2x"
                dir="${cactus.home.resin2x}" port="${cactus.port}"
                output="${target.testreports.dir}/resin2x.out"
                todir="${target.testreports.dir}/resin2x"/>
            <@j2ee12.begin@tomcat3x if="cactus.home.tomcat3x"
                dir="${cactus.home.tomcat3x}" port="${cactus.port}"
                output="${target.testreports.dir}/tomcat3x.out"
                todir="${target.testreports.dir}/tomcat3x"/@j2ee12.end@>
            <tomcat4x if="cactus.home.tomcat4x"
                dir="${cactus.home.tomcat4x}" port="${cactus.port}"
                output="${target.testreports.dir}/tomcat4x.out"
                todir="${target.testreports.dir}/tomcat4x"/>
            <tomcat5x if="cactus.home.tomcat5x"
                dir="${cactus.home.tomcat5x}" port="${cactus.port}"
                output="${target.testreports.dir}/tomcat5x.out"
                todir="${target.testreports.dir}/tomcat5x"/>
            <weblogic7x if="cactus.home.weblogic7x"
                dir="${cactus.home.weblogic7x}" port="${cactus.port}"
                output="${target.testreports.dir}/weblogic7x.out"
                todir="${target.testreports.dir}/weblogic7x"/>
          </containerset>
          <formatter type="brief" usefile="false"/>
          <formatter type="xml"/>
          <batchtest>
            <fileset dir="${src.cactus.dir}">
              <!-- This JUnit test need to be the first one to be run.
                   Otherwise, the test result might be that of the previous
                   test and not the current test one, thus proving nothing -->
              <include name="**/TestClientServerSynchronization.java"/>
            </fileset>
          </batchtest>
          <batchtest>
            <fileset dir="${src.cactus.dir}">
              <!-- Due to some Cactus synchronization bug, the 'unit' tests need
                   to run before the 'sample' tests -->
              <include name="**/unit/Test*.java"/>
              <exclude name="**/unit/Test*All.java"/>
              <exclude name="**/unit/TestClientServerSynchronization.java"/>
            </fileset>
          </batchtest>
          <batchtest>
            <fileset dir="${src.cactus.dir}">
              <include name="**/sample/Test*.java"/>
              <exclude name="**/sample/Test*All.java"/>
            </fileset>
          </batchtest>
        </cactus>

        <!-- Generate the JUnit reports -->
        <@j2ee13.begin@junitreport todir="${target.testreports.dir}/jboss3x">
          <fileset dir="${target.testreports.dir}/jboss3x"
              includes="TEST-*.xml"/>
          <report todir="${target.testreports.dir}/jboss3x"
              format="frames"/>
        </junitreport@j2ee13.end@>
        <junitreport todir="${target.testreports.dir}/orion1x">
          <fileset dir="${target.testreports.dir}/orion1x"
              includes="TEST-*.xml"/>
          <report todir="${target.testreports.dir}/orion1x"
              format="frames"/>
        </junitreport>
        <junitreport todir="${target.testreports.dir}/orion2x">
          <fileset dir="${target.testreports.dir}/orion2x"
              includes="TEST-*.xml"/>
          <report todir="${target.testreports.dir}/orion2x"
              format="frames"/>
        </junitreport>
        <junitreport todir="${target.testreports.dir}/resin2x">
          <fileset dir="${target.testreports.dir}/resin2x"
              includes="TEST-*.xml"/>
          <report todir="${target.testreports.dir}/resin2x"
              format="frames"/>
        </junitreport>
        <@j2ee12.begin@junitreport todir="${target.testreports.dir}/tomcat3x">
          <fileset dir="${target.testreports.dir}/tomcat3x"
              includes="TEST-*.xml"/>
          <report todir="${target.testreports.dir}/tomcat3x"
              format="frames"/>
        </junitreport@j2ee12.end@>
        <junitreport todir="${target.testreports.dir}/tomcat4x">
          <fileset dir="${target.testreports.dir}/tomcat4x"
              includes="TEST-*.xml"/>
          <report todir="${target.testreports.dir}/tomcat4x"
              format="frames"/>
        </junitreport>
        <junitreport todir="${target.testreports.dir}/tomcat5x">
          <fileset dir="${target.testreports.dir}/tomcat5x"
              includes="TEST-*.xml"/>
          <report todir="${target.testreports.dir}/tomcat5x"
              format="frames"/>
        </junitreport>
        <junitreport todir="${target.testreports.dir}/weblogic7x">
          <fileset dir="${target.testreports.dir}/weblogic7x"
              includes="TEST-*.xml"/>
          <report todir="${target.testreports.dir}/weblogic7x"
              format="frames"/>
        </junitreport>

        <fail if="tests.failed">At least one test failed!</fail>

    </target>

</project>
