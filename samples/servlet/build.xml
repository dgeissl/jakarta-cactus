<?xml version="1.0"?>
<!DOCTYPE project [
    <!ENTITY common SYSTEM "file:../../build-common.xml">
]>

<!--
  =============================================================================
    Build file for the Cactus Servlet Sample subproject (it shows how to use
    Cactus for unit testing the Servlet API : Servlets, Fitlers, Taglibs).

    The mandatory and optional Ant properties are defined in
    build.properties.sample. Please read and edit that file.

    This script should be started with the following command line :

        ant <target>

    Run "ant -projecthelp" to get a list of available targets. The default
    target is "dist"

    Note: basedir points to the main Cactus directory in order to have the same
          base dir for all Cactus subprojects and thus be able to share
          relative paths.
  =============================================================================
-->
<project name="Cactus Servlet Sample" default="dist" basedir="../..">

    <description>
 Build file for the Cactus Servlet Sample, which shows how to use Cactus for
 unit testing the Servlet API (Servlets, Fitlers, Tag Libraries).
    </description>

    <!-- Base directory for all file related operations -->
    <property name="base.dir" location="${basedir}/samples/servlet"/>

    <!-- Indicate that this subproject is dependant on the version of the J2EE
         API available -->
    <property name="j2ee.dependant" value="true"/>

    <!-- Include properties and targets common to the different subprojects -->
    &common;

    <!-- Global project properties -->
    <property name="project.name.text" value="Cactus Servlet Sample"/>
    <property name="project.name.file" value="cactus-sample-servlet"/>

    <!--
       ========================================================================
         Initialize source, target and dist properties
       ========================================================================
    -->
    <target name="properties">

        <!-- Set the properties related to the source tree -->
        <property name="src.dir" location="${base.dir}/src"/>
        <property name="src.java.dir" location="${src.dir}/java"/>
        <property name="src.cactus.dir" location="${src.dir}/test-cactus"/>
        <property name="src.script.dir" location="${src.dir}/scripts"/>
        <property name="src.webapp.dir" location="${src.dir}/webapp"/>

        <!-- Set the properties related to the target area -->
        <property name="target.sample.dir" location="${target.dir}/sample"/>
        <property name="target.sample.src.dir"
            location="${target.sample.dir}/src"/>
        <property name="target.sample.src.java.dir"
            location="${target.sample.src.dir}/java"/>
        <property name="target.sample.src.cactus.dir"
            location="${target.sample.src.dir}/test-cactus"/>
        <property name="target.sample.src.webapp.dir" 
            location="${target.sample.src.dir}/webapp"/>
        <property name="target.sample.lib.dir" 
            location="${target.sample.dir}/lib"/>
        <property name="target.test.dir" 
            location="${target.dir}/test"/>

    </target>

    <!--
       ========================================================================
         Useful patterns for targets
       ========================================================================
    -->
    <path id="project.class.path">
        <pathelement location="${j2ee.jar}"/>
    </path>

    <!--
       ========================================================================
         Verify that all mandatory properties have been set
       ========================================================================
    -->
    <target name="check.properties">

        <taskdef name="checkProperty" 
            classname="org.apache.cactus.ant.CheckPropertiesTask">
            <classpath>
                <pathelement location="${cactus.anttasks.jar}"/>
            </classpath>
        </taskdef>

        <checkProperty>
            <property name="j2ee.jar" isfile="true"/>
            <property name="jstl.jar" isfile="true"/>
            <property name="standard.jar" isfile="true"/>
        </checkProperty>

    </target>

    <!--
       ========================================================================
         Initialize filters used in copy operations
       ========================================================================
    -->
    <target name="init.filters.clover"
        depends="init.common"
        if="clover.enable">

      <filterset id="clover.enablement">
          <filter token="clover.begin" value=""/>
          <filter token="clover.end" value=""/>
      </filterset>

    </target>

    <target name="init.filters.noclover"
        depends="init.common"
        unless="clover.enable">

      <filterset id="clover.enablement">
          <filter token="clover.begin" value="!-- "/>
          <filter token="clover.end" value=" --"/>
      </filterset>

    </target>

    <target name="init.filters.12" depends="init.common"
        unless="j2ee13.available">

      <filterset id="container.enablement">
          <filter token="j2ee12.begin" value=""/>
          <filter token="j2ee12.end" value=""/>
          <filter token="j2ee13.begin" value="!-- "/>
          <filter token="j2ee13.end" value=" --"/>
      </filterset>

    </target>

    <target name="init.filters.13" depends="init.common"
        if="j2ee13.available">

      <filterset id="container.enablement">
          <filter token="j2ee12.begin" value="!-- "/>
          <filter token="j2ee12.end" value=" --"/>
          <filter token="j2ee13.begin" value=""/>
          <filter token="j2ee13.end" value=""/>
      </filterset>

    </target>

    <target name="init.filters"
        depends="init.filters.clover, init.filters.noclover,
                 init.filters.12, init.filters.13">

        <!-- Copy scripts -->
		<basename property="jstl.jar.name" file="${jstl.jar}"/>
		<basename property="standard.jar.name" file="${standard.jar}"/>
		<basename property="servlet.jar.name" file="${j2ee.jar}"/>
		<basename property="aspectjrt.jar.name" file="${aspectjrt.jar}"/>
		<basename property="commons.httpclient.jar.name"
		    file="${commons.httpclient.jar}"/>
		<basename property="commons.logging.jar.name"
		    file="${commons.logging.jar}"/>
		<basename property="httpunit.jar.name" file="${httpunit.jar}"/>
		<basename property="junit.jar.name" file="${junit.jar}"/>
		<basename property="nekohtml.jar.name" file="${nekohtml.jar}"/>

        <filterset id="jar.locations">
            <filter token="jstl.jar.name" value="${jstl.jar.name}"/>
            <filter token="standard.jar.name" value="${standard.jar.name}"/>
            <filter token="servlet.jar.name" value="${servlet.jar.name}"/>
            <filter token="aspectjrt.jar.name" value="${aspectjrt.jar.name}"/>
            <filter token="cactus.ant.jar.name"
                value="${cactus.antintegration.jar.name}.jar"/>
            <filter token="cactus.framework.jar.name"
                value="${cactus.framework.jar.name}.jar"/>
            <filter token="commons.httpclient.jar.name"
                value="${commons.httpclient.jar.name}"/>
            <filter token="commons.logging.jar.name"
                value="${commons.logging.jar.name}"/>
            <filter token="httpunit.jar.name" value="${httpunit.jar.name}"/>
            <filter token="junit.jar.name" value="${junit.jar.name}"/>
            <filter token="nekohtml.jar.name" value="${nekohtml.jar.name}"/>
        </filterset>

    </target>

    <!--
       ========================================================================
         Initialize the build. Must be called by all targets
       ========================================================================
    -->
    <target name="init" 
        depends="init.common, init.filters, properties, check.properties">

        <echo>cactus.port (optional) = ${cactus.port}</echo>
        <echo>clover.enable (optional) = ${clover.enable}</echo>

    </target>

    <!--
        ========================================================================
          Generate the sample application
        ========================================================================
     -->
    <target name="sample.main" depends="init">

        <!-- Create output directory structure and copy sample files in it -->
        <mkdir dir="${target.sample.dir}"/>
        <mkdir dir="${target.sample.lib.dir}"/>
        <mkdir dir="${target.sample.src.java.dir}"/>
        <mkdir dir="${target.sample.src.cactus.dir}"/>
        <mkdir dir="${target.sample.src.webapp.dir}"/>
        
        <!-- Copy src files -->
        <copy todir="${target.sample.src.java.dir}">
            <fileset dir="${src.java.dir}/share"/>
            <fileset dir="${src.java.dir}/j2ee${j2ee.api}"/>
        </copy>
        <copy todir="${target.sample.src.cactus.dir}">
            <fileset dir="${src.cactus.dir}/share"/>
            <fileset dir="${src.cactus.dir}/j2ee${j2ee.api}"/>
        </copy>

        <!-- Copy scripts -->
        <copy todir="${target.sample.dir}" filtering="on">
            <fileset dir="${src.script.dir}/share"/>
            <fileset dir="${src.script.dir}/j2ee${j2ee.api}"/>
            <filterset refid="clover.enablement"/>
            <filterset refid="container.enablement"/>
            <filterset refid="jar.locations"/>
        </copy>

        <!-- Copy webapp files -->
        <copy todir="${target.sample.src.webapp.dir}">
            <fileset dir="${src.webapp.dir}/share"/>
            <fileset dir="${src.webapp.dir}/j2ee${j2ee.api}"/>
        </copy>

        <!-- Copy application jars -->
        <copy todir="${target.sample.lib.dir}" file="${jstl.jar}"/>
        <copy todir="${target.sample.lib.dir}" file="${standard.jar}"/>
        <copy todir="${target.sample.lib.dir}" file="${j2ee.jar}"/>
        <copy todir="${target.sample.lib.dir}" file="${aspectjrt.jar}"/>
        <copy todir="${target.sample.lib.dir}"
            file="${cactus.antintegration.jar}"/>
        <copy todir="${target.sample.lib.dir}" file="${cactus.framework.jar}"/>
        <copy todir="${target.sample.lib.dir}"
            file="${commons.httpclient.jar}"/>
        <copy todir="${target.sample.lib.dir}" file="${commons.logging.jar}"/>
        <copy todir="${target.sample.lib.dir}" file="${httpunit.jar}"/>
        <copy todir="${target.sample.lib.dir}" file="${junit.jar}"/>
        <copy todir="${target.sample.lib.dir}" file="${nekohtml.jar}"/>
        
        <!-- Copy README file -->
        <copy todir="${target.sample.dir}" file="${base.dir}/README"/>

    </target>
    
    <target name="sample.clover" depends="sample.main" if="clover.enable">

        <copy todir="${target.sample.lib.dir}" file="${clover.jar}"/>

    </target>

    <target name="sample" depends="sample.clover"
        description="Generate the sample application">
    </target>

    <!--
       ========================================================================
         Run the full suite of tests on all defined containers.
       ========================================================================
    -->
    <target name="test.prepare">

        <condition property="test.cactus.framework.jar"
            value="${cactus.framework.clover.jar}">
            <isset property="clover.enable"/>
        </condition>
        <property name="test.cactus.framework.jar"
            value="${cactus.framework.jar}"/>
        <condition property="test.cactus.antintegration.jar"
            value="${cactus.antintegration.clover.jar}">
            <isset property="clover.enable"/>
        </condition>
        <property name="test.cactus.antintegration.jar"
            value="${cactus.antintegration.jar}"/>

        <mkdir dir="${target.test.dir}"/>

    </target>
    
    <target name="test.jboss3x" 
        depends="prepare.dist, test.prepare"
        if="cactus.home.jboss3x">

       <ant dir="${dist.bin.dir}/${project.name.file}" target="test"
           inheritAll="false">
         <property name="cactus.home.jboss3x" value="${cactus.home.jboss3x}"/>
         <property name="target.dir" location="${target.test.dir}"/>
         <property name="cactus.framework.jar"
             location="${test.cactus.framework.jar}"/>
         <property name="cactus.ant.jar"
             location="${test.cactus.antintegration.jar}"/>
         <property name="clover.jar" value="${clover.jar}"/>
       </ant>

    </target>

    <target name="test.orion1x"
        depends="prepare.dist, test.prepare"
        if="cactus.home.orion1x">

       <ant dir="${dist.bin.dir}/${project.name.file}" target="test"
           inheritAll="false">
         <property name="cactus.home.orion1x" value="${cactus.home.orion1x}"/>
         <property name="target.dir" location="${target.test.dir}"/>
         <property name="cactus.framework.jar"
             location="${test.cactus.framework.jar}"/>
         <property name="cactus.ant.jar"
             location="${test.cactus.antintegration.jar}"/>
         <property name="clover.jar" value="${clover.jar}"/>
       </ant>

    </target>

    <target name="test.orion2x"
        depends="prepare.dist, test.prepare"
        if="cactus.home.orion2x">

       <ant dir="${dist.bin.dir}/${project.name.file}" target="test"
           inheritAll="false">
         <property name="cactus.home.orion2x" value="${cactus.home.orion2x}"/>
         <property name="target.dir" location="${target.test.dir}"/>
         <property name="cactus.framework.jar"
             location="${test.cactus.framework.jar}"/>
         <property name="cactus.ant.jar"
             location="${test.cactus.antintegration.jar}"/>
         <property name="clover.jar" value="${clover.jar}"/>
       </ant>

    </target>

    <target name="test.resin2x" 
        depends="prepare.dist, test.prepare"
        if="cactus.home.resin2x">

       <ant dir="${dist.bin.dir}/${project.name.file}" target="test"
           inheritAll="false">
         <property name="cactus.home.resin2x" value="${cactus.home.resin2x}"/>
         <property name="target.dir" location="${target.test.dir}"/>
         <property name="cactus.framework.jar"
             location="${test.cactus.framework.jar}"/>
         <property name="cactus.ant.jar"
             location="${test.cactus.antintegration.jar}"/>
         <property name="clover.jar" value="${clover.jar}"/>
       </ant>

    </target>

    <target name="test.tomcat3x" 
        depends="prepare.dist, test.prepare"
        if="cactus.home.tomcat3x">

       <ant dir="${dist.bin.dir}/${project.name.file}" target="test"
           inheritAll="false">
         <property name="cactus.home.tomcat3x" value="${cactus.home.tomcat3x}"/>
         <property name="target.dir" location="${target.test.dir}"/>
         <property name="cactus.framework.jar"
             location="${test.cactus.framework.jar}"/>
         <property name="cactus.ant.jar"
             location="${test.cactus.antintegration.jar}"/>
         <property name="clover.jar" value="${clover.jar}"/>
       </ant>

    </target>

    <target name="test.tomcat4x" 
        depends="prepare.dist, test.prepare"
        if="cactus.home.tomcat4x">

       <ant dir="${dist.bin.dir}/${project.name.file}" target="test"
           inheritAll="false">
         <property name="cactus.home.tomcat4x" value="${cactus.home.tomcat4x}"/>
         <property name="target.dir" location="${target.test.dir}"/>
         <property name="cactus.framework.jar"
             location="${test.cactus.framework.jar}"/>
         <property name="cactus.ant.jar"
             location="${test.cactus.antintegration.jar}"/>
         <property name="clover.jar" value="${clover.jar}"/>
       </ant>

    </target>

    <target name="test.tomcat5x" 
        depends="prepare.dist, test.prepare"
        if="cactus.home.tomcat5x">

       <ant dir="${dist.bin.dir}/${project.name.file}" target="test"
           inheritAll="false">
         <property name="cactus.home.tomcat5x" value="${cactus.home.tomcat5x}"/>
         <property name="target.dir" location="${target.test.dir}"/>
         <property name="cactus.framework.jar"
             location="${test.cactus.framework.jar}"/>
         <property name="cactus.ant.jar"
             location="${test.cactus.antintegration.jar}"/>
         <property name="clover.jar" value="${clover.jar}"/>
       </ant>

    </target>

    <target name="test" 
        description="Run the tests on all defined servers"
        depends="test.jboss3x, test.orion1x, test.orion2x, test.resin2x,
                 test.tomcat3x, test.tomcat4x, test.tomcat5x">

    </target>

    <!--
       ========================================================================
         Generate the distributable files
       ========================================================================
    -->
    <!-- This target is there simply so that we can zip the sample application
         before it is run, as this will generate temporary files that we do
         not want in the zip -->
    <target name="prepare.dist" depends="sample">

        <mkdir dir="${dist.bin.dir}"/>

        <copy todir="${dist.bin.dir}/${project.name.file}">
            <fileset dir="${target.sample.dir}"/>
        </copy>

    </target>

    <target name="dist" depends="checkstyle, prepare.dist, test"
        description="Generate the distributable files">
    </target>

    <!--
       ========================================================================
         Perform a code audit using CheckStyle. Only performs the audit if
         the checkstyle jar is in the Ant classpasth.
       ========================================================================
    -->
    <target name="checkstyle" depends="init,init.checkstyle" 
        if="checkstyle.available"
        description="Perform a code audit using Checkstyle">

        <mkdir dir="${target.dir}"/>

        <checkstyle config="./checkstyle.xml" failOnViolation="true">

            <fileset dir="${src.java.dir}">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="${src.cactus.dir}">
                <include name="**/*.java"/>
            </fileset>

            <formatter type="plain"/>
            <formatter type="xml"
                toFile="${target.dir}/checkstyle_results.xml"/>

            <property key="checkstyle.header.file" file="./LICENSE.cactus"/>

        </checkstyle>

    </target>

    <!--
       ========================================================================
         Generate the release
       ========================================================================
    -->
    <target name="release.common" depends="dist">

        <mkdir dir="${release.dir}"/>

        <zip destfile="${release.dir}/${main.release.name}.zip">
            <zipfileset dir="${dist.bin.dir}/${project.name.file}" 
                prefix="${main.release.name}"/>
        </zip>
        
    </target>

    <target name="release" depends="clean,release.common"
        description="Generate the release files">

        <mkdir dir="${release.dir}"/>

        <zip destfile="${release.dir}/${main.release.name}.zip">
            <zipfileset dir="${dist.bin.dir}/${project.name.file}" 
                prefix="${main.release.name}"/>
        </zip>
        
    </target>

    <!-- Generate the release (for Gump). Does not clean the directories
         because some class paths that are created by the build need to be
         added to the Ant classpath before the build starts (because of the
         use of build.sysclasspath=only by Gump -->
    <target name="release.gump" depends="release.common">
    </target>

</project>
