<?xml version="1.0"?>
<!DOCTYPE project [
  <!ENTITY common SYSTEM "file:../../build-common.xml">
]>

<!--
  =============================================================================
    Build file for the Cactus Servlet Sample subproject.

    $Id$
  =============================================================================
-->
<project name="Cactus Servlet Sample" default="dist" basedir="../..">

  <description>
 Cactus Servlet Sample
 ---------------------------------------------------------
 Sample web-application that demonstrates how Cactus can
 be used using the Ant integration for unit testing classes 
 that use the servlet API (such as servlets, filters and 
 tag libraries).
  </description>

  <!-- Base directory for all file related operations -->
  <property name="base.dir" location="${basedir}/samples/servlet"/>

  <!-- Indicate that this subproject is dependant on the version of the J2EE
       API available -->
  <property name="j2ee.dependant" value="true"/>

  <!-- Include properties and targets common to the different subprojects -->
  &common;

  <!-- Global project properties -->
  <property name="project.name.text" value="Cactus Servlet Sample"/>
  <property name="project.name.file" value="cactus-sample-servlet"/>

  <!--
     ========================================================================
       Initialize source, target and dist properties
     ========================================================================
  -->
  <target name="properties">

    <!-- Set the properties related to the source tree -->
    <property name="src.dir" location="${base.dir}/src"/>
    <property name="src.java.dir" location="${src.dir}/java"/>
    <property name="src.conf.dir" location="${src.dir}/conf"/>
    <property name="src.cactus.dir" location="${src.dir}/test-cactus"/>
    <property name="src.script.dir" location="${src.dir}/scripts"/>
    <property name="src.webapp.dir" location="${src.dir}/webapp"/>

    <!-- Set the properties related to the target area -->
    <property name="target.sample.dir" location="${target.dir}/sample"/>
    <property name="target.sample.src.dir"
        location="${target.sample.dir}/src"/>
    <property name="target.sample.src.java.dir"
        location="${target.sample.src.dir}/java"/>
    <property name="target.sample.src.conf.dir"
        location="${target.sample.src.dir}/conf"/>
    <property name="target.sample.src.cactus.dir"
        location="${target.sample.src.dir}/test-cactus"/>
    <property name="target.sample.src.webapp.dir" 
        location="${target.sample.src.dir}/webapp"/>
    <property name="target.sample.lib.dir" 
        location="${target.sample.dir}/lib"/>
    <property name="target.test.dir" 
        location="${target.dir}/test"/>

  </target>

  <!--
     ========================================================================
       Initialize filters used in copy operations
     ========================================================================
  -->
  <target name="init.filters.clover"
      depends="init.common"
      if="clover.enable">

    <filterset id="clover.enablement">
      <filter token="clover.begin" value=""/>
      <filter token="clover.end" value=""/>
    </filterset>

  </target>

  <target name="init.filters.noclover"
      depends="init.common"
      unless="clover.enable">

    <filterset id="clover.enablement">
      <filter token="clover.begin" value="!-- "/>
      <filter token="clover.end" value=" --"/>
    </filterset>

  </target>

  <target name="init.filters.12" depends="init.common"
      unless="j2ee13.available">

    <filterset id="container.enablement">
      <filter token="j2ee12.begin" value=""/>
      <filter token="j2ee12.end" value=""/>
      <filter token="j2ee13.begin" value="!-- "/>
      <filter token="j2ee13.end" value=" --"/>
    </filterset>

  </target>

  <target name="init.filters.13" depends="init.common"
      if="j2ee13.available">

    <filterset id="container.enablement">
      <filter token="j2ee12.begin" value="!-- "/>
      <filter token="j2ee12.end" value=" --"/>
      <filter token="j2ee13.begin" value=""/>
      <filter token="j2ee13.end" value=""/>
    </filterset>

  </target>

  <target name="init.filters"
      depends="init.filters.clover, init.filters.noclover,
               init.filters.12, init.filters.13">

    <!-- Copy scripts -->
    <basename property="jstl.jar.name" file="${jstl.jar}"/>
    <basename property="standard.jar.name" file="${standard.jar}"/>
    <basename property="servlet.jar.name" file="${j2ee.jar}"/>
    <basename property="aspectjrt.jar.name" file="${aspectjrt.jar}"/>
    <basename property="commons.httpclient.jar.name"
        file="${commons.httpclient.jar}"/>
    <basename property="commons.logging.jar.name"
        file="${commons.logging.jar}"/>
    <basename property="httpunit.jar.name" file="${httpunit.jar}"/>
    <basename property="junit.jar.name" file="${junit.jar}"/>
    <basename property="nekohtml.jar.name" file="${nekohtml.jar}"/>

    <filterset id="jar.names">
      <filter token="jstl.jar.name" value="${jstl.jar.name}"/>
      <filter token="standard.jar.name" value="${standard.jar.name}"/>
      <filter token="servlet.jar.name" value="${servlet.jar.name}"/>
      <filter token="aspectjrt.jar.name" value="${aspectjrt.jar.name}"/>
      <filter token="cactus.ant.jar.name" value="${cactus.ant.jar.name}.jar"/>
      <filter token="cactus.jar.name" value="${cactus.jar.name}.jar"/>
      <filter token="commons.httpclient.jar.name"
          value="${commons.httpclient.jar.name}"/>
      <filter token="commons.logging.jar.name"
          value="${commons.logging.jar.name}"/>
      <filter token="httpunit.jar.name" value="${httpunit.jar.name}"/>
      <filter token="junit.jar.name" value="${junit.jar.name}"/>
      <filter token="nekohtml.jar.name" value="${nekohtml.jar.name}"/>
    </filterset>

  </target>

  <!--
     ========================================================================
       Initialize the build. Must be called by all targets
     ========================================================================
  -->
  <target name="init" 
      depends="init.common, init.filters, properties">

    <echo>Dependencies:</echo>
    <echo>  aspectjrt.jar = [${aspectjrt.jar}]</echo>
    <echo>  cactus.jar = [${cactus.jar}]</echo>
    <echo>  cactus.ant.jar = [${cactus.ant.jar}]</echo>
    <echo>  commons.httpclient.jar = [${commons.httpclient.jar}]</echo>
    <echo>  commons.logging.jar = [${commons.logging.jar}]</echo>
    <echo>  httpunit.jar = [${httpunit.jar}]</echo>
    <echo>  j2ee.jar = [${j2ee.jar}]</echo>
    <echo>  junit.jar = [${junit.jar}]</echo>
    <echo>  log4j.jar = [${log4j.jar}]</echo>
    <echo>  nekohtml.jar = [${nekohtml.jar}]</echo>
    <echo>  jstl.jar (for J2EE 1.3 only) = [${jstl.jar}]</echo>
    <echo>  standard.jar (for J2EE 1.3 only) = [${standard.jar}]</echo>
    <echo>  xerces.jar (optional) = [${xerces.jar}]</echo>
    <echo>  xmlapis.jar (optional) = [${xmlapis.jar}]</echo>
    <echo/>
    <echo>Options:</echo>
    <echo>  clover.enable = ${clover.enable}</echo>
    <echo>  cactus.port = ${cactus.port}</echo>

    <condition property="properties.ok">
      <and>
        <available file="${aspectjrt.jar}"/>
        <available file="${cactus.jar}"/>
        <available file="${cactus.ant.jar}"/>
        <available file="${commons.httpclient.jar}"/>
        <available file="${commons.logging.jar}"/>
        <available file="${httpunit.jar}"/>
        <available file="${j2ee.jar}"/>
        <or>
          <not>
            <isset property="j2ee13.available"/>
          </not>
          <and>
            <available file="${jstl.jar}"/>
            <available file="${standard.jar}"/>
          </and>
        </or>
        <available file="${junit.jar}"/>
        <available file="${log4j.jar}"/>
        <available file="${nekohtml.jar}"/>
        <!-- Check for a JAXP class instead of the xmlapis.jar file so that
             the build works on JDK 1.4 without needing to define the
             xmlapis.jar property -->
        <available classname="javax.xml.parsers.DocumentBuilder"
            classpath="${xmlapis.jar}"/>
        <!-- Check for a Xerces class instead of the xerces.jar file so
             that the build also works on JDKs that bundle Xerces without
             needing to define the xerces.jar property -->
        <available classname="org.apache.xml.serialize.XMLSerializer"
            classpath="${xerces.jar}"/>
      </and>
    </condition>

    <fail unless="properties.ok">One or more required dependancies could not
be resolved. Please check you build.properties file, and run Ant with the 
-verbose option for more details</fail>

  </target>

  <!--
      ========================================================================
        Generate the sample application
      ========================================================================
   -->
  <target name="sample.main" depends="init">

    <!-- Create output directory structure and copy sample files in it -->
    <mkdir dir="${target.sample.dir}"/>
    <mkdir dir="${target.sample.src.java.dir}"/>
    <mkdir dir="${target.sample.src.conf.dir}"/>
    <mkdir dir="${target.sample.src.cactus.dir}"/>
    <mkdir dir="${target.sample.src.webapp.dir}"/>

    <!-- Copy src files -->
    <copy todir="${target.sample.src.java.dir}">
      <fileset dir="${src.java.dir}/share"/>
      <fileset dir="${src.java.dir}/j2ee${j2ee.api}"/>
    </copy>
    <copy todir="${target.sample.src.cactus.dir}">
      <fileset dir="${src.cactus.dir}/share"/>
      <fileset dir="${src.cactus.dir}/j2ee${j2ee.api}"/>
    </copy>
    <copy todir="${target.sample.src.conf.dir}">
      <fileset dir="${src.conf.dir}"/>
    </copy>

    <!-- Copy scripts -->
    <copy todir="${target.sample.dir}" filtering="on">
      <fileset dir="${src.script.dir}/share"/>
      <fileset dir="${src.script.dir}/j2ee${j2ee.api}"/>
      <filterset refid="clover.enablement"/>
      <filterset refid="container.enablement"/>
      <filterset refid="jar.names"/>
    </copy>

    <!-- Copy webapp files -->
    <copy todir="${target.sample.src.webapp.dir}">
      <fileset dir="${src.webapp.dir}/share"/>
      <fileset dir="${src.webapp.dir}/j2ee${j2ee.api}"/>
    </copy>

    <!-- Copy README file -->
    <copy todir="${target.sample.dir}" file="${base.dir}/README"/>

  </target>

  <target name="sample.clover" depends="sample.main" if="clover.enable">

    <copy todir="${target.sample.lib.dir}" file="${clover.jar}"/>

  </target>

  <target name="sample" depends="sample.clover"
      description="Generate the sample application"/>

  <!--
     ========================================================================
       Run the full suite of tests on all defined containers.
     ========================================================================
  -->
  <target name="test.prepare"
      depends="sample">

    <condition property="test.cactus.jar" value="${cactus.clover.jar}">
      <isset property="clover.enable"/>
    </condition>
    <property name="test.cactus.jar" value="${cactus.jar}"/>
    <condition property="test.cactus.ant.jar"
        value="${cactus.ant.clover.jar}">
      <isset property="clover.enable"/>
    </condition>
    <property name="test.cactus.ant.jar" value="${cactus.ant.jar}"/>

    <mkdir dir="${target.test.dir}"/>

  </target>
  
  <target name="test" 
      depends="test.prepare"
      description="Run the tests on all defined servers">

    <ant dir="${target.sample.dir}" target="test">
      <property name="src.dir" location="${target.sample.src.dir}"/>
      <property name="src.java.dir"
          location="${target.sample.src.java.dir}"/>
      <property name="src.conf.dir"
          location="${target.sample.src.conf.dir}"/>
      <property name="src.cactus.dir"
          location="${target.sample.src.cactus.dir}"/>
      <property name="src.webapp.dir"
          location="${target.sample.src.webapp.dir}"/>
      <property name="target.dir" location="${target.test.dir}"/>
      <property name="target.classes.dir"
          location="${target.test.dir}/classes"/>
      <property name="target.classes.java.dir"
          location="${target.test.dir}/classes/java"/>
      <property name="target.classes.cactus.dir"
          location="${target.test.dir}/classes/cactus"/>
      <property name="target.testreports.dir"
          location="${target.test.dir}/test-reports"/>
      <property name="cactus.jar" location="${test.cactus.jar}"/>
      <property name="cactus.ant.jar" location="${test.cactus.ant.jar}"/>
      <property name="servlet.jar" value="${j2ee.jar}"/>
      <property name="clover.jar" value="${clover.jar}"/>
    </ant>

  </target>

  <!--
     ========================================================================
       Generate the distributable files
     ========================================================================
  -->
  <target name="dist" depends="checkstyle, test"
      description="Generate the distributable files">

    <mkdir dir="${dist.bin.dir}"/>
    <copy todir="${dist.bin.dir}">
      <fileset dir="${target.sample.dir}"/>
    </copy>

  </target>

  <!--
     ========================================================================
       Perform a code audit using CheckStyle. Only performs the audit if
       the checkstyle jar is in the Ant classpasth.
     ========================================================================
  -->
  <target name="checkstyle" depends="init,init.checkstyle" 
      if="checkstyle.available"
      description="Perform a code audit using Checkstyle">

    <mkdir dir="${target.dir}"/>
    <checkstyle config="./checkstyle.xml" failOnViolation="true">
      <fileset dir="${src.java.dir}">
        <include name="**/*.java"/>
      </fileset>
      <fileset dir="${src.cactus.dir}">
        <include name="**/*.java"/>
      </fileset>
      <formatter type="plain"/>
      <formatter type="xml" tofile="${target.dir}/checkstyle_results.xml"/>
      <property key="checkstyle.header.file" file="./LICENSE.cactus"/>
    </checkstyle>

  </target>

  <!--
     ========================================================================
       Clean generated files (including distributables)
     ========================================================================
  -->
  <target name="clean" depends="init.display,init.properties"
    description="Clean all generated files">

    <delete dir="${target.dir}"/>
    <delete dir="${dist.dir}"/>

  </target>

</project>
