
    <!-- Give user a chance to override without editing this file
         (and without typing -D each time it compiles it) -->
    <property file="build/build.properties" />
    <property file="${user.home}/build.properties" />

    <!-- Global project properties -->
    <property name="project.name.text" value="Cactus Servlet Sample"/>
    <property name="project.name.file" value="sample-servlet"/>
    <property name="project.version" value="@version@"/>

    <!-- Prefix to add to all distributable files -->
    <property name="project.prefix" value="jakarta-"/>

    <!-- Generic properties -->
    <property name="year" value="@year@"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="off"/>
    <property name="deprecation" value="off"/>

    <!--
       ========================================================================
         Base directory for all file related operations
       ========================================================================
    -->
    <property name="base.dir" value="."/>

    <!--
       ========================================================================
         Set the properties related to the source tree.
       ========================================================================
    -->
    <property name="src.dir" value="${base.dir}/src"/>
    <property name="src.sample.dir" value="${src.dir}/sample"/>
    <property name="src.unit.dir" value="${src.dir}/unit"/>
    <property name="build.dir" value="${base.dir}/build"/>
    <property name="conf.dir" value="${base.dir}/conf"/>
    <property name="conf.test.dir" value="${conf.dir}/test"/>
    <property name="web.dir" value="${base.dir}/web"/>

    <!--
       ========================================================================
         Set the properties related to the target area
       ========================================================================
    -->
    <!-- Destination locations for the build -->
    <property name="target.dir" value="${base.dir}/target"/>
    <property name="target.classes.dir" value="${target.dir}/classes"/>
    <property name="target.classes.sample.dir"
        value="${target.classes.dir}/sample"/>
    <property name="target.classes.unit.dir"
        value="${target.classes.dir}/unit"/>
    <property name="target.conf.dir" value="${target.dir}/conf"/>
    <property name="target.conf.client.dir" value="${target.conf.dir}/client"/>
    <property name="target.conf.server.dir" value="${target.conf.dir}/server"/>
    <property name="target.doc.dir" value="${target.dir}/doc"/>
    <property name="target.doc.api.dir" value="${target.doc.dir}/api"/>
    <property name="target.test.dir" value="${target.dir}/test"/>
    <property name="target.lib.dir" value="${target.dir}/lib"/>

    <!-- Distribution directory, i.e. where the expanded distibutable files
         are located -->
    <property name="dist.dir" value="${base.dir}/dist"/>
    <property name="dist.bin.dir" value="${dist.dir}/bin"/>
    <property name="dist.doc.dir" value="${dist.dir}/doc"/>
    <property name="dist.doc.api.dir" value="${dist.doc.dir}/api"/>

    <!--
       ========================================================================
         Default values that can be overidden
       ========================================================================
    -->
    <!-- The port that will be used to start the servers -->
    <property name="test.port" value="8080"/>

    <!--
       ========================================================================
        Names of deliverables
       ========================================================================
    -->
    <!-- The Sample war -->
    <property name="sample.war.name" value="${project.name.file}"/>

    <!--
       ========================================================================
         Useful patterns for targets
       ========================================================================
    -->
    <path id="project.class.path">

        <pathelement location="${cactus.framework.jar}"/>
        <pathelement location="${cactus.ant.jar}"/>
        <pathelement location="${servlet.jar}"/>
        <pathelement location="${log4j.jar}"/>
        <pathelement location="${commons.logging.jar}"/>
        <pathelement location="${commons.httpclient.jar}"/>
        <pathelement location="${httpunit.jar}"/>
        <pathelement location="${junit.jar}"/>
        <pathelement location="${aspectjrt.jar}"/>

        <!-- Includes system classpath for jars that are in ANT_HOME/lib such
             as aspectrt.jar, etc -->
        <pathelement path="${java.class.path}"/>
    </path>

    <!--
       ========================================================================
         Display configurable properties values
       ========================================================================
    -->
    <target name="display.properties">

        <echo message="----- ${project.name.text} ${project.version} -----"/>
        <echo message=""/>
        <echo message="java.class.path = ${java.class.path}"/>
        <echo message=""/>
        <echo message="java.home = ${java.home}"/>
        <echo message="user.home = ${user.home}"/>
        <echo message="ant.home = ${ant.home}"/>
        <echo message=""/>
        <echo message="cactus.framework.jar = ${cactus.framework.jar}"/>
        <echo message="cactus.ant.jar = ${cactus.ant.jar}"/>
        <echo message="servlet.jar = ${servlet.jar}"/>
        <echo message="aspectjrt.jar = ${aspectjrt.jar}"/>
        <echo message="commons.logging.jar = ${commons.logging.jar}"/>
        <echo message="commons.httpclient.jar = ${commons.httpclient.jar}"/>
        <echo message="httpunit.jar = ${httpunit.jar}"/>
        <echo message="junit.jar = ${junit.jar}"/>
        <echo message=""/>
        <echo message="log4j.jar (optional) = ${log4j.jar}"/>
        <echo message="clover.jar (optional) = ${clover.jar}"/>
        <echo message=""/>
        <echo message="test.port = ${test.port}"/>
        <echo message=""/>

    </target>

    <!--
       ========================================================================
         Verify that all mandatory properties have been set
       ========================================================================
    -->
    <target name="check.properties"
        depends="display.properties,check.properties.test,check.properties.warn"/>

    <target name="check.properties.test">

        <condition property="properties.ok">
            <and>
                <available file="${cactus.framework.jar}"/>
                <available file="${cactus.ant.jar}"/>
                <available file="${servlet.jar}"/>
                <available file="${aspectjrt.jar}"/>
                <available file="${commons.logging.jar}"/>
                <available file="${commons.httpclient.jar}"/>
                <available file="${httpunit.jar}"/>
                <available file="${junit.jar}"/>
           </and>
        </condition>

    </target>

    <target name="check.properties.warn" unless="properties.ok">

        <fail message="Missing property or property pointing to an invalid file (check your build.properties file)"/>

    </target>
    <!--
       ========================================================================
         Initialize the build. Must be called by all targets
       ========================================================================
    -->
    <target name="init" depends="check.properties">

        <tstamp/>

        <!-- Filters -->
        <filter token="version" value="${project.version}"/>
        <filter token="project.name.text" value="${project.name.text}"/>
        <filter token="project.name.file" value="${project.name.file}"/>
        <filter token="year" value="${year}"/>
        <filter token="test.port" value="${test.port}"/>

        <!-- Initialize Cactus custom Ant task needed for running the server
             tests -->
        <taskdef name="runservertests"
            classname="org.apache.cactus.ant.RunServerTestsTask">
            <classpath>
                <pathelement location="${cactus.ant.jar}"/>
            </classpath>
        </taskdef>

    </target>

    <!--
       ========================================================================
         Compiles the sources
       ========================================================================
    -->
    <!-- Compiles the sample sources -->
    <target name="compile.sample" depends="init">

        <mkdir dir="${target.classes.sample.dir}"/>

        <javac destdir="${target.classes.sample.dir}"
          deprecation="${deprecation}" optimize="${optimize}">

            <src path="${src.sample.dir}"/>

            <classpath>
                <path refid="project.class.path"/>
            </classpath>

        </javac>

    </target>

    <!-- Compiles the unit sources -->
    <target name="compile.unit" depends="init">

        <mkdir dir="${target.classes.unit.dir}"/>

        <javac destdir="${target.classes.unit.dir}"
          deprecation="${deprecation}" optimize="${optimize}">

            <src path="${src.unit.dir}"/>

            <classpath>
                <path refid="project.class.path"/>
            </classpath>

        </javac>

    </target>

    <target name="compile" depends="compile.sample,compile.unit"
        description="Compile the sources">
    </target>

    <!--
       ========================================================================
         Create the runtime war file
       ========================================================================
    -->
    <target name="war" depends="compile" description="Generate the runtime war">

        <mkdir dir="${target.conf.client.dir}"/>

        <!-- Copy the manifest in order to replace the version token filter -->
        <copy todir="${target.conf.client.dir}" filtering="on">
            <fileset dir="${conf.dir}" >
                <include name="manifest"/>
            </fileset>
        </copy>

        <war warfile="${target.dir}/${sample.war.name}.war"
             webxml="${conf.dir}/web.xml"
             manifest="${target.conf.client.dir}/manifest">

            <classes dir="${target.classes.sample.dir}">
                <!-- Do not include test files in the runtime war -->
                <exclude name="**/Test*.*"/>
            </classes>
            <classes dir="${target.classes.unit.dir}">
                <!-- Do not include test files in the runtime war -->
                <exclude name="**/Test*.*"/>
            </classes>
        </war>

    </target>

    <!--
       ========================================================================
         Generate the documentation (javadoc)
       ========================================================================
    -->
    <target name="doc" depends="init" description="Generate the documentation">

        <mkdir dir="${target.doc.api.dir}"/>

        <javadoc
            packagenames="org.apache.cactus.sample.*,org.apache.cactus.unit.*"
            destdir="${target.doc.api.dir}"
            author="true"
            public="true"
            version="true"
            use="true"
            windowtitle="${project.name.text} ${project.version}"
            doctitle="${project.name.text} ${project.version}"
            bottom="Copyright &amp;copy; ${year} Apache Software Foundation. All Rights Reserved.">

            <sourcepath>
                <pathelement location="${src.sample.dir}"/>
                <pathelement location="${src.unit.dir}"/>
            </sourcepath>

            <classpath refid="project.class.path"/>

        </javadoc>

    </target>

    <!--
       ========================================================================
         Generate the distributable files
       ========================================================================
    -->
    <target name="dist" depends="clean,war,doc"
        description="Generate the distributable files">

        <mkdir dir="${dist.bin.dir}"/>
        <mkdir dir="${dist.doc.api.dir}"/>

        <copy todir="${dist.bin.dir}"
            file="${target.dir}/${sample.war.name}.war"/>
        <copy todir="${dist.doc.api.dir}">
            <fileset dir="${target.doc.api.dir}"/>
        </copy>

    </target>

    <!--
       ========================================================================
         Clean generated files (including distributables)
       ========================================================================
    -->
    <target name="clean" depends="init" description="Clean all generated files">

        <delete dir="${target.dir}"/>
        <delete dir="${dist.dir}"/>

    </target>

    <!--
       ========================================================================
         Run the client JUnit test cases. This target should not be called
         directly. It must be called by a test.XXX target (where XXX is the
         name of the server - see included xml files for different servers)
       ========================================================================
    -->
    <target name="prepare.test" depends="init">

        <!-- Copy cactus.properties to replace the token filters -->
        <copy todir="${target.conf.client.dir}"
            file="${conf.test.dir}/cactus.properties" filtering="on"/>
        <!-- Copy log_client.properties so that it is in the classpath -->
        <copy tofile="${target.conf.client.dir}/log4j.properties"
            file="${conf.test.dir}/log_client.properties"/>

    </target>

    <target name="test">

        <junit printsummary="yes" haltonfailure="yes" haltonerror="yes"
            fork="yes">

            <classpath>
                <!-- Cactus.propertie and log_client.properties need to be in
                     the classpath -->
                <pathelement location="${target.conf.client.dir}"/>
                <pathelement location="${target.classes.sample.dir}"/>
                <pathelement location="${target.classes.unit.dir}"/>
                <path refid="project.class.path"/>
            </classpath>

            <formatter type="plain" usefile="false"/>

            <!-- Note: The unit tests must be run first. See
                 org.apache.cactus.unit.TestAll for details -->
            <test name="org.apache.cactus.unit.TestAll"/>
            <test name="org.apache.cactus.sample.TestAll"/>

        </junit>

    </target>

    <!--
       ========================================================================
         Create a Cactus test war file for the sample application.
       ========================================================================
    -->
    <target name="prepare.testwar.log4j" if="log4j.jar">

        <!-- We only copy the Log4j jar if the log4j.jar property has been
             defined. This is because it is optional and not having log4j in
             the classpath will simply mean no log generated but will still
             work fine -->
        <copy tofile="${target.lib.dir}/log4j.jar" file="${log4j.jar}"/>

    </target>

    <target name="prepare.testwar.clover" if="clover.jar">

        <copy tofile="${target.lib.dir}/clover.jar" file="${clover.jar}"/>

    </target>

    <target name="testwar"
        depends="compile,prepare.testwar.log4j,prepare.testwar.clover,prepare.test">

        <!-- Gather libraries in a place where they can be copied in the
             war. Note: We don't copy the version information in the jar as
             it has some "." in the name (ex: clover-0.6b.jar) and WebLogic
             7.0 has a bug and ignore jars with dots in the name! Will be fixed
             in a upcoming patch as it has been fixed in WL 6.1 SP3 -->
        <copy tofile="${target.lib.dir}/junit.jar" file="${junit.jar}"/>
        <copy tofile="${target.lib.dir}/cactus.jar" file="${cactus.framework.jar}"/>
        <copy tofile="${target.lib.dir}/aspectjrt.jar" file="${aspectjrt.jar}"/>
        <copy tofile="${target.lib.dir}/commons-logging.jar" file="${commons.logging.jar}"/>

        <!-- Copy the log4j server configuration file in order to change its
             name to log4j.properties (the default name for Log4j) -->
        <copy tofile="${target.conf.server.dir}/log4j.properties"
            file="${conf.test.dir}/log_server.properties"/>

        <!-- Make sure the directory for the war exist -->
        <mkdir dir="${target.test.dir}"/>

        <!-- Create the war file -->
        <war warfile="${target.test.dir}/test.war"
             webxml="${conf.test.dir}/web.xml">

            <classes dir="${target.classes.sample.dir}"/>
            <classes dir="${target.classes.unit.dir}"/>

            <!-- log_server.properties need to be in the server classpath -->
            <classes dir="${target.conf.server.dir}">
                <include name="log4j.properties"/>
            </classes>

            <!-- We need to copy all dependent jar in the war. This is
                 because if we just put these jars in the global classpath for
                 the Servlet engine, the Cactus jar might not be able to load
                 the test case class as it may be loadable only by the war
                 classloader -->
            <lib dir="${target.lib.dir}"/>

            <fileset dir="${web.dir}"/>

       </war>

    </target>
