<?xml version="1.0"?>

<!--
  =============================================================================
    Build file for the Cactus Servlet Sample subproject (it shows how to use
    Cactus for unit testing the Servlet API : Servlets, Fitlers, Taglibs).

    The following Ant tasks need to be available in your ant installation (i.e.
    the Ant task themselves and their dependent jars need to be put in
    ANT_HOME/lib) :

        clover       [OPTIONAL] Clover jar (only for test coverage)

    The mandatory and optional Ant properties are defined in
    build.properties.sample. Please read and edit that file.

    This script should be started with the following command line :

        ant <target>

    Run "ant -projecthelp" to get a list of available targets. The default
    target is "dist"

    Note: basedir points to the main Cactus directory in order to have the same
          base dir for all Cactus subprojects and thus be able to share
          relative paths.
  =============================================================================
-->
<project name="Cactus Servlet Sample" default="dist" basedir="..">

    <!-- Give user a chance to override without editing this file
         (and without typing -D each time it compiles it) -->
    <property file="sample-servlet/build.properties" />
    <property file="${user.home}/build.properties" />

    <!-- Global project properties -->
    <property name="project.name.text" value="Cactus Servlet Sample"/>
    <property name="project.name.file" value="sample-servlet"/>
    <property name="project.version" value="1.5dev"/>

    <!-- Prefix to add to all distributable files -->
    <property name="project.prefix" value="jakarta-"/>

    <!--
       ========================================================================
         Default values for properties not defined in build.properties or in
         a higher level calling Ant script
       ========================================================================
    -->
    <property name="year" value="2000-2002"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="off"/>
    <property name="deprecation" value="off"/>

    <!--
       ========================================================================
         Base directory for all file related operations
       ========================================================================
    -->
    <property name="base.dir" value="sample-servlet"/>

    <!--
       ========================================================================
         Set the properties related to the source tree.
         Note: These properties are defined in a target as some need the
               j2ee.api property to be set
       ========================================================================
    -->
    <target name="properties.source">

        <!-- Source locations for the build -->
        <property name="src.dir" value="${base.dir}/src"/>
        <property name="src.sample.dir" value="${src.dir}/sample"/>
        <property name="src.unit.dir" value="${src.dir}/unit"/>
        <property name="conf.dir" value="${base.dir}/conf"/>
        <property name="conf.sample.dir" value="${conf.dir}/sample"/>
        <property name="conf.sample.build.dir" value="${conf.sample.dir}/build"/>
        <property name="conf.sample.conf.dir" value="${conf.sample.dir}/conf"/>
        <property name="web.dir" value="${base.dir}/web"/>
        <property name="web.sample.dir" value="${web.dir}/sample"/>

        <!-- The location of the Cactus framework jar -->
        <property name="cactus.framework.jar"
            value="framework/dist-${j2ee.api}/lib/cactus.jar"/>
        <echo message="cactus.framework.jar = ${cactus.framework.jar}"/>

        <!-- The location of the web files generated by the Cactus framework
             (i.e. the JSP Redirector) -->
        <property name="cactus.framework.web"
            value="framework/dist-${j2ee.api}/web"/>
        <echo message="cactus.framework.web = ${cactus.framework.web}"/>

        <!-- Location of the Clover(ed) Cactus framework -->
        <property name="cactus.framework.clover.jar"
            value="framework/dist-${j2ee.api}/lib/cactus-clover.jar"/>
        <echo message="cactus.framework.clover.jar = ${cactus.framework.clover.jar}"/>

    </target>

    <!-- The location of the Cactus custom Ant tasks jar -->
    <property name="cactus.ant.jar" value="anttasks/dist/lib/cactus-ant.jar"/>

    <!--
       ========================================================================
         Set the properties related to the target tree
         Note: These properties are defined in a target as some need the
               j2ee.api property to be set
       ========================================================================
    -->
    <target name="properties.target">

        <property name="target.dir" value="${base.dir}/target-${j2ee.api}"/>

        <!-- Destination locations for the sample application -->
        <property name="target.sample.dir" value="${target.dir}/sample"/>
        <property name="target.sample.build.dir" value="${target.sample.dir}/build"/>
        <property name="target.sample.conf.dir" value="${target.sample.dir}/conf"/>
        <property name="target.sample.src.dir" value="${target.sample.dir}/src"/>
        <property name="target.sample.src.sample.dir"
            value="${target.sample.src.dir}/sample"/>
        <property name="target.sample.src.unit.dir"
            value="${target.sample.src.dir}/unit"/>
        <property name="target.sample.web.dir" value="${target.sample.dir}/web"/>

    </target>

    <!--
       ========================================================================
         Set the properties related to the distribution tree
         Note: These properties are defined in a target as some need the
               j2ee.api property to be set
       ========================================================================
    -->
    <target name="properties.distribution">

        <property name="dist.dir" value="${base.dir}/dist-${j2ee.api}"/>
        <property name="dist.bin.dir" value="${dist.dir}/bin"/>

    </target>

    <!--
       ========================================================================
        Names of deliverables
       ========================================================================
    -->
    <!-- The packaged Sample application -->
    <property name="sample.zip.name" value="${project.name.file}"/>

    <!--
       ========================================================================
         Useful patterns for targets
       ========================================================================
    -->
    <path id="project.class.path">

        <pathelement location="${j2ee.jar}"/>

        <!-- Includes system classpath for jars that are in ANT_HOME/lib such
             as aspectrt.jar, etc -->
        <pathelement path="${java.class.path}"/>
    </path>

    <!--
       ========================================================================
         Display configurable properties values
       ========================================================================
    -->
    <target name="display.properties">

        <echo message="----- ${project.name.text} ${project.version} -----"/>
        <echo message=""/>
        <echo message="java.class.path = ${java.class.path}"/>
        <echo message=""/>
        <echo message="java.home = ${java.home}"/>
        <echo message="user.home = ${user.home}"/>
        <echo message="ant.home = ${ant.home}"/>
        <echo message=""/>
        <echo message="log4j.jar (optional) = ${log4j.jar}"/>
        <echo message="clover.enable (optional) = ${clover.enable}"/>
        <echo message="clover.jar (optional) = ${clover.jar}"/>
        <echo message="test.port (optional) = ${test.port}"/>

    </target>

    <!--
       ========================================================================
         Verify that all mandatory properties have been set
       ========================================================================
    -->
    <target name="check.properties">

        <taskdef name="checkProperty" classname="org.apache.cactus.ant.CheckPropertiesTask">
            <classpath>
                <pathelement location="${cactus.ant.jar}"/>
            </classpath>
        </taskdef>

        <checkProperty>
            <property name="j2ee.jar" isfile="true"/>
            <property name="aspectjrt.jar" isfile="true"/>
            <property name="commons.logging.jar" isfile="true"/>
            <property name="commons.httpclient.jar" isfile="true"/>
            <property name="junit.jar" isfile="true"/>
            <property name="httpunit.jar" isfile="true"/>
            <property name="jstl.jar" isfile="true"/>
            <property name="standard.jar" isFile="true"/>
        </checkProperty>

    </target>

    <!--
       ========================================================================
         Find out the J2EE API version
       ========================================================================
    -->
    <target name="check.j2ee.version">

        <condition property="j2ee.api" value="13">
            <available classname="javax.servlet.Filter"
                classpathref="project.class.path"/>
        </condition>

        <condition property="j2ee.api" value="12">
            <available classname="javax.servlet.Servlet"
                classpathref="project.class.path"/>
        </condition>

        <fail message="Unsupported J2EE version" unless="j2ee.api"/>

        <echo message="j2ee.api = ${j2ee.api}"/>

    </target>

    <!--
       ========================================================================
         Load all dynamic properties
       ========================================================================
    -->
    <target name="load.properties"
        depends="check.j2ee.version,properties.source,properties.target,properties.distribution"/>

    <!--
       ========================================================================
         Initialize the build. Must be called by all targets
       ========================================================================
    -->
    <target name="init"
        depends="display.properties,check.properties,load.properties">

        <tstamp/>

        <filter token="version" value="${project.version}"/>
        <filter token="year" value="${year}"/>

        <!-- Custom Ant task definition used in the test targets below.
             It is used for computing the "-D" parameter list
             for home directories of defined servlet engines. If a given
             property is not defined, it won't be added to the list -->
        <taskdef name="argsList" classname="org.apache.cactus.ant.ArgListTask">
            <classpath>
                <pathelement location="${cactus.ant.jar}"/>
            </classpath>
        </taskdef>

    </target>

    <!--
        ========================================================================
          Generate the sample application
        ========================================================================
     -->
    <target name="sample" depends="init"
        description="Generate the sample application">

        <!-- Create output directory structure and copy sample files in it -->
        <mkdir dir="${target.sample.dir}"/>
        <mkdir dir="${target.sample.build.dir}"/>
        <mkdir dir="${target.sample.conf.dir}/test"/>
        <mkdir dir="${target.sample.src.sample.dir}"/>
        <mkdir dir="${target.sample.src.unit.dir}"/>
        <mkdir dir="${target.sample.web.dir}/test"/>

        <!-- Copy build files -->
        <copy todir="${target.sample.build.dir}" filtering="on">
            <fileset dir="${conf.sample.build.dir}/share"/>
            <fileset dir="${conf.sample.build.dir}/j2ee${j2ee.api}"/>
        </copy>

        <!-- Copy src files -->
        <copy todir="${target.sample.src.sample.dir}">
            <fileset dir="${src.sample.dir}/share"/>
            <fileset dir="${src.sample.dir}/j2ee${j2ee.api}"/>
        </copy>
        <copy todir="${target.sample.src.unit.dir}">
            <fileset dir="${src.unit.dir}/share"/>
            <fileset dir="${src.unit.dir}/j2ee${j2ee.api}"/>
        </copy>

        <!-- Copy conf files -->
        <copy todir="${target.sample.conf.dir}/test">
            <fileset dir="${conf.sample.conf.dir}/test/share"/>
            <fileset dir="${conf.sample.conf.dir}/test/j2ee${j2ee.api}"/>
        </copy>
        <copy todir="${target.sample.conf.dir}">
            <fileset dir="${conf.sample.conf.dir}">
                <include name="web.xml"/>
                <include name="manifest"/>
            </fileset>
        </copy>

        <!-- Copy web files -->
        <copy todir="${target.sample.web.dir}/test">
            <fileset dir="${web.sample.dir}/test"/>
        </copy>
        <!-- Copy the Jsp Redirector -->
        <copy todir="${target.sample.web.dir}">
            <fileset dir="${cactus.framework.web}"/>
        </copy>

        <!-- Copy README file -->
        <copy todir="${target.sample.dir}" file="${base.dir}/README"/>

    </target>

    <!--
       ========================================================================
         Run the full suite of tests on all defined containers.
       ========================================================================
    -->
    <target name="test.choose.jar.clover" if="clover.enable">
        <property name="cactus.framework.elected.jar"
            value="${cactus.framework.clover.jar}"/>
    </target>

    <target name="test.choose.jar.main" unless="clover.enable">
        <property name="cactus.framework.elected.jar"
            value="${cactus.framework.jar}"/>
    </target>

    <target name="test.choose.jar"
        depends="test.choose.jar.clover,test.choose.jar.main"/>

    <target name="test" depends="sample,test.choose.jar"
        description="Run the tests on all defined servers">

        <argsList property="test.args.list">

            <!-- Inherit the classpath behaviour from the main script for
                 Gump builds to work -->
            <property name="build.sysclasspath"/>

            <property name="resin.home.12"/>
            <property name="resin.home.13"/>
            <property name="resin.home.20"/>
            <property name="tomcat.home.32"/>
            <property name="tomcat.home.33"/>
            <property name="tomcat.home.40"/>
            <property name="orion.home.14"/>
            <property name="orion.home.15"/>
            <property name="orion.home.16"/>
            <property name="weblogic.home.51"/>
            <property name="weblogic.home.61"/>
            <property name="weblogic.home.70"/>
            <property name="enhydra.home.31"/>
            <property name="jboss.home.3x"/>
            <property name="test.port"/>
            <property name="log4j.jar"/>
            <property name="clover.jar"/>
        </argsList>

        <java classname="org.apache.tools.ant.Main" fork="yes"
            failonerror="yes">

            <!-- Pass all required properties -->
            <arg value="-Dservlet.jar=${j2ee.jar}"/>
            <arg value="-Dcactus.framework.jar=${cactus.framework.elected.jar}"/>
            <arg value="-Dcactus.ant.jar=${cactus.ant.jar}"/>
            <arg value="-Djunit.jar=${junit.jar}"/>
            <arg value="-Dcommons.logging.jar=${commons.logging.jar}"/>
            <arg value="-Dcommons.httpclient.jar=${commons.httpclient.jar}"/>
            <arg value="-Daspectjrt.jar=${aspectjrt.jar}"/>
            <arg value="-Dhttpunit.jar=${httpunit.jar}"/>
            <arg value="-Djstl.jar=${jstl.jar}"/>
            <arg value="-Dstandard.jar=${standard.jar}"/>

            <arg value="-Dbase.dir=${target.sample.dir}"/>
            <arg value="-Dbasedir=${basedir}"/>

            <!-- Pass all servlet engine properties -->
            <arg line="${test.args.list}"/>
            <arg line="-buildfile ${target.sample.build.dir}/build.xml"/>
            <arg value="test.all"/>

            <classpath>
                <pathelement path="${java.class.path}"/>
            </classpath>

        </java>

    </target>

    <!--
       ========================================================================
         Generate the distributable files
       ========================================================================
    -->
    <!-- This target is there simply so that we can zip the sample application
         before it is run, as this will generate temporary files that we do
         not want in the zip -->
    <target name="prepare.dist" depends="sample">

        <mkdir dir="${dist.bin.dir}"/>

        <zip zipfile="${dist.bin.dir}/${sample.zip.name}.zip">
            <fileset dir="${target.sample.dir}"/>
        </zip>

    </target>

    <target name="dist" depends="prepare.dist,test"
        description="Generate the distributable files">
    </target>

    <!--
        ========================================================================
          Clean generated files (including distributables)
          Note: We don't depend on "init" as the only mandatory property that
          we need is "j2ee.jar".
        ========================================================================
     -->
     <target name="clean" depends="load.properties"
         description="Clean all generated files">

         <delete dir="${target.dir}"/>
         <delete dir="${dist.dir}"/>

     </target>

    <!--
        ========================================================================
          Run the Clover swing report
        ========================================================================
     -->
    <target name="clover.result" depends="init" if="clover.enable">

        <!-- Clover will read this file to generate the report -->
        <property name="clover.initstring"
            value="${basedir}/target-${j2ee.api}/clover-coverage.db"/>
        <echo message="clover.initstring = ${clover.initstring}"/>

        <java classname="com.cortexeb.tools.clover.reporters.jfc.Viewer"
            fork="yes">

            <arg line="${clover.initstring}"/>
            <classpath>
                <pathelement path="${java.class.path}"/>
            </classpath>
        </java>

    </target>

    <!--
       ========================================================================
         Build all : builds the distribution for both J2EE API 1.2 and 1.3
       ========================================================================
    -->
    <target name="dist.all"
        description="Generate the distributable files (for all J2EE APIs)">

        <ant antfile="sample-servlet/build.xml" target="dist" inheritAll="false">
            <property name="j2ee.jar" value="${j2ee.12.jar}"/>
        </ant>

        <ant antfile="sample-servlet/build.xml" target="dist" inheritAll="false">
            <property name="j2ee.jar" value="${j2ee.13.jar}"/>
        </ant>

    </target>

    <!--
       ========================================================================
         Clean all, for all J2EE APIs
       ========================================================================
    -->
    <target name="clean.all"
        description="Clean all generated files (for all J2EE APIs)">

        <ant antfile="sample-servlet/build.xml" target="clean" inheritAll="false">
            <property name="j2ee.jar" value="${j2ee.12.jar}"/>
        </ant>

        <ant antfile="sample-servlet/build.xml" target="clean" inheritAll="false">
            <property name="j2ee.jar" value="${j2ee.13.jar}"/>
        </ant>

    </target>

</project>
