<?xml version="1.0"?>
<!DOCTYPE project [
    <!ENTITY common SYSTEM "file:../../build-common.xml">
]>

<!--
  =============================================================================
    Build file for the Cactus Ant Integration project.

    See build.properties.sample for mandatory and optional Ant properties that
    need to be set prior to calling this build script.

    This script should be started with the following command line :

        ant <target>

    Run "ant -projecthelp" to get a list of available targets.

    Note: basedir points to the main Cactus directory in order to have the same
          base dir for all Cactus subprojects and thus be able to share
          relative paths.
  =============================================================================
-->
<project name="Cactus Ant Integration" default="dist" basedir="../..">

    <!-- Base directory for all file related operations -->
    <property name="base.dir" location="integration/ant"/>

    <!-- Indicate that this subproject is dependant on the version of the J2EE
         API available -->
    <property name="j2ee.dependant" value="true"/>

    <!-- Include properties and targets common to the different subprojects -->
    &common;

    <!-- Global project properties -->
    <property name="project.name.text" value="Cactus Ant Integration"/>
    <property name="project.name.file" value="cactus-integration-ant"/>
    
    <!--
       ========================================================================
         Initialize source, target and dist properties
       ========================================================================
    -->
    <target name="properties">

        <!-- Set the properties related to the source tree -->
	    <property name="src.dir" location="${base.dir}/src"/>
	    <property name="src.java.dir" location="${src.dir}/java"/>
	    <property name="src.test.dir" location="${src.dir}/test"/>
	    <property name="src.testinput.dir" location="${src.dir}/test-input"/>
	    <property name="src.script.dir" location="${src.dir}/scripts"/>
	    <property name="src.conf.dir" location="${src.dir}/confs"/>
	    <property name="build.dir" location="${base.dir}/."/>

        <!-- Set the properties related to the target area -->
	    <property name="target.classes.dir" location="${target.dir}/classes"/>
	    <property name="target.classes.java.dir"
	        location="${target.classes.dir}/java"/>
        <property name="target.classes.clover.dir"
            location="${target.classes.dir}/clover"/>
	    <property name="target.classes.test.dir"
	        location="${target.classes.dir}/test"/>
	    <property name="target.doc.dir" location="${target.dir}/doc"/>
	    <property name="target.doc.api.dir" location="${target.doc.dir}/api"/>
	    <property name="target.doc.testreports.dir"
	        location="${target.doc.dir}/test-reports"/>
	    <property name="target.testinput.dir"
	        location="${target.dir}/testinput"/>

        <property name="target.integration.dir"
            location="${target.dir}/integration"/>
        <property name="target.integration.lib.dir" 
            location="${target.integration.dir}/lib"/>
	    <property name="target.integration.lib.client.dir" 
	        location="${target.integration.lib.dir}/client"/>
	    <property name="target.integration.lib.server.dir"
	        location="${target.integration.lib.dir}/server"/>
	    <property name="target.integration.lib.common.dir"
	        location="${target.integration.lib.dir}/common"/>
	    <property name="target.integration.script.dir" 
	        location="${target.integration.dir}/scripts"/>
	    <property name="target.integration.conf.dir" 
	        location="${target.integration.dir}/confs"/>

    </target>

    <!--
       ========================================================================
         Verify that all mandatory properties have been set
       ========================================================================
    -->
    <target name="check.properties">

        <taskdef name="checkProperty" 
            classname="org.apache.cactus.ant.CheckPropertiesTask">
            <classpath>
                <pathelement location="${cactus.anttasks.jar}"/>
            </classpath>
        </taskdef>

        <checkProperty>
            <property name="j2ee.jar" isfile="true"/>
            <property name="aspectjrt.jar" isfile="true"/>
            <property name="commons.logging.jar" isfile="true"/>
            <property name="commons.httpclient.jar" isfile="true"/>
            <property name="junit.jar" isfile="true"/>
            <property name="log4j.jar" isfile="true"/>
            <property name="httpunit.jar" isfile="true"/>
            <property name="nekohtml.jar" isfile="true"/>
            <property name="xerces.jar" isfile="true"/>
            <property name="xmlapis.jar" isfile="true"/>
        </checkProperty>

        <path id="project.classpath">
            <pathelement location="${commons.logging.jar}"/>
            <pathelement path="${java.class.path}"/>
        </path>

    </target>

    <!--
       ========================================================================
         Initialize the build. Must be called by all targets
       ========================================================================
    -->
    <target name="init"
        depends="init.common,properties,check.properties,init.clover">

        <echo>clover.enable (optional) = ${clover.enable}</echo>

    </target>

    <!--
       ========================================================================
         Compiles the sources
       ========================================================================
    -->
    <target name="compile.prepare" depends="init">
        <fileset id="deployment.resources" dir="${src.conf.dir}">
            <include name="*.dtd"/>
        </fileset>
        <fileset id="container.share.resources" dir="${src.conf.dir}/share">
            <include name="orion1x/**/*.*"/>
            <include name="orion2x/**/*.*"/>
            <include name="resin2x/**/*.*"/>
            <include name="tomcat4x/**/*.*"/>
            <include name="tomcat5x/**/*.*"/>
            <include name="weblogic6x/**/*.*"/>
            <include name="weblogic7x/**/*.*"/>
        </fileset>
        <fileset id="container.j2ee12.resources" dir="${src.conf.dir}/j2ee12">
            <include name="tomcat3x/**/*.*"/>
        </fileset>
        <fileset id="container.j2ee13.resources" dir="${src.conf.dir}/j2ee13">
            <include name="jboss3x/**/*.*"/>
        </fileset>
    </target>

    <target name="compile.main" depends="compile.prepare">

        <mkdir dir="${target.classes.java.dir}"/>

        <propertyfile file="${target.classes.java.dir}/cactus.tasks"
          comment="Cactus Tasks for Ant">
            <entry key="cactifywar"
              value="org.apache.cactus.integration.ant.CactifyWarTask"/>
            <entry key="cactus"
              value="org.apache.cactus.integration.ant.CactusTask"/>
            <entry key="runservertests"
              value="org.apache.cactus.integration.ant.RunServerTestsTask"/>
            <entry key="webxmlmerge"
              value="org.apache.cactus.integration.ant.WebXmlMergeTask"/>
        </propertyfile>

        <copy todir="${target.classes.java.dir}">
            <fileset dir="${src.java.dir}" includes="**/*.properties"/>
        </copy>

        <mkdir dir="${target.classes.java.dir}/org/apache/cactus/integration/ant/deployment/resources"/>
        <copy todir="${target.classes.java.dir}/org/apache/cactus/integration/ant/deployment/resources">
            <fileset refid="deployment.resources"/>
        </copy>

        <mkdir dir="${target.classes.java.dir}/org/apache/cactus/integration/ant/container/resources"/>
        <copy todir="${target.classes.java.dir}/org/apache/cactus/integration/ant/container/resources">
            <fileset refid="container.share.resources"/>
            <fileset refid="container.j2ee12.resources"/>
            <fileset refid="container.j2ee13.resources"/>
        </copy>

        <javac srcdir="${src.java.dir}" destdir="${target.classes.java.dir}"
            deprecation="${deprecation}" optimize="${optimize}" 
            debug="${debug}">
            <classpath refid="project.classpath"/>
        </javac>

    </target>

    <target name="compile.test" depends="compile.main">

        <mkdir dir="${target.classes.test.dir}"/>

        <javac srcdir="${src.test.dir}" destdir="${target.classes.test.dir}"
          deprecation="${deprecation}" optimize="${optimize}"
          debug="${debug}">

            <classpath>
                <path refid="project.classpath"/>
                <pathelement location="${target.classes.java.dir}"/>
            </classpath>

        </javac>

    </target>

    <target name="compile.clover"
        depends="compile.prepare, init.clover"
        if="clover.enable">

        <clover-setup initstring="${clover.initstring}" enabled="yes">
            <files>
                <exclude name="**/Test*.*"/>
                <exclude name="**/Mock*.*"/>
            </files>
        </clover-setup>

        <mkdir dir="${target.classes.clover.dir}"/>

        <propertyfile file="${target.classes.clover.dir}/cactus.tasks"
          comment="Cactus Tasks for Ant">
            <entry key="cactifywar"
              value="org.apache.cactus.integration.ant.CactifyWarTask"/>
            <entry key="cactus"
              value="org.apache.cactus.integration.ant.CactusTask"/>
            <entry key="runservertests"
              value="org.apache.cactus.integration.ant.RunServerTestsTask"/>
            <entry key="webxmlmerge"
              value="org.apache.cactus.integration.ant.WebXmlMergeTask"/>
        </propertyfile>

        <copy todir="${target.classes.clover.dir}">
            <fileset dir="${src.java.dir}" includes="**/*.properties"/>
        </copy>

        <mkdir dir="${target.classes.clover.dir}/org/apache/cactus/integration/ant/deployment/resources"/>
        <copy todir="${target.classes.clover.dir}/org/apache/cactus/integration/ant/deployment/resources">
            <fileset refid="deployment.resources"/>
        </copy>

        <mkdir dir="${target.classes.clover.dir}/org/apache/cactus/integration/ant/container/resources"/>
        <copy todir="${target.classes.clover.dir}/org/apache/cactus/integration/ant/container/resources">
            <fileset refid="container.share.resources"/>
            <fileset refid="container.j2ee12.resources"/>
            <fileset refid="container.j2ee13.resources"/>
        </copy>

        <javac destdir="${target.classes.clover.dir}"
            deprecation="${deprecation}" optimize="${optimize}">
            <src path="${src.java.dir}"/>
            <exclude name="**/package.html"/>
            <exclude name="**/overview.html"/>
            <classpath refid="project.classpath"/>
        </javac>

        <!-- Disable Clover for subsequent compilations -->
        <clover-setup initstring="${clover.initstring}" enabled="no"/>

    </target>

    <target name="compile" depends="compile.main, compile.test, compile.clover"
        description="Compile the sources"/>

    <!--
       ========================================================================
         Runs the unit tests
       ========================================================================
    -->
    <target name="test.clover.prepare" depends="compile.test, compile.clover"
        if="clover.enable">

        <path id="test.classpath">
            <path refid="project.classpath"/>
            <pathelement path="${clover.jar}"/>
            <pathelement path="${target.classes.clover.dir}"/>
            <pathelement path="${target.classes.test.dir}"/>
        </path>

    </target>

    <target name="test.main.prepare" depends="compile.test" 
        unless="clover.enable">

        <path id="test.classpath">
            <path refid="project.classpath"/>
            <pathelement path="${target.classes.java.dir}"/>
            <pathelement path="${target.classes.test.dir}"/>
        </path>

    </target>

    <target name="test" depends="test.clover.prepare, test.main.prepare"
        description="Runs the unit tests">

        <mkdir dir="${target.testinput.dir}"/>
        <copy todir="${target.testinput.dir}">
          <fileset dir="${src.testinput.dir}"/>
        </copy>

        <mkdir dir="${target.doc.testreports.dir}"/>

        <junit printsummary="yes" failureproperty="tests.failed" fork="yes">

            <sysproperty key="testinput.dir" file="${target.testinput.dir}"/>

            <classpath refid="test.classpath"/>

            <formatter type="brief" usefile="false"/>

            <test name="${testcase}" if="testcase"/>

            <batchtest todir="${target.doc.testreports.dir}" unless="testcase">
                <fileset dir="${src.test.dir}">
                    <include name="**/Test*.java"/>
                    <exclude name="**/TestAll.java"/>
                </fileset>
                <formatter type="xml"/>
            </batchtest>

        </junit>

        <junitreport todir="${target.doc.testreports.dir}">
          <fileset dir="${target.doc.testreports.dir}"
              includes="TEST-*.xml"/>
          <report format="frames" todir="${target.doc.testreports.dir}"/>
        </junitreport>

        <!-- Don't fail the build until the tests have somewhat stabilized>
        <fail if="tests.failed">At least one unit test failed!</fail -->

    </target>

    <!--
       ========================================================================
         Create the runtime jar file
       ========================================================================
    -->
    <target name="jar.clover" depends="compile.clover">

        <jar jarfile="${target.dir}/${cactus.antintegration.clover.jar.name}.jar">

            <manifest>
                <section name="org/apache/cactus/integration/ant/">
                    <attribute name="Specification-Title"
                        value="${project.name.text}"/>
                    <attribute name="Specification-Version"
                        value="${project.version}"/>
                    <attribute name="Specification-Vendor"
                        value="Apache Software Foundation"/>
                    <attribute name="Implementation-Title"
                        value="${project.name.file}"/>
                    <attribute name="Implementation-Version"
                        value="${project.version} ${TODAY}"/>
                    <attribute name="Implementation-Vendor"
                        value="Apache Software Foundation"/>
                </section>
            </manifest>

            <metainf dir=".">
                <include name="LICENSE.cactus"/>
            </metainf>

            <fileset dir="${target.classes.java.dir}"/>

        </jar>

    </target>

    <target name="jar.main" depends="compile.main">

        <jar jarfile="${target.dir}/${cactus.antintegration.jar.name}.jar">

            <manifest>
                <section name="org/apache/cactus/integration/ant/">
                    <attribute name="Specification-Title"
                        value="${project.name.text}"/>
                    <attribute name="Specification-Version"
                        value="${project.version}"/>
                    <attribute name="Specification-Vendor"
                        value="Apache Software Foundation"/>
                    <attribute name="Implementation-Title"
                        value="${project.name.file}"/>
                    <attribute name="Implementation-Version"
                        value="${project.version} ${TODAY}"/>
                    <attribute name="Implementation-Vendor"
                        value="Apache Software Foundation"/>
                </section>
            </manifest>

            <metainf dir=".">
                <include name="LICENSE.cactus"/>
            </metainf>

            <fileset dir="${target.classes.java.dir}"/>

        </jar>

    </target>

    <target name="jar"
        depends="jar.main, jar.clover"
        description="Generate the integration jar"/>

    <!--
       ========================================================================
         Generate the documentation (javadoc)
       ========================================================================
    -->
    <target name="doc.check" depends="init">

      <uptodate property="doc.uptodate"
          targetfile="${target.doc.api.dir}/index.html">
          <srcfiles dir="${src.java.dir}"
              includes="**/*.java, **/*.html"/>
      </uptodate>

    </target>

    <target name="doc" depends="doc.check" unless="doc.uptodate"
        description="Generates the API documentation">

        <mkdir dir="${target.doc.api.dir}"/>

        <javadoc
            sourcepath="${src.java.dir}"
            packagenames="org.apache.cactus.ant.*,
                          org.apache.cactus.integration.ant.*"
            destdir="${target.doc.api.dir}"
            author="true"
            public="true"
            version="true"
            use="true"
            windowtitle="${project.name.text} ${project.version}"
            doctitle="${project.name.text} ${project.version}"
            bottom="Copyright &amp;copy; ${year} Apache Software Foundation.
                    All Rights Reserved.">

          <classpath>
            <pathelement location="${commons.logging.jar}"/>
            <pathelement path="${java.class.path}"/>
          </classpath>

        </javadoc>

    </target>

    <!--
       ========================================================================
         Generate the distributable files
       ========================================================================
    -->
    <target name="dist.prepare" depends="jar,doc,test,checkstyle">

        <mkdir dir="${target.integration.dir}"/>
        <mkdir dir="${target.integration.lib.client.dir}"/>
        <mkdir dir="${target.integration.lib.server.dir}"/>
        <mkdir dir="${target.integration.lib.common.dir}"/>
        <mkdir dir="${target.integration.script.dir}"/>
        <mkdir dir="${target.integration.conf.dir}"/>

		<!-- Gather all server side Cactus jars -->
		<!-- The directory needs a file because it is otherwise pruned by the Eclipse update feature -->
		<touch file="${target.integration.lib.server.dir}/KEEPIT"/>
        
		<!-- Gather all client side Cactus jars -->
        <copy tofile="${target.integration.lib.client.dir}/${cactus.antintegration.jar.name}-${project.version}.jar"
            file="${target.dir}/${cactus.antintegration.jar.name}.jar"/>
        <copy todir="${target.integration.lib.client.dir}" file="${nekohtml.jar}"/>
        <copy todir="${target.integration.lib.client.dir}" file="${xerces.jar}"/>
        <copy todir="${target.integration.lib.client.dir}" file="${xmlapis.jar}"/>
        <copy todir="${target.integration.lib.client.dir}" file="${j2ee.jar}"/>
        <copy todir="${target.integration.lib.client.dir}" file="${commons.httpclient.jar}"/>

		<!-- Gather all shared (client and server) Cactus jars -->
        <copy tofile="${target.integration.lib.common.dir}/${cactus.framework.jar.name}-${project.version}.jar"
        	file="${cactus.framework.jar}"/>
        <copy todir="${target.integration.lib.common.dir}" file="${commons.logging.jar}"/>
        <copy todir="${target.integration.lib.common.dir}" file="${log4j.jar}"/>
        <copy todir="${target.integration.lib.common.dir}" file="${aspectjrt.jar}"/>
        <copy todir="${target.integration.lib.common.dir}" file="${junit.jar}"/>
        <copy todir="${target.integration.lib.common.dir}" file="${httpunit.jar}"/>

		<!-- Copy the scripts for the current J2EE API -->

        <filter token="cactus.antintegration.jar.name" 
        	value="${cactus.antintegration.jar.name}-${project.version}.jar"/>
        <filter token="cactus.framework.jar.name" 
        	value="${cactus.framework.jar.name}-${project.version}.jar"/>

		<basename property="log4j.jar.name" file="${log4j.jar}"/>
        <filter token="log4j.jar.name" value="${log4j.jar.name}"/>
		<basename property="aspectjrt.jar.name" file="${aspectjrt.jar}"/>
        <filter token="aspectjrt.jar.name" value="${aspectjrt.jar.name}"/>
		<basename property="commons.logging.jar.name" file="${commons.logging.jar}"/>
        <filter token="commons.logging.jar.name" value="${commons.logging.jar.name}"/>
		<basename property="junit.jar.name" file="${junit.jar}"/>
        <filter token="junit.jar.name" value="${junit.jar.name}"/>
		<basename property="commons.httpclient.jar.name" file="${commons.httpclient.jar}"/>
        <filter token="commons.httpclient.jar.name" value="${commons.httpclient.jar.name}"/>
		<basename property="httpunit.jar.name" file="${httpunit.jar}"/>
        <filter token="httpunit.jar.name" value="${httpunit.jar.name}"/>
		<basename property="nekohtml.jar.name" file="${nekohtml.jar}"/>
        <filter token="nekohtml.jar.name" value="${nekohtml.jar.name}"/>
		<basename property="xerces.jar.name" file="${xerces.jar}"/>
        <filter token="xerces.jar.name" value="${xerces.jar.name}"/>
		<basename property="xmlapis.jar.name" file="${xmlapis.jar}"/>
        <filter token="xmlapis.jar.name" value="${xmlapis.jar.name}"/>

		<copy todir="${target.integration.script.dir}" filtering="on">
			<fileset dir="${src.script.dir}/share"/>
			<fileset dir="${src.script.dir}/j2ee${j2ee.api}">
				<exclude name="build.xml"/>
			</fileset>
		</copy>
		<copy todir="${target.integration.dir}"
			file="${src.script.dir}/j2ee${j2ee.api}/build.xml"/>

		<!-- Copy the confs for the current J2EE API -->
		<copy todir="${target.integration.conf.dir}">
			<fileset dir="${src.conf.dir}/share"/>
			<fileset dir="${src.conf.dir}/j2ee${j2ee.api}"/>
		</copy>

		<!-- Copy the JSP Redirector -->
		<copy todir="${target.integration.conf.dir}" 
			file="${cactus.framework.web}/jspRedirector.jsp"/>

        <mkdir dir="${dist.bin.dir}"/>
        <mkdir dir="${dist.lib.dir}"/>
        <mkdir dir="${dist.doc.api.dir}"/>
        
    </target>

    <target name="dist.clover"
        depends="jar.clover"
        if="clover.enable">

        <copy todir="${dist.lib.dir}"
            file="${target.dir}/${cactus.antintegration.clover.jar.name}.jar"/>

    </target>

    <target name="dist" depends="dist.prepare, dist.clover"
        description="Generate the distributable files">

        <copy todir="${dist.lib.dir}"
            file="${target.dir}/${cactus.antintegration.jar.name}.jar"/>

        <!-- Copy the Integration -->
        <copy todir="${dist.bin.dir}/${project.name.file}">
            <fileset dir="${target.integration.dir}"/>
        </copy>
        
        <!-- Copy the generated documentation -->
        <copy todir="${dist.doc.api.dir}">
            <fileset dir="${target.doc.api.dir}"/>
        </copy>
        		
    </target>

    <!--
       ========================================================================
         Perform a code audit using CheckStyle.
       ========================================================================
    -->
    <target name="checkstyle" depends="init,init.checkstyle"
        if="checkstyle.available"
        description="Perform a code audit using Checkstyle">

        <mkdir dir="${target.dir}"/>

        <checkstyle config="./checkstyle.xml" 
            failOnViolation="yes">

            <fileset dir="${src.java.dir}">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="${src.test.dir}">
                <include name="**/*.java"/>
            </fileset>
        
            <formatter type="plain"/>
            <formatter type="xml"
                toFile="${target.dir}/checkstyle_results.xml"/>

            <property key="checkstyle.header.file" file="./LICENSE.cactus"/>
        </checkstyle>

    </target>

    <!--
       ========================================================================
         Clean generated files (including distributables)
       ========================================================================
    -->
    <target name="clean" depends="init.display,init.properties"
    	description="Clean all generated files">

        <delete dir="${target.dir}"/>
        <delete dir="${dist.dir}"/>

    </target>

</project>
