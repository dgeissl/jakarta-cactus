<?xml version="1.0"?>
<document>

  <properties>
    <title>Using the Maven Cactus plugin</title>
    <author email="vmassol@apache.org">Vincent Massol</author>
  </properties>

  <body>
    <section name="Installing the Cactus plugin">
      <p>
        There are 2 options to install the Cactus plugin in an existing Maven
        installation:
      </p>
      <ul>
        <li>
          <strong>Automatic install</strong>: Call 
          <code>maven plugin:download -DgroupId=cactus -DartifactId=cactus-maven -Dversion={version}</code>
          where <code>{version}</code> is the version to use. Maven will 
          automatically download the plugin and install it, uninstalling any
          other version you may already have.
        </li>
        <li>
          <strong>Manual install</strong>: 
          <a href="http://www.ibiblio.org/maven/cactus/plugins/">Download</a>
          the Cactus plugin jar and copy it in 
          <code>{MAVEN_HOME}/plugins</code> where <code>{MAVEN_HOME}</code> is
          the location where you have installed Maven. Make sure you also
          remove any previous Cactus plugin from 
          <code>{MAVEN_HOME}/plugins</code> and delete your 
          <code>{USER_HOME}/.maven/plugins</code> directory.
        </li>
      </ul>
      <note>
        It is probable that your version of Maven already includes the Cactus
        plugin (it was bundled with Maven not long ago). If this is the case
        and if you want to install the new plugin, you need to remove the 
        <code>maven-cactus-plugin</code> plugin from
        <code>{MAVEN_HOME}/plugins</code> and delete your 
        <code>{USER_HOME}/.maven/plugins</code> directory.
      </note>
      <note>
        Older versions of the Cactus plugin can still be found
        <a href="http://www.ibiblio.org/maven/maven/plugins/">here</a>.
      </note>
    </section>
    <section name="Using the Cactus plugin">
      <ol>
        <li>
          Create a <code>src/test-cactus</code> directory in your project and
          put your Cactus test classes in it (with the normal package directory
          structure). Note that the location of the Cactus test sources can be
          configured through the <code>cactus.src.dir</code> property.
        </li>
        <li>
          Create a <code>build.properties</code> file in your project root
          directory (where <code>project.xml</code> is located) and define in
          it the location of the container you wish to use for the tests. For
          example, if you wish to run the Cactus tests on Tomcat 4.1.24 and on
          Resin 2.6, you will write:
        </li>
<source><![CDATA[
cactus.home.tomcat4x = C:/Apps/jakarta-tomcat-4.1.24
cactus.home.resin2x = C:/Apps/resin-2.1.6
]]></source>
        <li>
          Then, simply type <code>maven cactus:test</code> (or 
          <code>maven cactus</code> for short) to run the Cactus 
          tests.
        </li>
      </ol>
      <subsection name="Custom test jars">
        <p>
          Some jars are used only for testing (for example, DbUnit). These
          jars can be entered as dependencies in the <code>project.xml</code>
          and tagged with <code>cactus.bundle</code>. When the Cactus plugin 
          finds such jars it will automatically add them to the deployed war. 
          For example:          
        </p>
<source><![CDATA[
    <dependency>
      <groupId>dbunit</groupId>>
      <artifactId>dbunit</artifactId>>
      <version>1.5.5</version>
      <properties>
        <cactus.bundle>true</cactus.bundle>
      </properties>
    </dependency>
]]></source>
      </subsection>
    </section>

 </body>
</document>
