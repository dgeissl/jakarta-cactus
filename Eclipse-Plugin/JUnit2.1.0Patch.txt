Index: plugin.properties
===================================================================
RCS file: /home/eclipse/org.eclipse.jdt.junit/plugin.properties,v
retrieving revision 1.11
diff -u -r1.11 plugin.properties
--- plugin.properties	28 May 2002 08:36:22 -0000	1.11
+++ plugin.properties	7 Jan 2003 12:25:23 -0000
@@ -15,3 +15,4 @@
 TestSuiteWizard.name= TestSuite
 
 JUnitShortcut.label=JUnit Test
+TestRunListener.name= TestRun ListenersTestRunListener.name= TestRun Listeners
\ No newline at end of file
Index: plugin.xml
===================================================================
RCS file: /home/eclipse/org.eclipse.jdt.junit/plugin.xml,v
retrieving revision 1.36
diff -u -r1.36 plugin.xml
--- plugin.xml	5 Jan 2003 19:15:59 -0000	1.36
+++ plugin.xml	7 Jan 2003 12:25:24 -0000
@@ -26,6 +26,7 @@
       <import plugin="org.junit"/>
    </requires>
 
+   <extension-point id="testRunListeners" name="%TestRunListener.name" schema="schema/org.eclipse.jdt.junit.testRunListeners.exsd"/>
 
    <extension
          point="org.eclipse.ui.views">
Index: doc/org.eclipse.jdt.junit.testRunListeners.html
===================================================================
RCS file: doc/org.eclipse.jdt.junit.testRunListeners.html
diff -N doc/org.eclipse.jdt.junit.testRunListeners.html
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ doc/org.eclipse.jdt.junit.testRunListeners.html	7 Jan 2003 12:25:28 -0000
@@ -0,0 +1,36 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
+<HEAD><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
+</HEAD>
+<HTML>
+<BODY>
+<H1><CENTER>TestRun Listeners</CENTER></H1>
+<H2>Identifier</H2>
+org.eclipse.jdt.junit.org.eclipse.jdt.junit.testRunListeners<H2>Description</H2>
+This extension point is used to plug in TestRun listeners.<H2>Markup</H2>
+<p><samp>&nbsp;&nbsp; &lt;!ELEMENT extension (testRunListener*)&gt;</samp>
+<br><samp>&nbsp;&nbsp; &lt;!ATTLIST extension</samp>
+<br><samp>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point&nbsp;CDATA #REQUIRED</samp>
+<br><samp>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id&nbsp;&nbsp;&nbsp;&nbsp;CDATA #IMPLIED</samp>
+<br><samp>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;&nbsp;CDATA #IMPLIED</samp>
+<br><samp>&nbsp;&nbsp; &gt;</samp>
+<ul>
+<li><b>point</b> - </li><li><b>id</b> - </li><li><b>name</b> - </li></ul>
+<p><samp>&nbsp;&nbsp; &lt;!ELEMENT testRunListener EMPTY&gt;</samp>
+<br><samp>&nbsp;&nbsp; &lt;!ATTLIST testRunListener</samp>
+<br><samp>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;CDATA #REQUIRED</samp>
+<br><samp>&nbsp;&nbsp; &gt;</samp>
+<ul>
+<li><b>class</b> - a fully qualified name of the Java class that implements <samp>org.eclipse.jdt.internal.junit.runner.ITestRunListener</samp> interface</li></ul>
+<H2>Example</H2>
+The following is an example of the extension point usage:
+
+<p>
+<pre>
+      &lt;extension point="org.eclipse.jdt.junit.testRunListeners"&gt;
+         &lt;testRunListener class="com.example.SampleTestRunListener"/&gt;
+      &lt;/extension&gt;
+   </pre>
+</p><H2>API Information</H2>
+Plug-ins that want to extend this extension point must implement <samp>org.eclipse.jdt.internal.junit.runner.ITestRunListener</samp> interface<H2>Supplied Implementation</H2>
+[Enter information about supplied implementation of this extension point.]</BODY>
+</HTML>
Index: src/org/eclipse/jdt/internal/junit/ui/JUnitPlugin.java
===================================================================
RCS file: /home/eclipse/org.eclipse.jdt.junit/src/org/eclipse/jdt/internal/junit/ui/JUnitPlugin.java,v
retrieving revision 1.15
diff -u -r1.15 JUnitPlugin.java
--- src/org/eclipse/jdt/internal/junit/ui/JUnitPlugin.java	15 Dec 2002 19:57:32 -0000	1.15
+++ src/org/eclipse/jdt/internal/junit/ui/JUnitPlugin.java	7 Jan 2003 12:25:27 -0000
@@ -12,13 +12,18 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
+import java.util.Vector;
 
 import org.eclipse.core.resources.IWorkspaceRoot;
 import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IConfigurationElement;
+import org.eclipse.core.runtime.IExtensionPoint;
 import org.eclipse.core.runtime.IPluginDescriptor;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.MultiStatus;
+import org.eclipse.core.runtime.Platform;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.debug.core.DebugPlugin;
 import org.eclipse.debug.core.ILaunch;
@@ -33,6 +38,7 @@
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.JavaModelException;
 import org.eclipse.jdt.internal.junit.launcher.JUnitBaseLaunchConfiguration;
+import org.eclipse.jdt.internal.junit.runner.ITestRunListener;
 import org.eclipse.jdt.ui.JavaElementLabelProvider;
 import org.eclipse.jface.dialogs.ProgressMonitorDialog;
 import org.eclipse.jface.operation.IRunnableWithProgress;
@@ -70,7 +76,19 @@
 	 * Once a test runner is connected it is removed from the set.
 	 */
 	private AbstractSet fTrackedLaunches= new HashSet(20);
-	
+
+
+	/**
+	 * Identifier for 'testRunListeners' extension point
+	 */
+	public static final String ID_EXTENSION_POINT_TESTRUN_LISTENERS =
+		PLUGIN_ID + "." + "testRunListeners";
+
+	/**
+	 * Vector containing the TestRun listeners
+	 */
+	private Vector testRunListeners = null;
+		
 	public JUnitPlugin(IPluginDescriptor desc) {
 		super(desc);
 		fgPlugin= this;
@@ -308,5 +326,61 @@
 		dialog.setIgnoreCase(false);
 		dialog.setElements(packageList.toArray()); // XXX inefficient
 		return dialog;
+	}
+	
+	/**
+	 * Initializes TestRun Listener extensions
+	 */
+	private void loadTestRunListeners() {
+		testRunListeners = new Vector();
+		IExtensionPoint extensionPoint =
+			Platform.getPluginRegistry().getExtensionPoint(
+				ID_EXTENSION_POINT_TESTRUN_LISTENERS);
+		if (extensionPoint == null) {
+			return;
+		}
+		IConfigurationElement[] configs =
+			extensionPoint.getConfigurationElements();
+		MultiStatus status =
+			new MultiStatus(
+				PLUGIN_ID,
+				IStatus.OK,
+				JUnitMessages.getString(
+					"JUnitPlugin.Exception_occurred_reading_testRunListener_extensions"),
+				null);	
+		for (int i = 0; i < configs.length; i++) {
+			try {
+				ITestRunListener testRunListener =
+					(ITestRunListener) configs[i].createExecutableExtension(
+						"class");
+				testRunListeners.add(testRunListener);
+			} catch (CoreException e) {
+				status.add(e.getStatus());
+			}
+		}
+		if (!status.isOK()) {
+			JUnitPlugin.log(status);
+		}
+	}
+
+	/**
+	 * Returns an array of all TestRun listeners
+	 */
+	public Vector getTestRunListeners() {
+		if (testRunListeners == null) {
+			loadTestRunListeners();
+		}
+		return testRunListeners;
+	}
+
+	/**
+	 * Adds a TestRun listener to the collection of listeners
+	 */
+	public void addTestRunListener(ITestRunListener newListener) {
+		// load TestRun listeners from the extension point registry
+		if (testRunListeners == null) {
+			loadTestRunListeners();
+		}
+		testRunListeners.add(newListener);
 	}	
 }
Index: src/org/eclipse/jdt/internal/junit/ui/RemoteTestRunnerClient.java
===================================================================
RCS file: /home/eclipse/org.eclipse.jdt.junit/src/org/eclipse/jdt/internal/junit/ui/RemoteTestRunnerClient.java,v
retrieving revision 1.3
diff -u -r1.3 RemoteTestRunnerClient.java
--- src/org/eclipse/jdt/internal/junit/ui/RemoteTestRunnerClient.java	13 Apr 2002 23:43:08 -0000	1.3
+++ src/org/eclipse/jdt/internal/junit/ui/RemoteTestRunnerClient.java	7 Jan 2003 12:25:25 -0000
@@ -21,9 +21,10 @@
  */
 public class RemoteTestRunnerClient {
 	/**
-	 * A listener that is informed about test events.
+	 * An array of listeners that are informed about test events.
 	 */
-	private ITestRunListener fListener;
+	private ITestRunListener[] fListeners;
+
 	/**
 	 * The server socket
 	 */
@@ -91,7 +92,9 @@
 				while(fBufferedReader != null && (message= readMessage(fBufferedReader)) != null)
 					receiveMessage(message);
 			} catch (SocketException e) {
-				fListener.testRunTerminated();
+				for (int i = 0; i < fListeners.length; i++) {
+					fListeners[i].testRunTerminated();
+				}
 			} catch (IOException e) {
 				System.out.println(e);
 				// fall through
@@ -104,11 +107,13 @@
 	 * Start listening to a test run. Start a server connection that
 	 * the RemoteTestRunner can connect to.
 	 */
-	public synchronized void startListening(ITestRunListener listener, int port) {
-		fListener= listener;
-		fPort= port;
-		ServerConnection connection= new ServerConnection(port);
-		connection.start();		
+	public synchronized void startListening(
+		ITestRunListener[] listeners,
+		int port) {
+		fListeners = listeners;
+		fPort = port;
+		ServerConnection connection = new ServerConnection(port);
+		connection.start();
 	}
 	
 	/**
@@ -177,9 +182,16 @@
 			return;
 		}
 		if (message.startsWith(MessageIds.TRACE_END)) {
-			fInReadTrace= false;
-			fListener.testFailed(fFailureKind, fFailedTest, fFailedTrace);
-			fFailedTrace= ""; //$NON-NLS-1$
+			fInReadTrace = false;
+
+			for (int i = 0; i < fListeners.length; i++) {
+				fListeners[i].testFailed(
+					fFailureKind,
+					fFailedTest,
+					fFailedTrace);
+			}
+
+			fFailedTrace = ""; //$NON-NLS-1$
 			return;
 		}
 		if (fInReadTrace) {
@@ -203,16 +215,22 @@
 
 		String arg= message.substring(MessageIds.MSG_HEADER_LENGTH);
 		if (message.startsWith(MessageIds.TEST_RUN_START)) {
-			int count= Integer.parseInt(arg);
-			fListener.testRunStarted(count);
+			int count = Integer.parseInt(arg);
+			for (int i = 0; i < fListeners.length; i++) {
+				fListeners[i].testRunStarted(count);
+			}
 			return;
 		}
 		if (message.startsWith(MessageIds.TEST_START)) {
-			fListener.testStarted(arg);
+			for (int i = 0; i < fListeners.length; i++) {
+				fListeners[i].testStarted(arg);
+			}
 			return;
 		}
 		if (message.startsWith(MessageIds.TEST_END)) {
-			fListener.testEnded(arg);
+			for (int i = 0; i < fListeners.length; i++) {
+				fListeners[i].testEnded(arg);
+			}
 			return;
 		}
 		if (message.startsWith(MessageIds.TEST_ERROR)) {
@@ -226,18 +244,25 @@
 			return;
 		}
 		if (message.startsWith(MessageIds.TEST_RUN_END)) {
-			long elapsedTime= Long.parseLong(arg);
-			fListener.testRunEnded(elapsedTime);
+			long elapsedTime = Long.parseLong(arg);
+			for (int i = 0; i < fListeners.length; i++) {
+				fListeners[i].testRunEnded(elapsedTime);
+			}
 			return;
 		}
 		if (message.startsWith(MessageIds.TEST_STOPPED)) {
-			long elapsedTime= Long.parseLong(arg);
-			fListener.testRunStopped(elapsedTime);
+			long elapsedTime = Long.parseLong(arg);
+			for (int i = 0; i < fListeners.length; i++) {
+				fListeners[i].testRunStopped(elapsedTime);
+			}
+
 			shutDown();
 			return;
 		}
 		if (message.startsWith(MessageIds.TEST_TREE)) {
-			fListener.testTreeEntry(arg);
+			for (int i = 0; i < fListeners.length; i++) {
+				fListeners[i].testTreeEntry(arg);
+			}
 			return;
 		}
 		if (message.startsWith(MessageIds.TEST_RERAN)) {
@@ -256,8 +281,11 @@
 				
 			String trace= ""; //$NON-NLS-1$
 			if (statusCode != ITestRunListener.STATUS_OK)
-				trace= fFailedRerunTrace; // assumption a rerun trace was sent before
-			fListener.testReran(className, testName, statusCode, trace);
+				trace = fFailedRerunTrace;
+			// assumption a rerun trace was sent before
+			for (int i = 0; i < fListeners.length; i++) {
+				fListeners[i].testReran(className, testName, statusCode, trace);
+			}
 		}
 	}
 }
Index: src/org/eclipse/jdt/internal/junit/ui/TestRunnerViewPart.java
===================================================================
RCS file: /home/eclipse/org.eclipse.jdt.junit/src/org/eclipse/jdt/internal/junit/ui/TestRunnerViewPart.java,v
retrieving revision 1.24
diff -u -r1.24 TestRunnerViewPart.java
--- src/org/eclipse/jdt/internal/junit/ui/TestRunnerViewPart.java	5 Jan 2003 19:15:59 -0000	1.24
+++ src/org/eclipse/jdt/internal/junit/ui/TestRunnerViewPart.java	7 Jan 2003 12:25:26 -0000
@@ -460,7 +460,13 @@
 			stopTest();
 		}
 		fTestRunnerClient= new RemoteTestRunnerClient();
-		fTestRunnerClient.startListening(this, port);
+		Vector listeners = JUnitPlugin.getDefault().getTestRunListeners();
+		// Construct an array containing the listeners, plus TestRunnerViewPart (this)
+		ITestRunListener[] listenerArray = new ITestRunListener[listeners.size()+1];
+		listeners.copyInto(listenerArray);
+		int lastElementIndex = listenerArray.length-1;
+		listenerArray[lastElementIndex] = this;
+		fTestRunnerClient.startListening(listenerArray, port);
 		fLastLaunch= launch;
 		String title= JUnitMessages.getFormattedString("TestRunnerViewPart.title", type.getElementName()); //$NON-NLS-1$
 		setTitle(title);
