
    <!-- Give user a chance to override without editing this file
         (and without typing -D each time it compiles it) -->
    <property file="build/build.properties" />
    <property file="${user.home}/build.properties" />

    <!-- Global project properties -->
    <property name="project.name.text" value="Cactus Servlet Sample"/>
    <property name="project.name.file" value="sample-servlet"/>
    <property name="project.version" value="1.4b1"/>

    <!-- Prefix to add to all distributable files -->
    <property name="project.prefix" value="jakarta-"/>

    <!-- Generic properties -->
    <property name="year" value="2000-2003"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="off"/>
    <property name="deprecation" value="off"/>

    <!--
       ========================================================================
         Base directory for all file related operations
       ========================================================================
    -->
    <property name="base.dir" value="."/>

    <!--
       ========================================================================
         Set the properties related to the source tree.
       ========================================================================
    -->
    <property name="src.dir" value="${base.dir}/src"/>
    <property name="build.dir" value="${base.dir}/build"/>
    <property name="conf.dir" value="${base.dir}/conf"/>
    <property name="conf.test.dir" value="${conf.dir}/test"/>
    <property name="web.dir" value="${base.dir}/web"/>

    <!--
       ========================================================================
         Set the properties related to the target area
       ========================================================================
    -->
    <!-- Destination locations for the build -->
    <property name="target.dir" value="${base.dir}/target"/>
    <property name="target.classes.dir" value="${target.dir}/classes"/>
    <property name="target.conf.dir" value="${target.dir}/conf"/>
    <property name="target.conf.client.dir" value="${target.conf.dir}/client"/>
    <property name="target.conf.server.dir" value="${target.conf.dir}/server"/>
    <property name="target.doc.dir" value="${target.dir}/doc"/>
    <property name="target.doc.api.dir" value="${target.doc.dir}/api"/>
    <property name="target.test.dir" value="${target.dir}/test"/>
    <property name="target.lib.dir" value="${target.dir}/lib"/>

    <!-- Distribution directory, i.e. where the expanded distibutable files
         are located -->
    <property name="dist.dir" value="${base.dir}/dist"/>
    <property name="dist.bin.dir" value="${dist.dir}/bin"/>
    <property name="dist.doc.dir" value="${dist.dir}/doc"/>
    <property name="dist.doc.api.dir" value="${dist.doc.dir}/api"/>

    <!--
       ========================================================================
         Default values that can be overidden
       ========================================================================
    -->
    <!-- The port that will be used to start the servers -->
    <property name="test.port" value="8080"/>

    <!--
       ========================================================================
        Names of deliverables
       ========================================================================
    -->
    <!-- The Sample war -->
    <property name="sample.war.name" value="${project.name.file}"/>

    <!--
       ========================================================================
         Useful patterns for targets
       ========================================================================
    -->
    <path id="project.class.path">

        <pathelement location="${cactus.framework.jar}"/>
        <pathelement location="${cactus.ant.jar}"/>
        <pathelement location="${servlet.jar}"/>
        <pathelement location="${log4j.jar}"/>
        <pathelement location="${commons.logging.jar}"/>
        <pathelement location="${commons.httpclient.jar}"/>
        <pathelement location="${httpunit.jar}"/>
        <pathelement location="${junit.jar}"/>
        <pathelement location="${aspectjrt.jar}"/>

        <!-- Includes system classpath for jars that are in ANT_HOME/lib such
             as aspectrt.jar, etc -->
        <pathelement path="${java.class.path}"/>
    </path>

    <!--
       ========================================================================
         Display configurable properties values
       ========================================================================
    -->
    <target name="display.properties">

        <echo message="----- ${project.name.text} ${project.version} -----"/>
        <echo message=""/>
        <echo message="java.class.path = ${java.class.path}"/>
        <echo message=""/>
        <echo message="java.home = ${java.home}"/>
        <echo message="user.home = ${user.home}"/>
        <echo message="ant.home = ${ant.home}"/>
        <echo message=""/>
        <echo message="cactus.framework.jar = ${cactus.framework.jar}"/>
        <echo message="cactus.ant.jar = ${cactus.ant.jar}"/>
        <echo message="servlet.jar = ${servlet.jar}"/>
        <echo message="aspectjrt.jar = ${aspectjrt.jar}"/>
        <echo message="commons.logging.jar = ${commons.logging.jar}"/>
        <echo message="commons.httpclient.jar = ${commons.httpclient.jar}"/>
        <echo message="httpunit.jar = ${httpunit.jar}"/>
        <echo message="junit.jar = ${junit.jar}"/>
        <echo message=""/>
        <echo message="log4j.jar (optional) = ${log4j.jar}"/>
        <echo message="clover.jar (optional) = ${clover.jar}"/>
        <echo message=""/>
        <echo message="test.port = ${test.port}"/>
        <echo message=""/>

    </target>

    <!--
       ========================================================================
         Verify that all mandatory properties have been set
       ========================================================================
    -->
    <target name="check.properties"
        depends="display.properties,check.properties.test,check.properties.warn"/>

    <target name="check.properties.test">

        <condition property="properties.ok">
            <and>
                <available file="${cactus.framework.jar}"/>
                <available file="${cactus.ant.jar}"/>
                <available file="${servlet.jar}"/>
                <available file="${aspectjrt.jar}"/>
                <available file="${commons.logging.jar}"/>
                <available file="${commons.httpclient.jar}"/>
                <available file="${httpunit.jar}"/>
                <available file="${junit.jar}"/>
           </and>
        </condition>

    </target>

    <target name="check.properties.warn" unless="properties.ok">

        <fail message="Missing property or property pointing to an invalid file (check your build.properties file)"/>

    </target>
    <!--
       ========================================================================
         Initialize the build. Must be called by all targets
       ========================================================================
    -->
    <target name="init">

        <tstamp/>

        <!-- Filters -->
        <filter token="version" value="${project.version}"/>
        <filter token="project.name.text" value="${project.name.text}"/>
        <filter token="project.name.file" value="${project.name.file}"/>
        <filter token="year" value="${year}"/>
        <filter token="test.port" value="${test.port}"/>

    </target>

    <!--
       ========================================================================
         Clean generated files (including distributables)
       ========================================================================
    -->
    <target name="clean" depends="init" description="Clean all generated files">
  <delete includeEmptyDirs="true">
    <fileset dir="${target.dir}">
    </fileset>
  </delete>
  <mkdir dir="${target.dir}"/>
    </target>

    <target name="prepare.test" depends="init">

        <!-- Copy cactus.properties to replace the token filters -->
        <copy todir="${target.conf.client.dir}"
            file="${conf.test.dir}/cactus.properties" filtering="on"/>
        <!-- Copy log_client.properties so that it is in the classpath -->
        <copy tofile="${target.conf.client.dir}/log4j.properties"
            file="${conf.test.dir}/log_client.properties"/>

    </target>
