<?xml version="1.0"?>

<!-- 
  =============================================================================
    Build file for the Cactus project, for a given Servlet API. All targets
    that depend upon the Servlet API are found here.
    
    The following properties need to be set prior to calling this build file :

        servlet.api           [REQUIRED] The Servlet API against which Cactus
                              is built. Valid values are {22, 23}

        servlet.jar           [REQUIRED] The path to the Servlet API jar for
                              the chosen Servlet API

        junit.jar             [REQUIRED] The path to the JUnit jar file

        dist.dir              [REQUIRED] The directories where distributable
                              files will be copied with version number
                              postfixed.

    Additionally and depending on the servlet engines whith which you wish to
    run your tests, you'll need to set the following properties :

        resin.home.12         [OPTIONAL] Resin 1.2 home directory (required for
                              the tests_resin_12 target only)

        resin.home.13         [OPTIONAL] Resin 1.3 home directory (required for
                              the tests_resin_13 target only)

        tomcat.home.32        [OPTIONAL] Tomcat 3.2 home directory (required
                              for the tests_tomcat_32 target only)

        tomcat.home.40        [OPTIONAL] Tomcat 4.0 home directory (required
                              for the tests_tomcat_40 target only)

        weblogic.home.51      [OPTIONAL] WebLogic 5.1 home directory (required
                              for the tests_weblogic_51 target only)

    This script must not be called directly. It must be called by the build.xml
    script in the same directory. It will inherit numerous properties from that
    build file.
  ============================================================================= 
-->
<project name="Cactus build for a Servlet API" default="jar" basedir="..">

    <!-- 
       ========================================================================
         Set the properties related to the source tree
       ========================================================================
    -->
    <property name="src.java.servlet.dir" value="${src.dir}/framework/servlet${servlet.api}"/>

    <!-- 
       ========================================================================
         Set the properties related to the build area
       ========================================================================
    -->
    <!-- Destination locations for the build (relative to the basedir as
         specified in the basedir attribute of the project tag) -->
    <property name="out.dir" value="${out.root.dir}/servlet${servlet.api}"/>
    <property name="out.dist.dir" value="${out.dir}/dist"/>
    <property name="out.lib.dir" value="${out.dist.dir}/lib"/>
    <property name="out.src.dir" value="${out.dir}/src"/>
    <property name="out.classes.dir" value="${out.dir}/classes"/>
    <property name="out.doc.dir" value="${out.dist.dir}/doc"/>
    <property name="out.javadoc.dir" value="${out.doc.dir}/javadoc"/>
    <property name="out.conf.dir" value="${out.dir}/conf"/>

    <!-- Destination locations for the Cactus sample application
         (also used as functional tests for Cactus) -->
    <property name="out.sample.dir" value="${out.dist.dir}/sample"/>
    <property name="out.sample.build.dir" value="${out.sample.dir}/build"/>
    <property name="out.sample.etc.dir" value="${out.sample.build.dir}/etc"/>
    <property name="out.sample.conf.dir" value="${out.sample.dir}/conf"/>
    <property name="out.sample.doc.dir" value="${out.sample.dir}/docs"/>
    <property name="out.sample.src.dir" value="${out.sample.dir}/src"/>
    <property name="out.sample.web.dir" value="${out.sample.dir}/web"/>

    <!-- 
       ========================================================================
        Short names of deliverables
       ========================================================================
    -->

    <!-- The full distribution name -->
    <property name="full.name" value="${project.name}-${servlet.api}"/>

    <!-- The Cactus jar file. This is the file that should be used at
         runtime by end users -->
    <property name="jar.name" value="${project.name}"/>

    <!-- The Cactus javadocs for Servlet API 2.2 and 2.3.
         These files do not need to be redistributed to end-users. It is
         only needed to put the javadoc online to the Cactus web site. -->
    <property name="javadoc.name" value="${project.name}-javadoc-${servlet.api}"/>

    <!-- 
       ========================================================================
         Full names of deliverables
       ========================================================================
    -->

    <!-- The full distribution name -->
    <property name="final.full.name" value="${out.dist.dir}/${full.name}"/>

    <!-- The Cactus jar file. This is the file that should be used at
         runtime by end users -->
    <property name="final.jar.name" value="${out.lib.dir}/${jar.name}.jar"/>

    <!-- 
       ========================================================================
         Useful file patterns for targets
       ========================================================================
    -->
    <!-- All source files of the projet. These source files will be copied
         to the destination source directory in the prepare task -->
    <patternset id="all.src.files">

        <!-- All java files -->
        <include name="**/*.java"/>

        <!-- All doc files -->
        <include name="**/package.html"/>
        <include name="**/overview.html"/>

        <!-- All conf files (including test files) -->
        <include name="**/*.txt"/>
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>

    </patternset>

    <!-- All non java files in the src directory -->
    <patternset id="all.nonjava.files">

        <!-- All conf files (including test files) -->
        <include name="**/*.txt"/>
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>

    </patternset>

    <!-- 
       ========================================================================
         Initialize the build. Must be called by all targets
       ========================================================================
    -->
    <target name="init">

        <echo message="--------- ${project.fullname} ${project.version} for Servlet API ${servlet.api} ---------"/>
        <echo message=""/>

        <echo message="servlet.api = ${servlet.api}"/>

        <!-- Filters -->
        <filter token="version" value="${project.version}"/>
        <filter token="year" value="${year}"/>
        <filter token="jar.name" value="${jar.name}"/>
        <filter token="jar.ant.name" value="${jar.ant.name}"/>
        <filter token="servlet.jar" value="${servlet.jar}"/>
        <filter token="junit.jar" value="${junit.jar}"/>
        <filter token="servlet.api" value="${servlet.api}"/>
        <filter token="today" value="${TODAY}"/>

        <!-- Full names of distributables. They are defined here because the
             properties need to have a valid ${DSTAMP} property set and the
             tstamp task need to be located in a target -->

        <!-- The full distribution name -->
        <property name="dist.full.name" value="${dist.dir}/${full.name}-${DSTAMP}"/>

        <!-- The Cactus javadocs for Servlet API 2.2 and 2.3.
             These files do not need to be redistributed to end-users. It is
             only needed to put the javadoc online to the Cactus web site. -->
        <property name="dist.javadoc.name" value="${out.root.dir}/${javadoc.name}-${DSTAMP}"/>
              
    </target>

    <!-- 
       ========================================================================
         Help on usage. List available targets
       ========================================================================
    -->
    <target name="usage" depends="init">

        <echo message=""/>
        <echo message="${project.fullname} build file for Servlet API ${servlet.api}"/>
        <echo message="------------------------------------------------------"/>
        <echo message=""/>
        <echo message=" Available targets are :"/>
        <echo message=""/>
        <echo message=" jar              --> generates the jar file (default)"/>
        <echo message=" doc              --> generates the docs (javadoc, ...)"/>
        <echo message=" tests-unit       --> run the unit tests"/>
        <echo message=" tests-functional --> run the functional tests"/>
        <echo message=" sample           --> generate the sample application"/>
        <echo message=" dist             --> generate the distributables"/>
        <echo message=""/>

    </target>

    <!-- 
       ========================================================================
         Prepare the output directory by copying the source files into it
       ========================================================================
    -->
    <target name="prepare" depends="init">

        <mkdir dir="${out.src.dir}"/>

        <!-- Copy all source files to destination dir. Apply the filters in
             order to replace the tokens for the copyright year and the
             version -->
        <copy todir="${out.src.dir}" filtering="on">
            <fileset dir="${src.java.share.dir}">
                <patternset refid="all.src.files"/>
            </fileset>
            <fileset dir="${src.java.servlet.dir}">
                <patternset refid="all.src.files"/>
            </fileset>
            <fileset dir="${src.java.test.share.dir}">
                <patternset refid="all.src.files"/>
            </fileset>
        </copy>

    </target>

    <!-- 
       ========================================================================
         Compiles the source directory
       ========================================================================
    -->
    <!-- Preparation target for the compile target -->
    <target name="prepare-compile" depends="prepare">

        <mkdir dir="${out.classes.dir}"/>

    </target>

    <!-- Run the java compilation -->
    <target name="compile" depends="prepare-compile">

        <javac srcdir="${out.src.dir}"
            destdir="${out.classes.dir}"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}">

            <!-- Exclude all files that are not .java source files -->

            <!-- All doc files -->
            <exclude name="**/package.html"/>
            <exclude name="**/overview.html"/>

            <!-- All conf files (including test files) -->
            <exclude name="**/*.txt"/>
            <exclude name="**/*.xml"/>
            <exclude name="**/*.properties"/>

            <classpath>
                <pathelement path="${java.class.path}"/>
                <pathelement location="${servlet.jar}"/>
                <pathelement location="${junit.jar}"/>
            </classpath>

        </javac>

        <!-- Copies non java files that need to be in the classes directory -->
        <copy todir="${out.classes.dir}">
            <fileset dir="${src.java.share.dir}">
                <patternset refid="all.nonjava.files"/>
            </fileset>
            <fileset dir="${src.java.servlet.dir}">
                <patternset refid="all.nonjava.files"/>
            </fileset>
        </copy>

    </target>

    <!-- 
       ========================================================================
         Create the runtime jar file
       ========================================================================
    -->
    <!-- Preparation target for the jar target -->
    <target name="prepare-jar" depends="compile">

        <mkdir dir="${out.conf.dir}"/>
        <mkdir dir="${out.lib.dir}"/>

        <!-- Copy the manifest in order to replace the version token filter -->
        <copy todir="${out.conf.dir}" filtering="on">
            <fileset dir="${conf.dir}" >
                <include name="manifest"/>
            </fileset>
        </copy>

    </target>

    <!-- Generate the jar file -->
    <target name="jar" depends="prepare-jar">

        <jar jarfile="${final.jar.name}" basedir="${out.classes.dir}"
            manifest="${out.conf.dir}/manifest">

            <!-- Do not include test files in the runtime jar -->
            <exclude name="**/Test*.*"/>
            <exclude name="**/test*.*"/>

        </jar>

    </target>

    <!-- 
       ========================================================================
         Generate the javadoc
       ========================================================================
    -->
    <!-- Preparation target for the javadoc target -->
    <target name="prepare-javadoc" depends="prepare">

        <mkdir dir="${out.javadoc.dir}"/>

    </target>

    <!-- Generate the javadoc for the current Servlet API -->
    <target name="javadoc" depends="prepare-javadoc">

        <javadoc
            sourcepath="${out.src.dir}"
            packagenames="org.apache.commons.cactus.*"
            destdir="${out.javadoc.dir}"
            author="true"
            public="true"
            version="true"
            use="true"
            overview="${out.src.dir}/org/apache/commons/cactus/overview.html"
            windowtitle="${project.fullname} ${project.version} for Servlet ${servlet.api} API"
            doctitle="${project.fullname} ${project.version} for Servlet ${servlet.api} API"
            bottom="Copyright &amp;copy; ${year} Apache Software Foundation. All Rights Reserved.">

            <classpath>
                <pathelement path="${java.class.path}"/>
                <pathelement location="${servlet.jar}"/>
                <pathelement location="${junit.jar}"/>
            </classpath>

        </javadoc>

        <!-- Create a gzip file of the javadoc. This is for putting to the
             Cactus web site. It needs to be unzipped in the root document
             of the web site. This needs to be done for each Servlet API
             javadoc. This file is not intended to be redistributed as part
             of the end-user redistributable. It is simply to help create the
             web site -->

        <tar tarfile="${dist.javadoc.name}.tar" basedir="${out.javadoc.dir}"/>
        <gzip zipfile="${dist.javadoc.name}.tar.gz" src="${dist.javadoc.name}.tar"/>
        <delete file="${dist.javadoc.name}.tar"/>

    </target>

    <!-- 
       ========================================================================
         Generate the full documentation for a given Servlet API, i.e.
         web site + javadoc
       ========================================================================
    -->
    <!-- Preparation target for the doc target -->
    <target name="prepare-doc" depends="javadoc">

        <mkdir dir="${out.doc.dir}"/>
        <mkdir dir="${out.doc.dir}/images"/>

        <!-- Copy doc-book.xml to book.xml for defining the documentation web
             site and replacing token filters (year) -->
        <delete file="${xdoc.dir}/book.xml"/>
        <copy file="${xdoc.dir}/doc-book.xml" tofile="${xdoc.dir}/book.xml"
            filtering="on"/>

        <!-- Copy the images -->
        <copy todir="${out.site.dir}/images">
            <fileset dir="${xdoc.dir}/images"/>
        </copy>

    </target>

    <!-- Generate the documentation -->
    <target name="doc" depends="prepare-doc">

        <!-- Generate the documentation web site -->
        <stylebook book="${xdoc.dir}/book.xml"
            skinDirectory="${skin.dir}/jakarta.apache.org"
            targetDirectory="${out.doc.dir}">

            <classpath>
                <pathelement path="${java.class.path}"/>
                <pathelement location="${stylebook.jar}"/>
                <pathelement location="${xerces.jar}"/>
                <pathelement location="${xalan.jar}"/>
            </classpath>

        </stylebook>
    
    </target>

    <!-- 
       ========================================================================
         Generate the sample application directory structure and zip file.
         This sample application will be used to exercise Cactus functional
         tests. And of course, it serves as a sample on how to use Cactus
       ========================================================================
    -->
    <patternset id="all.sample.conf.servlet22.files">

        <include name="orion14/**"/>
        <include name="resin12/**"/>
        <include name="tomcat32/**"/>
        <include name="weblogic51/**"/>

    </patternset>

    <patternset id="all.sample.conf.servlet23.files">

        <include name="tomcat40/**"/>
        <include name="resin13/**"/>

    </patternset>

    <target name="prepare-sample" depends="jar">

        <!-- Create output directory structure and sample files in it -->
        <mkdir dir="${out.sample.dir}"/>
        <mkdir dir="${out.sample.doc.dir}"/>
        <mkdir dir="${out.sample.build.dir}"/>
        <mkdir dir="${out.sample.conf.dir}"/>
        <mkdir dir="${out.sample.src.dir}"/>
        <mkdir dir="${out.sample.web.dir}"/>

        <!-- Copy build files -->

        <copy todir="${out.sample.build.dir}" filtering="on">
            <fileset dir="${sample.build.dir}" excludes="servlet22,servlet23"/>
            <fileset dir="${sample.build.dir}/servlet${servlet.api}"/>
        </copy>

        <!-- Copy src files -->
        <copy todir="${out.sample.src.dir}/share">
            <fileset dir="${sample.src.dir}/share"/>
        </copy>
        <copy todir="${out.sample.src.dir}/servlet${servlet.api}">
            <fileset dir="${sample.src.dir}/servlet${servlet.api}"/>
        </copy>

        <!-- Copy conf files -->
        <copy todir="${out.sample.conf.dir}/test">
            <fileset dir="${sample.conf.dir}/test">
                <patternset refid="all.sample.conf.servlet${servlet.api}.files"/>
            </fileset>
        </copy>
        <copy tofile="${out.sample.conf.dir}/test/web.xml"
            file="${sample.conf.dir}/test/web.xml"/>
        <copy tofile="${out.sample.conf.dir}/test/cactus.properties"
            file="${sample.conf.dir}/test/cactus.properties"/>
        <copy todir="${out.sample.conf.dir}">
            <fileset dir="${sample.conf.dir}"/>
        </copy>

        <!-- Copy web files -->
        <copy file="${web.dir}/redirector.jsp" tofile="${out.sample.web.dir}/test/redirector.jsp"/>
        <copy todir="${out.sample.web.dir}">
            <fileset dir="${sample.web.dir}"/>
        </copy>

        <!-- Copy license file -->
        <copy file="LICENSE" tofile="${out.sample.dir}"/>

        <!-- Copy doc files -->
        <copy todir="${out.sample.doc.dir}">
            <fileset dir="${sample.doc.dir}">
              <exclude name="README"/>
            </fileset>
        </copy>
        <copy file="${sample.doc.dir}/README"
            tofile="${out.sample.dir}/README"/>

    </target>

    <target name="sample" depends="prepare-sample">
    </target>

    <!-- 
       ========================================================================
         Run the unit tests. Only run the tests that do not need a servlet
         engine. For the other tests needing a servlet engine, they are part
         of the sample application and will be exercised there
       ========================================================================
    -->
    <target name="tests-unit" depends="compile">

        <junit printsummary="yes" haltonfailure="yes" fork="yes">

            <classpath>
                <pathelement path="${java.class.path}"/>
                <pathelement location="${servlet.jar}"/>
                <pathelement location="${out.classes.dir}"/>
            </classpath>

            <formatter type="plain" usefile="false"/>

            <test name="org.apache.commons.cactus.TestAll"/>

        </junit>

    </target>

    <!-- 
       ========================================================================
         Run the functional tests
       ========================================================================
    -->
    <target name="tests-functional22-resin12-if" if="resin.home.12">
        <property name="resin.flag.12" value="-Dresin.home.12=${resin.home.12}"/>
    </target>
    <target name="tests-functional22-resin12-else" unless="resin.home.12">
        <property name="resin.flag.12" value=""/>
    </target>
    <target name="tests-functional22-tomcat32-if" if="tomcat.home.32">
        <property name="tomcat.flag.32" value="-Dtomcat.home.32=${tomcat.home.32}"/>
    </target>
    <target name="tests-functional22-tomcat32-else" unless="tomcat.home.32">
        <property name="tomcat.flag.32" value=""/>
    </target>
    <target name="tests-functional22-orion14-if" if="orion.home.14">
        <property name="orion.flag.14" value="-Dorion.home.14=${orion.home.14}"/>
    </target>
    <target name="tests-functional22-orion14-else" unless="orion.home.14">
        <property name="orion.flag.14" value=""/>
    </target>
    <target name="tests-functional22-weblogic51-if" if="weblogic.home.51">
        <property name="weblogic.flag.51" value="-Dweblogic.home.51=${weblogic.home.51}"/>
    </target>
    <target name="tests-functional22-weblogic51-else" unless="weblogic.home.51">
        <property name="weblogic.flag.51" value=""/>
    </target>

    <target name="tests-functional22-checks"
        depends="tests-functional22-resin12-if,
                 tests-functional22-resin12-else,
                 tests-functional22-tomcat32-if,
                 tests-functional22-tomcat32-else,
                 tests-functional22-orion14-if,
                 tests-functional22-orion14-else,
                 tests-functional22-weblogic51-if,
                 tests-functional22-weblogic51-else">
    </target>

    <target name="tests-functional22" depends="sample,tests-functional22-checks">

        <copy tofile="${out.sample.build.dir}/build.properties"
            file="${build.dir}/build.properties.tests" filtering="on"/>

        <java classname="org.apache.tools.ant.Main"
            dir="${out.sample.build.dir}" fork="yes" failonerror="yes">

            <arg value="${resin.flag.12}"/>
            <arg value="${tomcat.flag.32}"/>
            <arg value="${orion.flag.14}"/>
            <arg value="${weblogic.flag.51}"/>
            <arg value="tests_all"/>

            <classpath>            
                <pathelement path="${java.class.path}"/>
            </classpath>

        </java>
        
    </target>

    <target name="tests-functional23-resin13-if" if="resin.home.13">
        <property name="resin.flag.13" value="-Dresin.home.13=${resin.home.13}"/>
    </target>
    <target name="tests-functional23-resin13-else" unless="resin.home.13">
        <property name="resin.flag.13" value=""/>
    </target>
    <target name="tests-functional23-tomcat40-if" if="tomcat.home.40">
        <property name="tomcat.flag.40" value="-Dtomcat.home.40=${tomcat.home.40}"/>
    </target>
    <target name="tests-functional23-tomcat40-else" unless="tomcat.home.40">
        <property name="tomcat.flag.40" value=""/>
    </target>

    <target name="tests-functional23-checks"
        depends="tests-functional23-resin13-if,
                 tests-functional23-resin13-else,
                 tests-functional23-tomcat40-if,
                 tests-functional23-tomcat40-else">
    </target>

    <target name="tests-functional23" depends="sample,tests-functional23-checks">

        <copy tofile="${out.sample.build.dir}/build.properties"
            file="${build.dir}/build.properties.tests" filtering="on"/>

        <java classname="org.apache.tools.ant.Main"
            dir="${out.sample.build.dir}" fork="yes" failonerror="yes">

            <arg value="${resin.flag.13}"/>
            <arg value="${tomcat.flag.40}"/>
            <arg value="tests_all"/>

            <classpath>            
                <pathelement path="${java.class.path}"/>
                <pathelement location="${stylebook.jar}"/>
            </classpath>

        </java>

    </target>

    <!-- 
       ========================================================================
         Build all distributables and copies them to the dist.dir directory
       ========================================================================
    -->
    <target name="prepare-dist" depends="jar,doc,sample">

        <mkdir dir="${dist.dir}"/>
        
        <!-- Copy the custom Ant tasks jar to the servlet API dist directory
        -->
        <copy file="${final.jar.ant.name}" todir="${out.lib.dir}"/>

        <!-- Copy the license file -->
        <copy file="LICENSE" todir="${out.dist.dir}"/>

        <!-- Copy the README file -->
        <copy file="README" todir="${out.dist.dir}"/>

        <!-- Copy the version.txt file -->
        <copy file="${conf.dir}/version.txt" todir="${out.dist.dir}"
            filtering="on"/>

    </target>

    <target name="dist" depends="prepare-dist">
    
        <zip zipfile="${dist.full.name}.zip">
            <zipfileset dir="${out.dist.dir}"
                prefix="${project.name}-${servlet.api}-${DSTAMP}"/>
        </zip>

    </target>

</project>
