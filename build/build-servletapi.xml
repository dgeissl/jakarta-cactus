<?xml version="1.0"?>

<!--
  =============================================================================
    Build file for the Cactus project, for a given Servlet API. All targets
    that depend upon the Servlet API are found here.

    The following Ant tasks must be available in your ant installation
    (i.e. the Ant task themselves and their dependent jars need to be put
    in ANT_HOME/lib) :

        stylebook             [REQUIRED] For builing the documentation and
                               web site.

        junit                 [REQUIRED] For running the unit tests.

    The following properties need to be set prior to calling this build file :

        servlet.api           [REQUIRED] The Servlet API against which Cactus
                              is built. Valid values are {22, 23}

        servlet.jar           [REQUIRED] The path to the Servlet API jar for
                              the chosen Servlet API

        junit.jar             [REQUIRED] The path to the JUnit jar file.
                              Required for compiling Cactus classes.

        httpunit.jar          [REQUIRED] The path to the HttpUnit jar file.
                              Required for compiling and running the unit
                              tests.

        httpclient.jar        [REQUIRED] The path to the Commons HttpClient
                              jar file. Required for performing all Cactus
                              HTTP requests. It is also required for
                              bundling it in the the distribution.

        log4j.jar             [REQUIRED] The path to the Log4j jar file.
                              Required for bundling it in the distribution.

        dist.dir              [REQUIRED] The directories where distributable
                              files will be copied with version number
                              postfixed.

        test.port             [OPTIONAL] The port that should be used for
                              starting the servers during unit testing. This
                              should be used not to interfere with other
                              running servers. The default is 8080. This
                              property is used when running the functional tests

    Additionally and depending on the servlet engines whith which you wish to
    run your tests, you'll need to set the following kind of properties :

        <server name>.home.<version>

    Example: For Resin 2.0, you'll need to have a "resin.home.20" property
    defined and pointing to the location where Resin 2.0 is installed.

    Note:
    This script must not be called directly. It must be called by the build.xml
    script in the same directory. It will inherit numerous properties from that
    build file.
  =============================================================================
-->
<project name="Cactus build for a Servlet API" default="jar" basedir="..">

    <!--
       ========================================================================
         Set the properties related to the source tree
       ========================================================================
    -->
    <property name="src.java.servlet.dir" value="${src.dir}/framework/servlet${servlet.api}"/>

    <!--
       ========================================================================
         Set the properties related to the build area
       ========================================================================
    -->
    <!-- Destination locations for the build (relative to the basedir as
         specified in the basedir attribute of the project tag) -->
    <property name="out.dir" value="${out.root.dir}/servlet${servlet.api}"/>
    <property name="out.dist.dir" value="${out.dir}/dist"/>
    <property name="out.lib.dir" value="${out.dist.dir}/lib"/>
    <property name="out.src.dir" value="${out.dir}/src"/>
    <property name="out.classes.dir" value="${out.dir}/classes"/>
    <property name="out.doc.dir" value="${out.dist.dir}/doc"/>
    <property name="out.javadoc.dir" value="${out.doc.dir}/javadoc"/>
    <property name="out.conf.dir" value="${out.dir}/conf"/>
    <property name="out.xdoc.doc.dir" value="${out.dir}/xdocs"/>

    <!-- Destination locations for the Cactus sample application
         (also used as functional tests for Cactus) -->
    <property name="out.sample.dir" value="${out.dist.dir}/sample"/>
    <property name="out.sample.build.dir" value="${out.sample.dir}/build"/>
    <property name="out.sample.etc.dir" value="${out.sample.build.dir}/etc"/>
    <property name="out.sample.conf.dir" value="${out.sample.dir}/conf"/>
    <property name="out.sample.doc.dir" value="${out.sample.dir}/docs"/>
    <property name="out.sample.src.dir" value="${out.sample.dir}/src"/>
    <property name="out.sample.web.dir" value="${out.sample.dir}/web"/>

    <!--
       ========================================================================
        Short names of deliverables
       ========================================================================
    -->

    <!-- The full distribution name -->
    <property name="full.name" value="${project.name}-${servlet.api}"/>

    <!-- The Cactus jar file. This is the file that should be used at
         runtime by end users -->
    <property name="jar.name" value="${project.name}"/>

    <!-- The Cactus javadocs for Servlet API 2.2 and 2.3.
         These files do not need to be redistributed to end-users. It is
         only needed to put the javadoc online to the Cactus web site. -->
    <property name="javadoc.name" value="${project.name}-javadoc-${servlet.api}"/>

    <!--
       ========================================================================
         Full names of deliverables
       ========================================================================
    -->

    <!-- The full distribution name -->
    <property name="final.full.name" value="${out.dist.dir}/${full.name}"/>

    <!-- The Cactus jar file. This is the file that should be used at
         runtime by end users -->
    <property name="final.jar.name" value="${out.lib.dir}/${jar.name}.jar"/>

    <!--
       ========================================================================
         Useful file patterns for targets
       ========================================================================
    -->
    <!-- All source files of the projet. These source files will be copied
         to the destination source directory in the prepare task -->
    <patternset id="all.src.files">

        <!-- All java files -->
        <include name="**/*.java"/>

        <!-- All doc files -->
        <include name="**/package.html"/>
        <include name="**/overview.html"/>

        <!-- All conf files (including test files) -->
        <include name="**/*.txt"/>
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>

    </patternset>

    <!-- All non java files in the src directory -->
    <patternset id="all.nonjava.files">

        <!-- All conf files (including test files) -->
        <include name="**/*.txt"/>
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>

    </patternset>

    <!--
       ========================================================================
         Initialize the build. Must be called by all targets
       ========================================================================
    -->
    <target name="init">

        <echo message="--------- ${project.fullname} ${project.version} for Servlet API ${servlet.api} ---------"/>
        <echo message=""/>

        <echo message="servlet.api = ${servlet.api}"/>

        <!-- Filters -->
        <filter token="version" value="${project.version}"/>
        <filter token="year" value="${year}"/>
        <filter token="servlet.api" value="${servlet.api}"/>
        <filter token="today" value="${TODAY}"/>

        <!-- Full names of distributables. They are defined here because the
             properties need to have a valid ${DSTAMP} property set and the
             tstamp task need to be located in a target -->

        <!-- The full distribution name -->
        <property name="dist.full.name" value="${dist.dir}/${full.name}-${DSTAMP}"/>

        <!-- The Cactus javadocs for Servlet API 2.2 and 2.3.
             These files do not need to be redistributed to end-users. It is
             only needed to put the javadoc online to the Cactus web site. -->
        <property name="dist.javadoc.name" value="${out.root.dir}/${javadoc.name}-${DSTAMP}"/>

        <!-- Custom Ant task definition used in the test targets below.
             It is used for computing the "-D" parameter list
             for home directories of defined servlet engines. If a given
             property is not defined, it won't be added to the list -->
        <taskdef name="argsList" classname="org.apache.commons.cactus.ant.ArgListTask">
            <classpath>
                <pathelement location="${final.jar.ant.name}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
        </taskdef>

    </target>

    <!--
       ========================================================================
         Help on usage. List available targets
       ========================================================================
    -->
    <target name="usage" depends="init">

        <echo message=""/>
        <echo message="${project.fullname} build file for Servlet API ${servlet.api}"/>
        <echo message="------------------------------------------------------"/>
        <echo message=""/>
        <echo message=" Available targets are :"/>
        <echo message=""/>
        <echo message=" jar              --> generates the jar file (default)"/>
        <echo message=" doc              --> generates the docs (javadoc, ...)"/>
        <echo message=" tests-unit       --> run the unit tests"/>
        <echo message=" tests-functional --> run the functional tests"/>
        <echo message=" sample           --> generate the sample application"/>
        <echo message=" dist             --> generate the distributables"/>
        <echo message=""/>

    </target>

    <!--
       ========================================================================
         Prepare the output directory by copying the source files into it
       ========================================================================
    -->
    <target name="prepare" depends="init">

        <mkdir dir="${out.src.dir}"/>

        <!-- Copy all source files to destination dir. Apply the filters in
             order to replace the tokens for the copyright year and the
             version -->
        <copy todir="${out.src.dir}" filtering="on">
            <fileset dir="${src.java.share.dir}">
                <patternset refid="all.src.files"/>
            </fileset>
            <fileset dir="${src.java.servlet.dir}">
                <patternset refid="all.src.files"/>
            </fileset>
            <fileset dir="${src.java.test.share.dir}">
                <patternset refid="all.src.files"/>
            </fileset>
        </copy>

    </target>

    <!--
       ========================================================================
         Compiles the source directory
       ========================================================================
    -->
    <!-- Preparation target for the compile target -->
    <target name="prepare-compile" depends="prepare">

        <mkdir dir="${out.classes.dir}"/>

    </target>

    <!-- Run the java compilation -->
    <target name="compile" depends="prepare-compile">

        <javac srcdir="${out.src.dir}"
            destdir="${out.classes.dir}"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}">

            <!-- Exclude all files that are not .java source files -->

            <!-- All doc files -->
            <exclude name="**/package.html"/>
            <exclude name="**/overview.html"/>

            <!-- All conf files (including test files) -->
            <exclude name="**/*.txt"/>
            <exclude name="**/*.xml"/>
            <exclude name="**/*.properties"/>

            <classpath>
                <pathelement location="${servlet.jar}"/>
                <pathelement location="${httpunit.jar}"/>
                <pathelement location="${log4j.jar}"/>
                <pathelement location="${httpclient.jar}"/>
                <pathelement location="${junit.jar}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>

        </javac>

        <!-- Copies non java files that need to be in the classes directory -->
        <copy todir="${out.classes.dir}">
            <fileset dir="${src.java.share.dir}">
                <patternset refid="all.nonjava.files"/>
            </fileset>
            <fileset dir="${src.java.servlet.dir}">
                <patternset refid="all.nonjava.files"/>
            </fileset>
        </copy>

    </target>

    <!--
       ========================================================================
         Create the runtime jar file
       ========================================================================
    -->
    <!-- Preparation target for the jar target -->
    <target name="prepare-jar" depends="compile">

        <mkdir dir="${out.conf.dir}"/>
        <mkdir dir="${out.lib.dir}"/>

        <!-- Copy the manifest in order to replace the version token filter -->
        <copy todir="${out.conf.dir}" filtering="on">
            <fileset dir="${conf.dir}" >
                <include name="manifest"/>
            </fileset>
        </copy>

    </target>

    <!-- Generate the jar file -->
    <target name="jar" depends="prepare-jar">

        <jar jarfile="${final.jar.name}" manifest="${out.conf.dir}/manifest">

            <fileset dir="${out.classes.dir}">
                <!-- Do not include test files in the runtime jar -->
                <exclude name="**/Test*.*"/>
                <exclude name="**/test*.*"/>
            </fileset>

            <fileset dir="${sample.conf.dir}/test/share">
                <include name="log_*.properties"/>
            </fileset>

        </jar>

    </target>

    <!--
       ========================================================================
         Generate the javadoc
       ========================================================================
    -->
    <!-- Preparation target for the javadoc target -->
    <target name="prepare-javadoc" depends="prepare">

        <mkdir dir="${out.javadoc.dir}"/>

    </target>

    <!-- Generate the javadoc for the current Servlet API -->
    <target name="javadoc" depends="prepare-javadoc">

        <javadoc
            sourcepath="${out.src.dir}"
            packagenames="org.apache.commons.cactus.*"
            destdir="${out.javadoc.dir}"
            author="true"
            public="true"
            version="true"
            use="true"
            overview="${out.src.dir}/org/apache/commons/cactus/overview.html"
            windowtitle="${project.fullname} ${project.version} for Servlet ${servlet.api} API"
            doctitle="${project.fullname} ${project.version} for Servlet ${servlet.api} API"
            bottom="Copyright &amp;copy; ${year} Apache Software Foundation. All Rights Reserved.">

            <classpath>
                <pathelement location="${servlet.jar}"/>
                <pathelement location="${httpunit.jar}"/>
                <pathelement location="${log4j.jar}"/>
                <pathelement location="${httpclient.jar}"/>
                <pathelement location="${junit.jar}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>

        </javadoc>

        <!-- Create a gzip file of the javadoc. This is for putting to the
             Cactus web site. It needs to be unzipped in the root document
             of the web site. This needs to be done for each Servlet API
             javadoc. This file is not intended to be redistributed as part
             of the end-user redistributable. It is simply to help create the
             web site -->

        <tar tarfile="${dist.javadoc.name}.tar" basedir="${out.javadoc.dir}"/>
        <gzip zipfile="${dist.javadoc.name}.tar.gz" src="${dist.javadoc.name}.tar"/>
        <delete file="${dist.javadoc.name}.tar"/>

    </target>

    <!--
       ========================================================================
         Generate the full documentation for a given Servlet API, i.e.
         web site + javadoc
       ========================================================================
    -->
    <!-- Preparation target for the doc target -->
    <target name="prepare-doc" depends="javadoc">

        <mkdir dir="${out.xdoc.doc.dir}"/>
        <mkdir dir="${out.doc.dir}"/>
        <mkdir dir="${out.doc.dir}/images"/>

        <!-- Custom Ant task definitions -->
        <taskdef name="cvslog" classname="org.apache.commons.cactus.ant.ChangeLogTask">
            <classpath>
                <pathelement location="${final.jar.ant.name}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
        </taskdef>

        <!-- Generate cvs log -->
        <cvslog users="${xdoc.dir}/cvslog/users.properties" work="${xdoc.dir}"
            output="${xdoc.dir}/cvslog/cvslog.xml" elapsed="15">

            <fileset dir="${xdoc.dir}">
                <exclude name="*book.xml"/>
                <exclude name="todo.xml"/>
                <exclude name="changes.xml"/>
                <exclude name="**/cvslog.xml"/>
                <include name="**/*.xml"/>
            </fileset>

        </cvslog>

        <!-- Copy doc-book.xml to book.xml for defining the documentation web
             site and replacing token filters (year, ...) -->
        <copy file="${xdoc.dir}/doc-book.xml" tofile="${out.xdoc.doc.dir}/book.xml"
            filtering="on"/>

        <!-- Copy all remaining files from ${xdoc.dir} to ${out.xdoc.doc.dir} -->
        <copy todir="${out.xdoc.doc.dir}" filtering="on">
            <fileset dir="${xdoc.dir}">
                <exclude name="*-book.xml"/>
                <exclude name="misc/**"/>
            </fileset>
        </copy>

        <!-- Copy the images -->
        <copy todir="${out.doc.dir}/images">
            <fileset dir="${xdoc.dir}/images"/>
        </copy>

    </target>

    <!-- Generate the documentation -->
    <target name="doc" depends="prepare-doc">

        <!-- Generate the documentation web site -->
        <stylebook book="${out.xdoc.doc.dir}/book.xml"
            skinDirectory="${skin.dir}/jakarta.apache.org"
            targetDirectory="${out.doc.dir}">

            <classpath>
                <pathelement path="${java.class.path}"/>
            </classpath>

        </stylebook>

    </target>

    <!--
       ========================================================================
         Generate the sample application directory structure and zip file.
         This sample application will be used to exercise Cactus functional
         tests. And of course, it serves as a sample on how to use Cactus
       ========================================================================
    -->
    <target name="prepare-sample" depends="jar">

        <!-- Create output directory structure and sample files in it -->
        <mkdir dir="${out.sample.dir}"/>
        <mkdir dir="${out.sample.doc.dir}"/>
        <mkdir dir="${out.sample.build.dir}"/>
        <mkdir dir="${out.sample.conf.dir}/test"/>
        <mkdir dir="${out.sample.src.dir}"/>
        <mkdir dir="${out.sample.web.dir}"/>

        <!-- Copy build files -->
        <copy todir="${out.sample.build.dir}" filtering="on">
            <fileset dir="${sample.build.dir}/share"/>
            <fileset dir="${sample.build.dir}/servlet${servlet.api}"/>
        </copy>

        <!-- Copy src files -->
        <copy todir="${out.sample.src.dir}/share">
            <fileset dir="${sample.src.dir}/share"/>
        </copy>
        <copy todir="${out.sample.src.dir}/servlet${servlet.api}">
            <fileset dir="${sample.src.dir}/servlet${servlet.api}"/>
        </copy>

        <!-- Copy conf files -->
        <copy todir="${out.sample.conf.dir}/test">
            <fileset dir="${sample.conf.dir}/test/share"/>
            <fileset dir="${sample.conf.dir}/test/servlet${servlet.api}"/>
        </copy>
        <copy todir="${out.sample.conf.dir}">
            <fileset dir="${sample.conf.dir}">
                <include name="web.xml"/>
                <include name="manifest"/>
            </fileset>
        </copy>

        <!-- Copy web files -->
        <copy file="${web.dir}/redirector.jsp" tofile="${out.sample.web.dir}/test/redirector.jsp"/>
        <copy todir="${out.sample.web.dir}">
            <fileset dir="${sample.web.dir}"/>
        </copy>

        <!-- Copy license file -->
        <copy file="LICENSE" tofile="${out.sample.dir}"/>

        <!-- Copy doc files -->
        <copy todir="${out.sample.doc.dir}">
            <fileset dir="${sample.doc.dir}">
              <exclude name="README"/>
            </fileset>
        </copy>
        <copy file="${sample.doc.dir}/README"
            tofile="${out.sample.dir}/README"/>

    </target>

    <target name="sample" depends="prepare-sample">
    </target>

    <!--
       ========================================================================
         Run the unit tests. Only run the tests that do not need a servlet
         engine. For the other tests needing a servlet engine, they are part
         of the sample application and will be exercised there
       ========================================================================
    -->
    <target name="tests-unit" depends="compile">

        <junit printsummary="yes" haltonfailure="yes" fork="yes">

            <classpath>
                <pathelement location="${servlet.jar}"/>
                <pathelement location="${httpunit.jar}"/>
                <pathelement location="${httpclient.jar}"/>
                <pathelement location="${out.classes.dir}"/>
                <pathelement path="${junit.jar}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>

            <formatter type="plain" usefile="false"/>

            <test name="org.apache.commons.cactus.TestAll"/>

        </junit>

    </target>

    <!--
       ========================================================================
         Run the functional tests
       ========================================================================
    -->
    <target name="tests-functional22" depends="sample">

        <argsList property="test22.args.list">
            <property name="resin.home.12"/>
            <property name="resin.home.20"/>
            <property name="tomcat.home.32"/>
            <property name="tomcat.home.33"/>
            <property name="orion.home.14"/>
            <property name="orion.home.15"/>
            <property name="weblogic.home.51"/>
            <property name="enhydra.home.31"/>
            <property name="test.port"/>
        </argsList>

        <java classname="org.apache.tools.ant.Main"
            dir="${out.sample.build.dir}" fork="yes" failonerror="yes">

            <!-- Pass all required properties -->
            <arg value="-Dservlet.jar=${servlet.jar}"/>
            <arg value="-Dcactus.jar=../lib/${jar.name}.jar"/>
            <arg value="-Dcactus.ant.jar=../../../${jar.ant.name}.jar"/>
            <arg value="-Djunit.jar=${junit.jar}"/>
            <arg value="-Dlog4j.jar=${log4j.jar}"/>
            <arg value="-Dhttpclient.jar=${httpclient.jar}"/>

            <!-- Pass all servlet engine properties -->
            <arg line="${test22.args.list}"/>
            <arg value="tests_all"/>

            <classpath>
                <pathelement path="${java.class.path}"/>
            </classpath>

        </java>

    </target>

    <target name="tests-functional23" depends="sample">

        <argsList property="test23.args.list">
            <property name="resin.home.13"/>
            <property name="resin.home.20"/>
            <property name="tomcat.home.40"/>
            <property name="orion.home.14"/>
            <property name="orion.home.15"/>
            <property name="test.port"/>
        </argsList>

        <java classname="org.apache.tools.ant.Main"
            dir="${out.sample.build.dir}" fork="yes" failonerror="yes">

            <!-- Pass all required properties -->
            <arg value="-Dservlet.jar=${servlet.jar}"/>
            <arg value="-Dcactus.jar=../lib/${jar.name}.jar"/>
            <arg value="-Dcactus.ant.jar=../../../${jar.ant.name}.jar"/>
            <arg value="-Djunit.jar=${junit.jar}"/>
            <arg value="-Dlog4j.jar=${log4j.jar}"/>
            <arg value="-Dhttpclient.jar=${httpclient.jar}"/>

            <!-- Pass all servlet engine properties -->
            <arg line="${test23.args.list}"/>
            <arg value="tests_all"/>

            <classpath>
                <pathelement path="${java.class.path}"/>
            </classpath>

        </java>

    </target>

    <!--
       ========================================================================
         Build all distributables and copies them to the dist.dir directory
       ========================================================================
    -->
    <target name="prepare-dist" depends="jar,doc,sample">

        <mkdir dir="${dist.dir}"/>

        <!-- Copy the custom Ant tasks jar to the servlet API dist directory
        -->
        <copy file="${final.jar.ant.name}" todir="${out.lib.dir}"/>

        <!-- Copy the license file -->
        <copy file="LICENSE" todir="${out.dist.dir}"/>

        <!-- Copy the README file -->
        <copy file="README" todir="${out.dist.dir}"/>

        <!-- Copy the version.txt file -->
        <copy file="${conf.dir}/version.txt" todir="${out.dist.dir}"
            filtering="on"/>

    </target>

    <target name="dist" depends="prepare-dist">

        <!-- Copy the jars that need to be bundled in the distribution in
             the ${out.lib.dir} directory -->
        <copy todir="${out.lib.dir}" file="${log4j.jar}"/>
        <copy todir="${out.lib.dir}" file="${junit.jar}"/>
        <copy todir="${out.lib.dir}" file="${httpclient.jar}"/>

        <zip zipfile="${dist.full.name}.zip">
            <zipfileset dir="${out.dist.dir}"
                prefix="${project.name}-${servlet.api}-${DSTAMP}">

                <exclude name="**/build.properties"/>
                <exclude name="**/*.log"/>
                <exclude name="${out.dir}"/>
            </zipfileset>
        </zip>

    </target>

</project>
