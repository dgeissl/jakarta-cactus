<?xml version="1.0"?>

<!--
  =============================================================================
    Build file for the Cactus project. This build file will call the
    build-servletapi.xml build file for several Servlet API (2.2 and 2.3).

    The following Ant tasks must be available in your ant installation
    (i.e. the Ant task themselves and their dependent jars need to be put
    in ANT_HOME/lib) :

        stylebook             [REQUIRED] For builing the documentation and
                               web site.

        junit                 [REQUIRED] For running the unit tests.

        checkstyle            [REQUIRED] For checking coding and naming
                              conventions.

    The following properties need to be set in a ./build.properties or
    or ${user.home}/build.properties file :

        cactus.ant.jar        [REQUIRED] The path to the Cactus Ant jar.

        servlet22.jar         [OPTIONAL] The path to the Servlet API 2.2 jar.
                              Required only if you want to build against this
                              API

        servlet23.jar         [OPTIONAL] The path to the Servlet API 2.3 jar.
                              Required only if you want to build against this
                              API

        junit.jar             [REQUIRED] The path to the JUnit jar file.
                              Required for compiling Cactus classes.

        httpunit.jar          [REQUIRED] The path to the HttpUnit jar file.
                              Required for compiling and running the unit
                              tests (used in build-servletapi.xml).

        httpclient.jar        [REQUIRED] The path to the Commons HttpClient
                              jar file. Required for performing all Cactus
                              HTTP requests. It is also required for
                              bundling it in the the distribution.

        log4j.jar             [REQUIRED] The path to the Log4j jar file.
                              Required for bundling it in the distribution
                              (used in build-servletapi.xml).

        aspectjrt.jar         [REQUIRED] The path to the AspectJ runtime jar.
                              It is used by Cactus for logging entries and
                              exit of methods, configuration checking, ...)

        dist.dir              [OPTIONAL] The directories where distributable
                              files will be copied with version number
                              postfixed. Required for the dist target only.
                              Default is <root>/dist

        test.port             [OPTIONAL] The port that should be used for
                              starting the servers during unit testing. This
                              should be used not to interfere with other
                              running servers. The default is 8080. This
                              property is used when running the functional tests

    Additionally and depending on the servlet engines whith which you wish to
    run your tests, you'll need to set the following kind of properties :

        <server name>.home.<version>

    Example: For Resin 2.0, you'll need to have a "resin.home.20" property
    defined and pointing to the location where Resin 2.0 is installed.

    This script should be started with the following command line :

        ant <target>

    Run "ant usage" to get a list of available targets. The default target is
    "jar"
  =============================================================================
-->
<project name="Cactus" default="jar" basedir="..">

    <!-- Give user a chance to override without editing this file
         (and without typing -D each time it compiles it) -->
    <property file="build/build.properties" />
    <property file="${user.home}/build.properties" />

    <!-- Generic project properties -->

    <property name="project.version" value="1.3dev"/>
    <property name="project.name.text" value="Cactus"/>
    <property name="project.name.short" value="cactus"/>
    <property name="project.name.prefix" value="jakarta-"/>

    <!-- Miscellaneous settings -->
    <property name="year" value="2001-2002"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="off"/>
    <property name="deprecation" value="off"/>

    <!--
       ========================================================================
         Set the properties related to the source tree
       ========================================================================
    -->
    <!-- Source locations for the build -->
    <property name="src.dir" value="src"/>
    <property name="build.dir" value="build"/>
    <property name="src.java.share.dir" value="${src.dir}/framework/share"/>
    <property name="src.java.test.share.dir" value="${src.dir}/test/share"/>
    <property name="conf.dir" value="conf"/>
    <property name="doc.root.dir" value="docs"/>
    <property name="doc.dir" value="${doc.root.dir}/framework"/>
    <property name="xdoc.dir" value="${doc.dir}/xdocs"/>
    <property name="skin.dir" value="${doc.dir}/skins"/>
    <property name="web.dir" value="web"/>

    <!-- Source locations for the Cactus sample application -->
    <property name="sample.src.dir" value="${src.dir}/sample"/>
    <property name="sample.build.dir" value="${conf.dir}/sample/build"/>
    <property name="sample.conf.dir" value="${conf.dir}/sample/conf"/>
    <property name="sample.web.dir" value="${web.dir}/sample"/>
    <property name="sample.doc.dir" value="${doc.root.dir}/sample"/>

    <!--
       ========================================================================
         Set the properties related to the build area
       ========================================================================
    -->
    <!-- Destination locations for the build (relative to the basedir as
         specified in the basedir attribute of the project tag) -->
    <property name="out.root.dir" value="target"/>
    <property name="out.site.dir" value="${out.root.dir}/doc"/>
    <property name="out.xdoc.site.dir" value="${out.root.dir}/xdocs"/>

    <!--
       ========================================================================
         Default values for properties not defined in build.properties
       ========================================================================
    -->
    <property name="dist.dir" value="dist"/>

    <!--
       ========================================================================
        Short names of deliverables
       ========================================================================
    -->

    <!-- The full sources of Cactus in a zip file -->
    <property name="src.name" value="${project.name.short}-src"/>

    <!-- The Cactus web site in a gzip file (without the Javadoc but
         with a link pointing to javadoc : <htdocs>/servletXX/index.html -->
    <property name="site.name" value="${project.name.short}-website"/>

    <!--
       ========================================================================
         Full names of deliverables
       ========================================================================
    -->

    <!-- The Cactus web site in a gzip file (without the Javadoc but
         with a link pointing to javadoc : <htdocs>/servletXX/index.html -->
    <property name="final.site.name" value="${out.root.dir}/${site.name}"/>

    <!--
       ========================================================================
         Useful file patterns for targets
       ========================================================================
    -->
    <!-- All source files of the projet. These source files will be copied
         to the destination source directory in the prepare task -->
    <patternset id="all.src.files">

        <!-- All java files -->
        <include name="**/*.java"/>

        <!-- All doc files -->
        <include name="**/package.html"/>
        <include name="**/overview.html"/>

        <!-- All conf files (including test files) -->
        <include name="**/*.txt"/>
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>

    </patternset>

    <!--
       ========================================================================
         Initialize the build. Must be called by all targets
       ========================================================================
    -->
    <target name="check_servlet22" unless="servlet22.jar.present">

        <echo message=""/>
        <echo message="*********************************************************"/>
        <echo message="WARNING : The 'servlet22.jar' property has not been set."/>
        <echo message="          No output will be generated for Servlet API 2.2"/>
        <echo message="*********************************************************"/>
        <echo message=""/>

    </target>

    <target name="check_servlet23" unless="servlet23.jar.present">

        <echo message=""/>
        <echo message="*********************************************************"/>
        <echo message="WARNING : The 'servlet23.jar' property has not been set."/>
        <echo message="          No output will be generated for Servlet API 2.3"/>
        <echo message="*********************************************************"/>
        <echo message=""/>

    </target>

    <target name="check_required">
      <echo message="Checking required properties."/>
      <echo message="cactus.ant.jar = ${cactus.ant.jar}"/>
      <echo message="junit.jar      = ${junit.jar}"/>
      <echo message="httpunit.jar   = ${httpunit.jar}"/>
      <echo message="httpclient.jar = ${httpclient.jar}"/>
      <echo message="log4j.jar      = ${log4j.jar}"/>
      <echo message="aspectjrt.jar  = ${aspectjrt.jar}"/>
      <condition property="required_properites_set">
        <and>
          <available file="${cactus.ant.jar}"/>
          <available file="${junit.jar}"/>
          <available file="${httpunit.jar}"/>
          <available file="${httpclient.jar}"/>
          <available file="${log4j.jar}"/>
          <available file="${aspectjrt.jar}"/>
        </and>
      </condition>
      <echo message="All requirements met = ${required_properites_set}"/>
      <antcall target="enforce_requirements"/>
    </target>
    
    <target name="enforce_requirements" unless="required_properites_set">
      <fail>
        You are missing a required property. The following properties need to be
        set in a ./build.properties or ${user.home}/build.properties file :

        cactus.ant.jar        [REQUIRED] The path to the Cactus Ant jar.

        servlet22.jar         [OPTIONAL] The path to the Servlet API 2.2 jar.
                              Required only if you want to build against this
                              API

        servlet23.jar         [OPTIONAL] The path to the Servlet API 2.3 jar.
                              Required only if you want to build against this
                              API

        junit.jar             [REQUIRED] The path to the JUnit jar file.
                              Required for compiling Cactus classes.

        httpunit.jar          [REQUIRED] The path to the HttpUnit jar file.
                              Required for compiling and running the unit
                              tests (used in build-servletapi.xml).

        httpclient.jar        [REQUIRED] The path to the Commons HttpClient
                              jar file. Required for performing all Cactus
                              HTTP requests. It is also required for
                              bundling it in the the distribution.

        log4j.jar             [REQUIRED] The path to the Log4j jar file.
                              Required for bundling it in the distribution
                              (used in build-servletapi.xml).

        aspectjrt.jar         [REQUIRED] The path to the AspectJ runtime jar.
                              It is used by Cactus for logging entries and
                              exit of methods, configuration checking, ...)

        dist.dir              [OPTIONAL] The directories where distributable
                              files will be copied with version number
                              postfixed. Required for the dist target only.
                              Default is root/dist

        test.port             [OPTIONAL] The port that should be used for
                              starting the servers during unit testing. This
                              should be used not to interfere with other
                              running servers. The default is 8080. This
                              property is used when running the functional tests
                              
      </fail>
    </target>
    
    <target name="init" depends="check_required">

        <tstamp/>

        <echo message="--------- ${project.name.text} ${project.version} ---------"/>
        <echo message=""/>

        <echo message="java.class.path = ${java.class.path}"/>
        <echo message=""/>
        <echo message="java.home = ${java.home}"/>
        <echo message="user.home = ${user.home}"/>
        <echo message="ant.home = ${ant.home}"/>
        <echo message=""/>

        <!-- Full names of distributables. They are defined here because the
             properties need to have a valid ${DSTAMP} property set and the
             tstamp task need to be located in a target -->

        <!-- The full sources of Cactus in a zip file -->
        <property name="dist.src.name"
            value="${dist.dir}/${project.name.prefix}${src.name}-${DSTAMP}.zip"/>

        <!-- The Cactus web site in a gzip file (without the Javadoc but
             with a link pointing to javadoc : <htdocs>/servletXX/index.html -->
        <property name="dist.site.name" value="${dist.dir}/${project.name.prefix}${site.name}"/>

        <!-- Filters -->
        <filter token="version" value="${project.version}"/>
        <filter token="year" value="${year}"/>
        <filter token="today" value="${TODAY}"/>

        <!-- Check availabilities -->
        <available file="${servlet22.jar}" property="servlet22.jar.present"/>
        <available file="${servlet23.jar}" property="servlet23.jar.present"/>

        <!-- Emit warning if need properties have not been set -->
        <antcall target="check_servlet22"/>
        <antcall target="check_servlet23"/>

    </target>

    <!--
       ========================================================================
         Help on usage. List available targets
       ========================================================================
    -->
    <target name="usage" depends="init">

        <echo message=""/>
        <echo message="${project.name.text} build file"/>
        <echo message="------------------------------------------------------"/>
        <echo message=""/>
        <echo message=" Available targets are :"/>
        <echo message=""/>
        <echo message=" jar              --> generates the jar file (default)"/>
        <echo message=" doc              --> generates the docs (javadoc, ...)"/>
        <echo message=" site             --> generate the web site"/>
        <echo message=" sample           --> generate the sample application"/>
        <echo message=" tests-unit       --> run the unit tests"/>
        <echo message=" tests-functional --> run the functional tests"/>
        <echo message=" tests            --> run both the unit and functional tests"/>
        <echo message=" clean            --> cleans up the build directory"/>
        <echo message=" all              --> do it all at once (clean, jar, sample"/>
        <echo message="                      source, doc, site, tests, dist)"/>
        <echo message=" dist             --> version all distributables and copies"/>
        <echo message="                      them to the dist.dir directory"/>
        <echo message=" deploy-site      --> deploy the Cactus web site to it's home"/>
        <echo message="                      page on Jakarta"/>
        <echo message=""/>

    </target>

    <!--
       ========================================================================
         Create the runtime jar file
       ========================================================================
    -->
    <target name="jar.22" depends="init" if="servlet22.jar.present">
        <ant antfile="build/build-servletapi.xml" target="jar">
            <property name="servlet.api" value="22"/>
            <property name="servlet.jar" value="${servlet22.jar}"/>
        </ant>
    </target>

    <target name="jar.23" depends="init" if="servlet23.jar.present">
        <ant antfile="build/build-servletapi.xml" target="jar">
            <property name="servlet.api" value="23"/>
            <property name="servlet.jar" value="${servlet23.jar}"/>
        </ant>
    </target>

    <target name="jar" depends="jar.22,jar.23">
    </target>

    <!--
       ========================================================================
         Generate the full documentation for a given Servlet API, i.e.
         web site + javadoc + README
       ========================================================================
    -->
    <target name="doc.22" depends="init" if="servlet22.jar.present">
        <ant antfile="build/build-servletapi.xml" target="doc">
            <property name="servlet.api" value="22"/>
            <property name="servlet.jar" value="${servlet22.jar}"/>
        </ant>
    </target>

    <target name="doc.23" depends="init" if="servlet23.jar.present">
        <ant antfile="build/build-servletapi.xml" target="doc">
            <property name="servlet.api" value="23"/>
            <property name="servlet.jar" value="${servlet23.jar}"/>
        </ant>
    </target>

    <target name="doc" depends="jar,doc.22,doc.23">
    </target>

    <!--
       ========================================================================
         Generate the web site
       ========================================================================
    -->
    <target name="prepare-site" depends="jar">

        <mkdir dir="${out.xdoc.site.dir}"/>
        <mkdir dir="${out.site.dir}"/>
        <mkdir dir="${out.site.dir}/images"/>

        <!-- Custom Ant task definitions -->
        <taskdef name="cvslog" classname="org.apache.cactus.ant.ChangeLogTask">
            <classpath>
                <pathelement location="${cactus.ant.jar}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
        </taskdef>

        <!-- Generate cvs log -->
        <cvslog users="${xdoc.dir}/cvslog/users.properties" work="${xdoc.dir}"
            output="${xdoc.dir}/cvslog/cvslog.xml" elapsed="15">

            <fileset dir="${xdoc.dir}">
                <exclude name="*book.xml"/>
                <exclude name="todo.xml"/>
                <exclude name="changes.xml"/>
                <exclude name="**/cvslog.xml"/>
                <include name="**/*.xml"/>
            </fileset>

        </cvslog>

        <!-- Copy site-book.xml to book.xml for defining the web site content
             and replacing token filters (year) -->
        <copy file="${xdoc.dir}/site-book.xml" tofile="${out.xdoc.site.dir}/book.xml"
            filtering="on"/>

        <!-- Copy all remaining files from ${xdoc.dir} to ${out.xdoc.site.dir} -->
        <copy todir="${out.xdoc.site.dir}" filtering="on">
            <fileset dir="${xdoc.dir}">
                <exclude name="*-book.xml"/>
                <exclude name="misc/**"/>
            </fileset>
        </copy>

        <!-- Copy the version.txt file -->
        <copy file="${conf.dir}/version.txt"
            tofile="${out.site.dir}/version.txt" filtering="on"/>

        <!-- Copy the images -->
        <copy todir="${out.site.dir}/images">
            <fileset dir="${xdoc.dir}/images"/>
        </copy>

        <!-- Note that we do not copy the javadoc to the web site. This is
             because the web site need to evolve independently of the javadoc
             for a given version of Cactus. In other words, the javadoc on
             the web site must not change until a new release of Cactus is
             out -->

    </target>

    <!-- Generate the web site -->
    <target name="site" depends="prepare-site">

        <stylebook book="${out.xdoc.site.dir}/book.xml"
            skinDirectory="${skin.dir}/jakarta.apache.org"
            targetDirectory="${out.site.dir}">

            <classpath>
                <pathelement path="${java.class.path}"/>
            </classpath>

        </stylebook>

        <!-- Create the gzipped web site -->
        <tar tarfile="${final.site.name}-${DSTAMP}.tar" basedir="${out.site.dir}"/>
        <gzip zipfile="${final.site.name}-${DSTAMP}.tar.gz" src="${final.site.name}-${DSTAMP}.tar"/>
        <delete file="${final.site.name}-${DSTAMP}.tar"/>

    </target>

    <!--
       ========================================================================
         Generate the sample application directory structure and zip file.
         This sample application will be used to exercise Cactus functional
         tests. And of course, it serves as a sample on how to use Cactus
       ========================================================================
    -->
    <target name="sample.22" depends="init" if="servlet22.jar.present">
        <ant antfile="build/build-servletapi.xml" target="sample">
            <property name="servlet.api" value="22"/>
            <property name="servlet.jar" value="${servlet22.jar}"/>
        </ant>
    </target>

    <target name="sample.23" depends="init" if="servlet23.jar.present">
        <ant antfile="build/build-servletapi.xml" target="sample">
            <property name="servlet.api" value="23"/>
            <property name="servlet.jar" value="${servlet23.jar}"/>
        </ant>
    </target>

    <target name="sample" depends="jar,sample.22,sample.23">
    </target>

    <!--
       ========================================================================
         Remove all build generated files
       ========================================================================
    -->
    <target name="clean" depends="init">

        <delete>
            <fileset dir=".">
                <include name="**/*.bak"/>
                <include name="${xdoc.dir}/cvslog/cvslog.xml"/>
                <include name="**/*.log"/>
            </fileset>
            <fileset dir="." includes="**/*~" defaultexcludes="no"/>
        </delete>

        <!-- Remove the out directory -->
        <delete dir="${out.root.dir}"/>

    </target>

    <!--
       ========================================================================
         Run the unit tests. Only run the tests that do not need a servlet
         engine. For the other tests needing a servlet engine, they are part
         of the sample application and will be exercised there
       ========================================================================
    -->
    <target name="tests-unit.22" depends="init" if="servlet22.jar.present">
        <ant antfile="build/build-servletapi.xml" target="tests-unit">
            <property name="servlet.api" value="22"/>
            <property name="servlet.jar" value="${servlet22.jar}"/>
        </ant>
    </target>

    <target name="tests-unit.23" depends="init" if="servlet23.jar.present">
        <ant antfile="build/build-servletapi.xml" target="tests-unit">
            <property name="servlet.api" value="23"/>
            <property name="servlet.jar" value="${servlet23.jar}"/>
        </ant>
    </target>

    <target name="tests-unit" depends="tests-unit.22,tests-unit.23">
    </target>

    <!--
       ========================================================================
         Run the functional tests
       ========================================================================
    -->
    <target name="tests-functional.22" depends="init" if="servlet22.jar.present">
        <ant antfile="build/build-servletapi.xml" target="tests-functional22">
            <property name="servlet.api" value="22"/>
            <property name="servlet.jar" value="${servlet22.jar}"/>
        </ant>
    </target>

    <target name="tests-functional.23" depends="init" if="servlet23.jar.present">
        <ant antfile="build/build-servletapi.xml" target="tests-functional23">
            <property name="servlet.api" value="23"/>
            <property name="servlet.jar" value="${servlet23.jar}"/>
        </ant>
    </target>

    <target name="tests-functional" depends="sample,tests-functional.22,tests-functional.23">
    </target>

    <!--
       ========================================================================
         Run both the unit and functional tests
       ========================================================================
    -->
    <target name="tests" depends="tests-unit,tests-functional">
    </target>

    <!--
       ========================================================================
         Build all distributables and copies them to the dist.dir directory
       ========================================================================
    -->
    <target name="dist.22" depends="init" if="servlet22.jar.present">

        <ant antfile="build/build-servletapi.xml" target="dist">
            <property name="servlet.api" value="22"/>
            <property name="servlet.jar" value="${servlet22.jar}"/>
        </ant>

    </target>

    <target name="dist.23" depends="init" if="servlet23.jar.present">

        <ant antfile="build/build-servletapi.xml" target="dist">
            <property name="servlet.api" value="23"/>
            <property name="servlet.jar" value="${servlet23.jar}"/>
        </ant>

    </target>

    <!-- Do not call the 'clean' target. This is needed for GUMP nightly
         builds. See the description of the 'gump' target -->
    <target name="dist.gump" depends="jar,sample,doc,site,dist.22,dist.23">

        <mkdir dir="${dist.dir}"/>

        <!-- Package the sources in the distribution -->
        <zip zipfile="${dist.src.name}">

            <zipfileset dir="." prefix="${project.name.prefix}${project.name.short}-${project.version}">

                <include name="anttasks/src/**"/>
                <include name="anttasks/conf/**"/>
                <include name="anttasks/LICENSE"/>
                <include name="anttasks/README"/>
                <include name="anttasks/build.properties.sample"/>
                <include name="anttasks/build.xml"/>

                <include name="${build.dir}/**"/>
                <include name="${conf.dir}/**"/>
                <include name="${doc.root.dir}/**"/>
                <include name="${src.dir}/**"/>
                <include name="${web.dir}/**"/>
                <include name="LICENSE"/>
                <include name="README"/>

                <exclude name="**/build.properties"/>
                <exclude name="**/*.log"/>
                <exclude name="**/*.bak"/>
                <exclude name="**/*.class"/>
                <exclude name="**/.nbattrs"/>

            </zipfileset>
        </zip>

    </target>

    <!-- Perform a clean before generating the distribution. This is to
         make sure there is no side effect coming from previously
         generatred files -->
    <target name="dist" depends="clean,dist.gump">
    </target>

    <!--
       ========================================================================
         Do it all
       ========================================================================
    -->
    <target name="all" depends="clean,jar,sample,doc,site,tests,dist">
    </target>

    <!--
       ========================================================================
         Deploy the web site to the Jakarta server, using the 'scp'
         and 'ssh' commands. The variable "username" need to be passed to Ant
         when calling this target.

         Ex: ant -Dusername=vmassol deploy-site

       ========================================================================
    -->
    <target name="deploy-site" depends="clean,site" if="username">

        <property name="homepage" value="/www/jakarta.apache.org/cactus"/>

        <exec dir="." executable="scp">
            <arg value="${final.site.name}-${DSTAMP}.tar.gz"/>
            <arg value="${username}@jakarta.apache.org:${homepage}"/>
        </exec>

        <exec dir="." executable="ssh">
            <arg line="-l ${username} jakarta.apache.org 'cd ${homepage};gunzip ${site.name}-${DSTAMP}.tar.gz;tar xvf ${site.name}-${DSTAMP}.tar;rm ${site.name}-${DSTAMP}.tar'"/>
        </exec>

    </target>

    <!--
       ========================================================================
         Do it all for GUMP nightly builds. Please note that the 'clean'
         target should not be called as this generates problems with the
         GUMP mechanism where all classpath entries need to be set before
         running the build (i.e. the <classpath> entries in the build are
         ignored using the "-Dbuild.sysclasspath=only" switch when running
         Ant).
       ========================================================================
    -->
    <target name="gump" depends="jar,sample,doc,site,tests,dist.gump">
    </target>

    <!--
       ========================================================================
         Perform a code audit using CheckStyle.
       ========================================================================
    -->
    <target name="checkstyle.22" depends="init" if="servlet22.jar.present">

        <ant antfile="build/build-servletapi.xml" target="checkstyle">
            <property name="servlet.api" value="22"/>
            <property name="servlet.jar" value="${servlet22.jar}"/>
        </ant>

    </target>

    <target name="checkstyle.23" depends="init" if="servlet23.jar.present">

        <ant antfile="build/build-servletapi.xml" target="checkstyle">
            <property name="servlet.api" value="23"/>
            <property name="servlet.jar" value="${servlet23.jar}"/>
        </ant>

    </target>

    <target name="checkstyle.share" depends="init">

        <taskdef name="checkstyle"
            classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"/>

        <mkdir dir="${out.root.dir}"/>

        <echo message="Errors are reported in ${out.root.dir}/checkstyle_share.xml"/>

        <checkstyle paramPattern="^(the|is|has)[A-Z][a-zA-Z0-9]*$"
            allowProtected="true" headerFile="LICENSE">

            <fileset dir="${src.java.share.dir}">
                <include name="**/*.java"/>
                <exclude name="**/*Aspect.java"/>
            </fileset>
            <fileset dir="${src.java.test.share.dir}">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="${sample.build.dir}/share">
                <include name="**/*.java"/>
            </fileset>
            <formatter type="xml" toFile="${out.root.dir}/checkstyle_share.xml"/>
        </checkstyle>

    </target>

    <target name="checkstyle" depends="checkstyle.share,checkstyle.22,checkstyle.23"/>

</project>
