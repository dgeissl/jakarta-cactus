<?xml version="1.0"?>

<!--
  =============================================================================
    Build file for the Cactus framework.

    The following Ant tasks need to be available in your ant installation (i.e.
    the Ant task themselves and their dependent jars need to be put in
    ANT_HOME/lib) :

        checkstyle   [OPTIONAL] Only needed for the "checkstyle" target which
                                is used to check coding and naming conventions.

        ajc/ajdoc    [REQUIRED] AspectJ Ant tasks

        junit        [REQUIRED] JUnit Ant task

        clover       [OPTIONAL] Clover jar (only for test coverage)

    The mandatory and optional Ant properties are defined in
    build.properties.sample. Please read and edit that file.

    This script should be started with the following command line :

        ant <target>

    Run "ant -projecthelp" to get a list of available targets. The default
    target is "dist"

    Note: basedir points to the main Cactus directory in order to have the same
          base dir for all Cactus subprojects and thus be able to share
          relative paths.
  =============================================================================
-->
<project name="Cactus Framework" default="dist" basedir="..">

    <!-- Give user a chance to override without editing this file
         (and without typing -D each time it compiles it) -->
    <property file="framework/build.properties" />
    <property file="${user.home}/build.properties" />

    <!-- Global project properties -->
    <property name="project.name.text" value="Cactus Framework"/>
    <property name="project.name.file" value="cactus"/>
    <property name="project.version" value="1.4dev"/>

    <!-- Prefix to add to all distributable files -->
    <property name="project.prefix" value="jakarta-"/>

    <!--
       ========================================================================
         Default values for properties not defined in build.properties or in
         a higher level calling Ant script
       ========================================================================
    -->
    <property name="year" value="2000-2002"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="off"/>
    <property name="deprecation" value="off"/>

    <!--
       ========================================================================
         Base directory for all file related operations
       ========================================================================
    -->
    <property name="base.dir" value="framework"/>

    <!--
       ========================================================================
         Set the properties related to the source tree.
         Note: These properties are defined in a target as some need the
               j2ee.api property to be set
       ========================================================================
    -->
    <target name="properties.source">

        <property name="src.dir" value="${base.dir}/src"/>
        <property name="src.java.dir" value="${src.dir}/java"/>
        <property name="src.java.share.dir" value="${src.java.dir}/share"/>
        <property name="src.java.specific.dir"
            value="${src.java.dir}/j2ee${j2ee.api}"/>
        <property name="src.test.dir" value="${src.dir}/test"/>
        <property name="src.test.share.dir" value="${src.test.dir}/share"/>
        <property name="build.dir" value="${base.dir}/."/>
        <property name="conf.dir" value="${base.dir}/conf"/>
        <property name="web.dir" value="${base.dir}/web"/>

    </target>

    <!--
       ========================================================================
         Set the properties related to the target tree
         Note: These properties are defined in a target as some need the
               j2ee.api property to be set
       ========================================================================
    -->
    <target name="properties.target">

        <property name="target.dir" value="${base.dir}/target-${j2ee.api}"/>
        <property name="target.classes.dir" value="${target.dir}/classes"/>
        <property name="target.classes.java.dir"
            value="${target.classes.dir}/java"/>
        <property name="target.classes.clover.dir"
            value="${target.classes.dir}/clover"/>
        <property name="target.classes.test.dir"
            value="${target.classes.dir}/test"/>
        <property name="target.doc.dir" value="${target.dir}/doc"/>
        <property name="target.doc.api.dir" value="${target.doc.dir}/api"/>

    </target>

    <!--
       ========================================================================
         Set the properties related to the distribution tree
         Note: These properties are defined in a target as some need the
               j2ee.api property to be set
       ========================================================================
    -->
    <target name="properties.distribution">

        <property name="dist.dir" value="${base.dir}/dist-${j2ee.api}"/>
        <property name="dist.lib.dir" value="${dist.dir}/lib"/>
        <property name="dist.doc.dir" value="${dist.dir}/doc"/>
        <property name="dist.doc.api.dir" value="${dist.doc.dir}/api"/>
        <property name="dist.web.dir" value="${dist.dir}/web"/>

    </target>

    <!--
       ========================================================================
        Names of deliverables
       ========================================================================
    -->
    <!-- The Cactus framework jar -->
    <property name="framework.jar.name" value="${project.name.file}"/>

    <!-- The Clover(ed) Cactus framework jar. Only generated if
         clover.enable = true -->
    <property name="framework.clover.jar.name"
        value="${project.name.file}-clover"/>

    <!--
       ========================================================================
         Useful patterns for targets
       ========================================================================
    -->
    <path id="project.class.path">

        <pathelement location="${j2ee.jar}"/>
        <pathelement location="${log4j.jar}"/>
        <pathelement location="${commons.logging.jar}"/>
        <pathelement location="${commons.httpclient.jar}"/>
        <pathelement location="${httpunit.jar}"/>

        <!-- Includes system classpath for jars that are in ANT_HOME/lib such
             as aspectrt.jar, etc -->
        <pathelement path="${java.class.path}"/>
    </path>

    <!--
       ========================================================================
         Display configurable properties values
       ========================================================================
    -->
    <target name="display.properties">

        <echo message="----- ${project.name.text} ${project.version} -----"/>
        <echo message=""/>
        <echo message="java.class.path = ${java.class.path}"/>
        <echo message=""/>
        <echo message="java.home = ${java.home}"/>
        <echo message="user.home = ${user.home}"/>
        <echo message="ant.home = ${ant.home}"/>
        <echo message=""/>
        <echo message="j2ee.jar = ${j2ee.jar}"/>
        <echo message="log4j.jar = ${log4j.jar}"/>
        <echo message="commons.logging.jar = ${commons.logging.jar}"/>
        <echo message="commons.httpclient.jar = ${commons.httpclient.jar}"/>
        <echo message="httpunit.jar = ${httpunit.jar}"/>
        <echo message=""/>
        <echo message="clover.enable (optional) = ${clover.enable}"/>
        <echo message=""/>

    </target>

    <!--
       ========================================================================
         Verify that all mandatory properties have been set
       ========================================================================
    -->
    <target name="check.properties">

        <condition property="properties.ok">
            <and>
                <available file="${j2ee.jar}"/>
                <available file="${log4j.jar}"/>
                <available file="${commons.logging.jar}"/>
                <available file="${commons.httpclient.jar}"/>
                <available file="${httpunit.jar}"/>
           </and>
        </condition>

        <fail message="Missing property or property pointing to an invalid file (check your build.properties file)"
            unless="properties.ok"/>

    </target>

    <!--
       ========================================================================
         Find out the J2EE API version
       ========================================================================
    -->
    <target name="check.j2ee.version">

        <condition property="j2ee.api" value="13">
            <available classname="javax.servlet.Filter"
                classpathref="project.class.path"/>
        </condition>

        <condition property="j2ee.api" value="12">
            <available classname="javax.servlet.Servlet"
                classpathref="project.class.path"/>
        </condition>

        <fail message="Unsupported J2EE version" unless="j2ee.api"/>

        <echo message="j2ee.api = ${j2ee.api}"/>

    </target>

    <!--
       ========================================================================
         Load all dynamic properties
       ========================================================================
    -->
    <target name="load.properties"
        depends="check.j2ee.version,properties.source,properties.target,properties.distribution"/>

    <!--
       ========================================================================
         Initialize Clover related properties (for test coverage reports).
       ========================================================================
    -->
    <target name="init.clover" if="clover.enable">

        <!-- Clover write data at compile time *and* at runtime in this file -->
        <property name="clover.initstring"
            value="${basedir}/target-${j2ee.api}/clover-coverage.db"/>
        <echo message="clover.initstring = ${clover.initstring}"/>

        <dirname property="clover.db.dir" file="${clover.initstring}"/>
        <mkdir dir="${clover.db.dir}"/>

        <property name="clover.excludes"
            value="**/*Aspect.java,**/Test*.java,**/Mock*.java,**/AssertUtils.java,**/ClientCookie.java"/>

    </target>

    <!--
       ========================================================================
         Initialize the build. Must be called by all targets
       ========================================================================
    -->
    <target name="init"
        depends="display.properties,check.properties,load.properties,init.clover">

        <tstamp/>

        <!-- AspectJ task definition -->
        <taskdef name="ajc" classname="org.aspectj.tools.ant.taskdefs.Ajc"/>
        <taskdef name="ajdoc" classname="org.aspectj.tools.ant.taskdefs.Ajdoc"/>

    </target>

    <!--
       ========================================================================
         Compiles the sources
       ========================================================================
    -->
    <target name="compile.clover.prepare" if="clover.enable">

        <!-- Only recompile if source files have changed since the last time
             the clover jar was created -->
        <condition property="compile.clover.required">
            <not>
                <uptodate targetfile="${target.dir}/${framework.clover.jar.name}.jar">
                    <srcfiles dir="${src.java.share.dir}"/>
                    <srcfiles dir="${src.java.specific.dir}"/>
                </uptodate>
            </not>
        </condition>

    </target>

    <target name="compile.clover" depends="init,compile.clover.prepare"
        if="compile.clover.required">

        <mkdir dir="${target.classes.clover.dir}"/>

        <ajc destdir="${target.classes.clover.dir}" preprocess="true"
          deprecation="${deprecation}" optimize="${optimize}"
          workingdir="${target.dir}/ajworkingdir">

            <src path="${src.java.share.dir}"/>
            <src path="${src.java.specific.dir}"/>

            <exclude name="**/package.html"/>
            <exclude name="**/overview.html"/>

            <!-- We exclude the Logging Aspect as it adds 2 new methods for
                 each method to log and thus leads to flawed test coverage
                 statistics -->
            <exclude name="**/LogAspect.java"/>

            <classpath refid="project.class.path"/>
        </ajc>

        <javac destdir="${target.classes.clover.dir}"
            deprecation="${deprecation}" optimize="${optimize}"
            compiler="org.apache.tools.ant.taskdefs.CloverCompilerAdapter">

            <src path="${target.dir}/ajworkingdir"/>

            <exclude name="**/package.html"/>
            <exclude name="**/overview.html"/>

            <classpath refid="project.class.path"/>
        </javac>

    </target>

    <target name="compile.test" depends="init">

        <mkdir dir="${target.classes.test.dir}"/>

        <javac destdir="${target.classes.test.dir}"
          deprecation="${deprecation}" optimize="${optimize}">

            <src path="${src.test.share.dir}"/>

            <classpath>
                <path path="${target.classes.java.dir}"/>
                <path refid="project.class.path"/>
            </classpath>

        </javac>

    </target>

    <target name="compile.main.prepare">

        <!-- Only recompile if source files have changed since the last time
             the main jar was created -->
        <condition property="compile.main.required">
            <not>
                <uptodate targetfile="${target.dir}/${framework.jar.name}.jar">
                    <srcfiles dir="${src.java.share.dir}"/>
                    <srcfiles dir="${src.java.specific.dir}"/>
                </uptodate>
            </not>
        </condition>

    </target>

    <target name="compile.main" depends="init,compile.main.prepare"
        if="compile.main.required">

        <mkdir dir="${target.classes.java.dir}"/>

        <ajc destdir="${target.classes.java.dir}"
          deprecation="${deprecation}" optimize="${optimize}">

            <src path="${src.java.share.dir}"/>
            <src path="${src.java.specific.dir}"/>

            <exclude name="**/package.html"/>
            <exclude name="**/overview.html"/>

            <classpath refid="project.class.path"/>
        </ajc>

    </target>

    <target name="compile" depends="compile.main,compile.clover,compile.test"
        description="Compile the sources"/>

    <!--
       ========================================================================
         Create the runtime jar file
       ========================================================================
    -->
    <target name="jar.clover" if="clover.enable">

        <jar jarfile="${target.dir}/${framework.clover.jar.name}.jar">

            <manifest>
                <section name="org/apache/cactus/">
                    <attribute name="Specification-Title"
                        value="${project.name.text}"/>
                    <attribute name="Specification-Version"
                        value="${project.version}"/>
                    <attribute name="Specification-Vendor"
                        value="Apache Software Foundation"/>
                    <attribute name="Implementation-Title"
                        value="${project.name.file}"/>
                    <attribute name="Implementation-Version"
                        value="${project.version} ${TODAY}"/>
                    <attribute name="Implementation-Vendor"
                        value="Apache Software Foundation"/>
                </section>
            </manifest>

            <metainf dir=".">
                <include name="LICENSE.cactus"/>
            </metainf>
            <fileset dir="${target.classes.clover.dir}"/>
        </jar>

    </target>

    <target name="jar.main">

        <jar jarfile="${target.dir}/${framework.jar.name}.jar">

            <manifest>
                <section name="org/apache/cactus/">
                    <attribute name="Specification-Title"
                        value="${project.name.text}"/>
                    <attribute name="Specification-Version"
                        value="${project.version}"/>
                    <attribute name="Specification-Vendor"
                        value="Apache Software Foundation"/>
                    <attribute name="Implementation-Title"
                        value="${project.name.file}"/>
                    <attribute name="Implementation-Version"
                        value="${project.version} ${TODAY}"/>
                    <attribute name="Implementation-Vendor"
                        value="Apache Software Foundation"/>
                </section>
            </manifest>

            <metainf dir=".">
                <include name="LICENSE.cactus"/>
            </metainf>
            <fileset dir="${target.classes.java.dir}"/>
        </jar>

    </target>

    <target name="jar" depends="compile,jar.main,jar.clover"
        description="Generate the library jar"/>

    <!--
       ========================================================================
         Generate the documentation (javadoc)
       ========================================================================
    -->
    <target name="doc" depends="init" description="Generates the documentation">

        <mkdir dir="${target.doc.api.dir}"/>

        <ajdoc
            packagenames="org.apache.cactus.*"
            destdir="${target.doc.api.dir}"
            author="true"
            public="true"
            version="true"
            use="true"
            windowtitle="${project.name.text} ${project.version}"
            doctitle="${project.name.text} ${project.version}"
            bottom="Copyright &amp;copy; ${year} Apache Software Foundation. All Rights Reserved.">

            <sourcepath>
                <pathelement location="${src.java.share.dir}"/>
                <pathelement location="${src.java.specific.dir}"/>
            </sourcepath>

            <classpath refid="project.class.path"/>

        </ajdoc>

    </target>

    <!--
       ========================================================================
         Run the full suite of unit tests.
       ========================================================================
    -->
    <target name="test" depends="jar" description="Run the unit tests">

        <junit printsummary="yes" haltonfailure="yes" fork="yes">

            <classpath>
                <path path="${target.classes.clover.dir}"/>
                <path path="${target.classes.test.dir}"/>
                <path refid="project.class.path"/>
            </classpath>

            <formatter type="plain" usefile="false"/>

            <test name="org.apache.cactus.TestAll"/>

        </junit>

    </target>

    <!--
       ========================================================================
         Generate the distributable files
       ========================================================================
    -->
    <target name="dist.clover" if="clover.enable">

        <copy todir="${dist.lib.dir}"
            file="${target.dir}/${framework.clover.jar.name}.jar"/>

    </target>

    <target name="dist.main">

        <mkdir dir="${dist.lib.dir}"/>
        <mkdir dir="${dist.doc.api.dir}"/>
        <mkdir dir="${dist.web.dir}"/>

        <copy todir="${dist.lib.dir}"
            file="${target.dir}/${framework.jar.name}.jar"/>
        <copy todir="${dist.doc.api.dir}">
            <fileset dir="${target.doc.api.dir}"/>
        </copy>
        <copy todir="${dist.web.dir}">
            <fileset dir="${web.dir}"/>
        </copy>

    </target>

    <target name="dist" depends="jar,test,doc,checkstyle,dist.main,dist.clover"
        description="Generate the distributable files"/>

    <!--
       ========================================================================
         Clean generated files (including distributables).
         Note: We don't depend on "init" as the only mandatory property that
         we need is "j2ee.jar".
       ========================================================================
    -->
    <target name="clean" depends="load.properties"
        description="Clean all generated files">

        <delete dir="${target.dir}"/>
        <delete dir="${dist.dir}"/>

    </target>

    <!--
       ========================================================================
         Perform a code audit using CheckStyle. Only performs the audit if
         the checkstyle jar is in the Ant classpasth.
       ========================================================================
    -->
    <target name="checkstyle.check">

        <available property="checkstyle.present"
            classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"/>

    </target>

    <target name="checkstyle" depends="checkstyle.check,init"
        if="checkstyle.present"
        description="Perform a code audit using Checkstyle">

        <taskdef name="checkstyle"
            classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"/>

        <mkdir dir="${target.dir}"/>

        <echo message="Errors are reported in ${target.dir}/checkstyle_errors.xml"/>

        <checkstyle
            lcurlyType="nl"
            lcurlyMethod="nl"
            allowProtected="true"
            ignoreLineLengthPattern="(@version.*\$Id|@see)"
            paramPattern="^(the|is|has)[A-Z][a-zA-Z0-9]*$"
            publicMemberPattern="^[a-z][a-zA-Z0-9]*$"
            headerFile="./LICENSE.cactus"
            failOnViolation="true"
            maxParameters="10"
            cacheFile="${target.dir}/checkstyle.cache">

            <fileset dir="${src.java.dir}">
                <include name="**/*.java"/>
                <exclude name="**/*Aspect.java"/>
            </fileset>
            <fileset dir="${src.test.dir}">
                <include name="**/*.java"/>
            </fileset>
            <formatter type="plain"/>
            <formatter type="xml" toFile="${target.dir}/checkstyle_errors.xml"/>
        </checkstyle>

    </target>

    <!--
       ========================================================================
         Build all : builds the distribution for both J2EE API 1.2 and 1.3
       ========================================================================
    -->
    <target name="dist.all"
        description="Generate the distributable files (for all J2EE APIs)">

        <ant antfile="framework/build.xml" target="dist" inheritAll="false">
            <property name="j2ee.jar" value="${j2ee.12.jar}"/>
        </ant>

        <ant antfile="framework/build.xml" target="dist" inheritAll="false">
            <property name="j2ee.jar" value="${j2ee.13.jar}"/>
        </ant>

    </target>

    <!--
       ========================================================================
         Clean all, for all J2EE APIs
       ========================================================================
    -->
    <target name="clean.all"
        description="Clean all generated files (for all J2EE APIs)">

        <ant antfile="framework/build.xml" target="clean" inheritAll="false">
            <property name="j2ee.jar" value="${j2ee.12.jar}"/>
        </ant>

        <ant antfile="framework/build.xml" target="clean" inheritAll="false">
            <property name="j2ee.jar" value="${j2ee.13.jar}"/>
        </ant>

    </target>

    <!--
       ========================================================================
         Run the Clover Swing report
       ========================================================================
    -->
    <target name="clover.swing" depends="init" if="clover.enable">

        <java classname="com.cortexeb.tools.clover.reporters.jfc.Viewer"
            fork="yes">
            <arg line="${clover.initstring}"/>
            <classpath>
                <pathelement path="${java.class.path}"/>
            </classpath>
        </java>

    </target>

</project>
