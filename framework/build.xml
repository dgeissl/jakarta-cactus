<?xml version="1.0"?>

<!--
  =============================================================================
    Build file for the Cactus framework.

    The following Ant tasks need to be available in your ant installation (i.e.
    the Ant task themselves and their dependent jars need to be put in
    ANT_HOME/lib) :

        checkstyle             [OPTIONAL] Only needed for the "checkstyle"
                                          target which is used to check coding
                                          and naming conventions.

        ajc/ajdoc              [REQUIRED] AspectJ Ant tasks

        junit                  [REQUIRED] JUnit Ant task

    The following properties need to be set in either a ./build.properties or
    a ${user.home}/build.properties one or in a calling Ant script :

        j2ee.jar               [REQUIRED] The location of the J2EE API jar.
                               Depending on the version (1.2 or 1.3) of it, the
                               corresponding Cactus Framework will be built. For
                               example if you use J2EE 1.3 jar, then the Cactus
                               jar will contain the Filter Redirector which is
                               only available for Servlet 2.3 (part of J2EE
                               1.3).

        log4j.jar              [REQUIRED] The location of the Log4j jar.

        commons.httpclient.jar [REQUIRED] The location of the Commons
                               Httpclient jar.

        httpunit.jar           [REQUIRED] The location of the HttpUnit jar.

    This script should be started with the following command line :

        ant <target>

    Run "ant -projecthelp" to get a list of available targets. The default
    target is "dist"

    Note: basedir points to the main Cactus directory in order to have the same
          base dir for all Cactus subprojects and thus be able to share
          relative paths.
  =============================================================================
-->
<project name="Cactus Framework" default="dist" basedir="..">

    <!-- Give user a chance to override without editing this file
         (and without typing -D each time it compiles it) -->
    <property file="framework/build.properties" />
    <property file="${user.home}/build.properties" />

    <!-- Global project properties -->
    <property name="project.name.text" value="Cactus Framework"/>
    <property name="project.name.file" value="cactus"/>
    <property name="project.version" value="1.4dev"/>

    <!-- Prefix to add to all distributable files -->
    <property name="project.prefix" value="jakarta-"/>

    <!--
       ========================================================================
         Default values for properties not defined in build.properties or in
         a higher level calling Ant script
       ========================================================================
    -->
    <property name="year" value="2000-2002"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="off"/>
    <property name="deprecation" value="off"/>

    <!--
       ========================================================================
         Base directory for all file related operations
       ========================================================================
    -->
    <property name="base.dir" value="framework"/>

    <!--
       ========================================================================
         Set the properties related to the source tree.
         Note: These properties are defined in a target as some need the
               j2ee.api property to be set
       ========================================================================
    -->
    <target name="properties.source">

        <!-- Source locations for the build -->
        <property name="src.dir" value="${base.dir}/src"/>
        <property name="src.java.dir" value="${src.dir}/java"/>
        <property name="src.java.share.dir" value="${src.java.dir}/share"/>
        <property name="src.java.specific.dir"
            value="${src.java.dir}/j2ee${j2ee.api}"/>
        <property name="src.test.dir" value="${src.dir}/test"/>
        <property name="src.test.share.dir" value="${src.test.dir}/share"/>
        <property name="build.dir" value="${base.dir}/."/>
        <property name="conf.dir" value="${base.dir}/conf"/>
        <property name="web.dir" value="${base.dir}/web"/>

    </target>

    <!--
       ========================================================================
         Set the properties related to the target area
       ========================================================================
    -->
    <!-- Destination locations for the build -->
    <property name="target.dir" value="${base.dir}/target"/>
    <property name="target.classes.dir" value="${target.dir}/classes"/>
    <property name="target.classes.java.dir"
        value="${target.classes.dir}/java"/>
    <property name="target.classes.test.dir"
        value="${target.classes.dir}/test"/>
    <property name="target.doc.dir" value="${target.dir}/doc"/>
    <property name="target.doc.api.dir" value="${target.doc.dir}/api"/>

    <!-- Distribution directory, i.e. where the expanded distibutable files
         are located -->
    <property name="dist.dir" value="${base.dir}/dist"/>
    <property name="dist.lib.dir" value="${dist.dir}/lib"/>
    <property name="dist.doc.dir" value="${dist.dir}/doc"/>
    <property name="dist.doc.api.dir" value="${dist.doc.dir}/api"/>
    <property name="dist.web.dir" value="${dist.dir}/web"/>

    <!--
       ========================================================================
        Names of deliverables
       ========================================================================
    -->
    <!-- The Cactus framework jar -->
    <property name="framework.jar.name" value="${project.name.file}"/>

    <!--
       ========================================================================
         Useful patterns for targets
       ========================================================================
    -->
    <path id="project.class.path">

        <pathelement location="${j2ee.jar}"/>
        <pathelement location="${log4j.jar}"/>
        <pathelement location="${commons.httpclient.jar}"/>
        <pathelement location="${httpunit.jar}"/>

        <!-- Includes system classpath for jars that are in ANT_HOME/lib such
             as aspectrt.jar, etc -->
        <pathelement path="${java.class.path}"/>
    </path>

    <!--
       ========================================================================
         Display configurable properties values
       ========================================================================
    -->
    <target name="display.properties">

        <echo message="----- ${project.name.text} ${project.version} -----"/>
        <echo message=""/>
        <echo message="java.class.path = ${java.class.path}"/>
        <echo message=""/>
        <echo message="java.home = ${java.home}"/>
        <echo message="user.home = ${user.home}"/>
        <echo message="ant.home = ${ant.home}"/>
        <echo message=""/>
        <echo message="j2ee.jar = ${j2ee.jar}"/>
        <echo message="log4j.jar = ${log4j.jar}"/>
        <echo message="commons.httpclient.jar = ${commons.httpclient.jar}"/>
        <echo message="httpunit.jar = ${httpunit.jar}"/>
        <echo message=""/>

    </target>

    <!--
       ========================================================================
         Verify that all mandatory properties have been set
       ========================================================================
    -->
    <target name="check.properties" depends="display.properties">

        <condition property="properties.ok">
            <and>
                <available file="${j2ee.jar}"/>
                <available file="${log4j.jar}"/>
                <available file="${commons.httpclient.jar}"/>
                <available file="${httpunit.jar}"/>
           </and>
        </condition>

        <fail message="Missing property or property pointing to an invalid file (check your build.properties file)"
            unless="properties.ok"/>

    </target>

    <!--
       ========================================================================
         Find out the J2EE API version
       ========================================================================
    -->
    <target name="check.j2ee.version">

        <condition property="j2ee.api" value="13">
            <available classname="javax.servlet.Filter"
                classpathref="project.class.path"/>
        </condition>

        <condition property="j2ee.api" value="12">
            <available classname="javax.servlet.Servlet"
                classpathref="project.class.path"/>
        </condition>

        <fail message="Unsupported J2EE version" unless="j2ee.api"/>

        <echo message="j2ee.api = ${j2ee.api}"/>

    </target>

    <!--
       ========================================================================
         Load all dynamic properties
       ========================================================================
    -->
    <target name="load.properties"
        depends="properties.source"/>

    <!--
       ========================================================================
         Initialize the build. Must be called by all targets
       ========================================================================
    -->
    <target name="init"
        depends="check.properties,check.j2ee.version,load.properties">

        <tstamp/>

        <!-- AspectJ task definition -->
        <taskdef name="ajc" classname="org.aspectj.tools.ant.taskdefs.Ajc"/>
        <taskdef name="ajdoc" classname="org.aspectj.tools.ant.taskdefs.Ajdoc"/>

    </target>

    <!--
       ========================================================================
         Compiles the sources
       ========================================================================
    -->
    <target name="compile" depends="init" description="Compile the sources">

        <mkdir dir="${target.classes.java.dir}"/>
        <mkdir dir="${target.classes.test.dir}"/>

        <ajc destdir="${target.classes.java.dir}"
          deprecation="${deprecation}" optimize="${optimize}">

            <src path="${src.java.share.dir}"/>
            <src path="${src.java.specific.dir}"/>

            <exclude name="**/package.html"/>
            <exclude name="**/overview.html"/>

            <classpath refid="project.class.path"/>
        </ajc>

        <javac destdir="${target.classes.test.dir}"
          deprecation="${deprecation}" optimize="${optimize}">

            <src path="${src.test.share.dir}"/>

            <classpath>
                <path path="${target.classes.java.dir}"/>
                <path refid="project.class.path"/>
            </classpath>

        </javac>

    </target>

    <!--
       ========================================================================
         Create the runtime jar file
       ========================================================================
    -->
    <target name="jar" depends="compile" description="Generate the library jar">

        <jar jarfile="${target.dir}/${framework.jar.name}.jar">

            <manifest>
                <section name="org/apache/cactus/">
                    <attribute name="Specification-Title"
                        value="${project.name.text}"/>
                    <attribute name="Specification-Version"
                        value="${project.version}"/>
                    <attribute name="Specification-Vendor"
                        value="Apache Software Foundation"/>
                    <attribute name="Implementation-Title"
                        value="${project.name.file}"/>
                    <attribute name="Implementation-Version"
                        value="${project.version} ${TODAY}"/>
                    <attribute name="Implementation-Vendor"
                        value="Apache Software Foundation"/>
                </section>
            </manifest>

            <metainf dir=".">
                <include name="LICENSE.cactus"/>
            </metainf>
            <fileset dir="${target.classes.java.dir}"/>
        </jar>

    </target>

    <!--
       ========================================================================
         Generate the documentation (javadoc)
       ========================================================================
    -->
    <target name="doc" depends="init" description="Generates the documentation">

        <mkdir dir="${target.doc.api.dir}"/>

        <ajdoc
            packagenames="org.apache.cactus.*"
            destdir="${target.doc.api.dir}"
            author="true"
            public="true"
            version="true"
            use="true"
            windowtitle="${project.name.text} ${project.version}"
            doctitle="${project.name.text} ${project.version}"
            bottom="Copyright &amp;copy; ${year} Apache Software Foundation. All Rights Reserved.">

            <sourcepath>
                <pathelement location="${src.java.share.dir}"/>
                <pathelement location="${src.java.specific.dir}"/>
            </sourcepath>

            <classpath refid="project.class.path"/>

        </ajdoc>

    </target>

    <!--
       ========================================================================
         Run the full suite of unit tests.
       ========================================================================
    -->
    <target name="test" depends="jar" description="Run the unit tests">

        <junit printsummary="yes" haltonfailure="yes" fork="yes">

            <classpath>
                <path path="${target.classes.java.dir}"/>
                <path path="${target.classes.test.dir}"/>
                <path refid="project.class.path"/>
            </classpath>

            <formatter type="plain" usefile="false"/>

            <test name="org.apache.cactus.TestAll"/>

        </junit>

    </target>

    <!--
       ========================================================================
         Generate the distributable files
       ========================================================================
    -->
    <target name="dist" depends="jar,test,doc,checkstyle"
        description="Generate the distributable files">

        <mkdir dir="${dist.lib.dir}"/>
        <mkdir dir="${dist.doc.api.dir}"/>
        <mkdir dir="${dist.web.dir}"/>

        <copy todir="${dist.lib.dir}"
            file="${target.dir}/${framework.jar.name}.jar"/>
        <copy todir="${dist.doc.api.dir}">
            <fileset dir="${target.doc.api.dir}"/>
        </copy>
        <copy todir="${dist.web.dir}">
            <fileset dir="${web.dir}"/>
        </copy>

    </target>

    <!--
       ========================================================================
         Clean generated files (including distributables)
       ========================================================================
    -->
    <target name="clean" description="Clean all generated files">

        <delete dir="${target.dir}"/>
        <delete dir="${dist.dir}"/>

    </target>

    <!--
       ========================================================================
         Perform a code audit using CheckStyle. Only performs the audit if
         the checkstyle jar is in the Ant classpasth.
       ========================================================================
    -->
    <target name="checkstyle.check">

        <available property="checkstyle.present"
            classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"/>

    </target>

    <target name="checkstyle" depends="checkstyle.check,init"
        if="checkstyle.present"
        description="Perform a code audit using Checkstyle">

        <taskdef name="checkstyle"
            classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"/>

        <mkdir dir="${target.dir}"/>

        <echo message="Errors are reported in ${target.dir}/checkstyle_errors.xml"/>

        <checkstyle
            lcurlyType="nl"
            lcurlyMethod="nl"
            allowProtected="true"
            ignoreLineLengthPattern="(@version.*\$Id|@see)"
            paramPattern="^(the|is|has)[A-Z][a-zA-Z0-9]*$"
            publicMemberPattern="^[a-z][a-zA-Z0-9]*$"
            headerFile="./LICENSE.cactus"
            failOnViolation="true"
            ignoreOpWrap="true"
            cacheFile="${target.dir}/checkstyle.cache">

            <fileset dir="${src.java.dir}">
                <include name="**/*.java"/>
                <exclude name="**/*Aspect.java"/>
            </fileset>
            <fileset dir="${src.test.dir}">
                <include name="**/*.java"/>
            </fileset>
            <formatter type="plain"/>
            <formatter type="xml" toFile="${target.dir}/checkstyle_errors.xml"/>
        </checkstyle>

    </target>

</project>
