<?xml version="1.0"?>

<!--
  =============================================================================
    Master build file for building all Cactus components (the Ant tasks,
    the framework itself, the documentation, the samples).

    See build.properties.sample for details of mandatory and optional
    properties to set.

    This script should be started with the following command line :

        ant <target>

    Run "ant -projecthelp" to get a list of available targets. The default
    target is "dist"
  =============================================================================
-->
<project name="Master Cactus Build" default="dist" basedir=".">

    <!-- Give user a chance to override without editing this file
         (and without typing -D each time it compiles it) -->
    <property file="build.properties" />
    <property file="${user.home}/build.properties" />

    <!-- Global project properties -->
    <property name="project.name.text" value="Cactus"/>
    <property name="project.name.file" value="cactus"/>
    <property name="project.version" value="1.4dev"/>

    <!-- Prefix to add to all distributable files -->
    <property name="project.prefix" value="jakarta-"/>

    <property name="year" value="2000-2002"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="off"/>
    <property name="deprecation" value="off"/>

    <!--
       ========================================================================
         Set the properties related to the source tree
       ========================================================================
    -->
    <!-- Source locations for the build -->
    <property name="anttasks.dir" value="anttasks"/>
    <property name="framework.dir" value="framework"/>
    <property name="documentation.dir" value="documentation"/>
    <property name="sample-servlet.dir" value="sample-servlet"/>

    <!--
       ========================================================================
         Set the properties related to the target area
       ========================================================================
    -->
    <!-- Destination locations for the build -->
    <property name="target.dir" value="target"/>
    <property name="target.lib.dir" value="${target.dir}/lib"/>

    <!-- Distribution directory, i.e. where the expanded distibutable files
         are located -->
    <property name="dist.dir" value="dist"/>
    <property name="dist.lib.dir" value="${dist.dir}/lib"/>
    <property name="dist.doc.dir" value="${dist.dir}/doc"/>
    <property name="dist.doc.api.dir" value="${dist.doc.dir}/api"/>
    <property name="dist.web.dir" value="${dist.dir}/web"/>

    <!-- Release directory, i.e. where the zipped distribution is located -->
    <property name="release.dir" value="release"/>

    <!-- Name of Cactus distributables needed by Cactus subprojects
         themselves -->

    <property name="anttasks.jar.name" value="cactus-ant"/>
    <property name="anttasks.jar"
        value="${anttasks.dir}/${dist.lib.dir}/${anttasks.jar.name}.jar"/>

    <property name="framework.jar.name" value="cactus"/>
    <property name="framework.jar"
        value="${framework.dir}/${dist.lib.dir}/${framework.jar.name}.jar"/>

    <!--
       ========================================================================
         Display configurable properties values
       ========================================================================
    -->
    <target name="display.properties">

        <echo message="----- ${project.name.text} ${project.version} -----"/>
        <echo message=""/>
        <echo message="java.class.path = ${java.class.path}"/>
        <echo message=""/>
        <echo message="java.home = ${java.home}"/>
        <echo message="user.home = ${user.home}"/>
        <echo message="ant.home = ${ant.home}"/>
        <echo message=""/>
        <echo message="j2ee.jar = ${j2ee.jar}"/>
        <echo message="servlet.jar = ${servlet.jar}"/>
        <echo message="commons.httpclient.jar = ${commons.httpclient.jar}"/>
        <echo message="httpunit.jar = ${httpunit.jar}"/>
        <echo message="junit.jar = ${junit.jar}"/>
        <echo message="aspecjrt.jar = ${aspectjrt.jar}"/>
        <echo message="log4j.jar = ${log4j.jar}"/>
        <echo message=""/>
        <echo message="cvs.executable = ${cvs.executable}"/>
        <echo message=""/>

    </target>

    <!--
       ========================================================================
         Verify that all mandatory properties have been set
       ========================================================================
    -->
    <target name="check.properties" depends="display.properties">

        <condition property="properties.ok">
            <and>
                <available file="${servlet.jar}"/>
                <available file="${j2ee.jar}"/>
                <available file="${log4j.jar}"/>
                <available file="${commons.httpclient.jar}"/>
                <available file="${httpunit.jar}"/>
                <available file="${junit.jar}"/>
                <available file="${aspectjrt.jar}"/>
                <isset property="cvs.executable"/>
           </and>
        </condition>

        <fail message="Missing property or property pointing to an invalid file (check your build.properties file)"
            unless="properties.ok"/>

    </target>

    <!--
       ========================================================================
          Find out the J2EE API version
       ========================================================================
     -->
     <target name="check.j2ee.version">

         <condition property="j2ee.api" value="13">
             <available classname="javax.servlet.Filter"
                 classpath="${j2ee.jar}"/>
         </condition>

         <condition property="j2ee.api" value="12">
             <available classname="javax.servlet.Servlet"
                 classpath="${j2ee.jar}"/>
         </condition>

         <fail message="Unsupported J2EE version" unless="j2ee.api"/>

         <echo message="j2ee.api = ${j2ee.api}"/>

     </target>

    <!--
       ========================================================================
         Initialize the build. Must be called by all targets
       ========================================================================
    -->
    <target name="init" depends="check.properties,check.j2ee.version">

        <tstamp/>

    </target>

    <!--
       ========================================================================
          Generate the distributable files
       ========================================================================
    -->

    <!-- Run Cactus Ant tasks dist target -->
    <target name="run.anttasks" depends="init">

        <ant target="dist" antfile="${anttasks.dir}/build.xml"
            inheritAll="true">

            <property file="build.properties" />
            <property file="${user.home}/build.properties" />

            <property name="base.dir" value="${anttasks.dir}"/>
            <property name="project.name.text" value="Cactus Ant tasks"/>
            <property name="project.name.file" value="cactus-ant"/>
            <property name="target.dir" value="${anttasks.dir}/target"/>
            <property name="dist.dir" value="${anttasks.dir}/dist"/>
            <property name="dist.lib.dir"
                value="${anttasks.dir}/dist/lib"/>
            <property name="dist.doc.dir"
                value="${anttasks.dir}/dist/doc"/>
            <property name="dist.doc.api.dir"
                value="${anttasks.dir}/dist/doc/api"/>
        </ant>

    </target>

    <!-- Run Cactus Framework dist target -->
    <target name="run.framework" depends="init">

        <ant target="dist" antfile="${framework.dir}/build.xml"
            inheritAll="true">

            <property file="build.properties" />
            <property file="${user.home}/build.properties" />

            <property name="base.dir" value="${framework.dir}"/>
            <property name="project.name.text" value="Cactus Framework"/>
            <property name="project.name.file" value="cactus"/>
            <property name="target.dir" value="${framework.dir}/target"/>
            <property name="dist.dir" value="${framework.dir}/${dist.dir}"/>
            <property name="dist.lib.dir"
                value="${framework.dir}/${dist.lib.dir}"/>
            <property name="dist.doc.dir"
                value="${framework.dir}/${dist.doc.dir}"/>
            <property name="dist.doc.api.dir"
                value="${framework.dir}/${dist.doc.api.dir}"/>
            <property name="dist.web.dir"
                value="${framework.dir}/${dist.web.dir}"/>
        </ant>

    </target>

    <!-- Run Cactus Servlet Sample dist target -->
    <target name="run.sample-servlet" depends="init">

         <ant target="dist" antfile="${sample-servlet.dir}/build.xml"
            inheritAll="true">

            <property file="build.properties" />
            <property file="${user.home}/build.properties" />

            <property name="base.dir" value="${sample-servlet.dir}"/>
            <property name="project.name.text" value="Cactus Documentation"/>
            <property name="project.name.text" value="Cactus Servlet Sample"/>
            <property name="project.name.file" value="sample-servlet"/>
            <property name="target.dir" value="${sample-servlet.dir}/target"/>
            <property name="dist.dir"
                value="${sample-servlet.dir}/${dist.dir}"/>
            <property name="dist.bin.dir"
                value="${sample-servlet.dir}/${dist.dir}/bin"/>
            <property name="dist.doc.dir"
                value="${sample-servlet.dir}/${dist.doc.dir}"/>
            <property name="dist.doc.api.dir"
                value="${sample-servlet.dir}/${dist.doc.api.dir}"/>
            <property name="sample.zip.name" value="sample-servlet"/>
            <property name="cactus.ant.jar" value="${anttasks.jar}"/>
            <property name="cactus.framework.jar" value="${framework.jar}"/>
            <property name="cactus.framework.web"
                value="${framework.dir}/${dist.web.dir}"/>
        </ant>

    </target>

    <!-- Run Documentation dist target -->
    <target name="run.documentation" depends="run.anttasks">

        <ant target="dist" antfile="${documentation.dir}/build.xml"
            inheritAll="true">

            <property file="build.properties" />
            <property file="${user.home}/build.properties" />

            <property name="base.dir" value="${documentation.dir}"/>
            <property name="target.dir" value="${documentation.dir}/target"/>
            <property name="dist.dir"
                value="${documentation.dir}/dist"/>
            <property name="dist.doc.dir"
                value="${documentation.dir}/dist/doc"/>
            <property name="cactus.ant.jar" value="${anttasks.jar}"/>
        </ant>

    </target>

    <!-- Run the dist target of all dependent projects -->
    <target name="run"
        depends="run.anttasks,run.framework,run.sample-servlet,run.documentation">
    </target>

    <!--
       ========================================================================
          Package all generated distributables from all subprojects into the
          main distribution area.
       ========================================================================
     -->
    <target name="package.anttasks" depends="init">

        <!-- Rename the jars to suffix them with the version number -->
        <copy tofile="${dist.lib.dir}/cactus-ant-${project.version}.jar"
            file="${anttasks.dir}/dist/lib/cactus-ant.jar"/>

        <!-- Copy javadoc in correct directory -->
        <copy todir="${dist.doc.api.dir}/anttasks">
            <fileset dir="${anttasks.dir}/dist/doc/api"/>
        </copy>

    </target>

    <target name="package.framework" depends="init">

        <!-- Rename the jars to suffix them with the version number -->
        <copy tofile="${dist.lib.dir}/cactus-${project.version}.jar"
            file="${framework.dir}/${dist.lib.dir}/cactus.jar"/>

        <copy todir="${dist.web.dir}">
            <fileset dir="${framework.dir}/${dist.web.dir}"/>
        </copy>

        <!-- Copy javadoc in correct directory -->
        <copy todir="${dist.doc.api.dir}/framework/j2ee${j2ee.api}">
            <fileset dir="${framework.dir}/${dist.doc.api.dir}"/>
        </copy>

    </target>

    <target name="package.sample-servlet" depends="init">

        <mkdir dir="${dist.dir}/sample-servlet"/>
        <unzip src="${sample-servlet.dir}/${dist.dir}/bin/sample-servlet.zip"
            dest="${dist.dir}/sample-servlet"/>

    </target>

    <target name="package.documentation" depends="init">

        <!-- Copy doc in correct directory -->
        <copy todir="${dist.doc.dir}">
            <fileset dir="${documentation.dir}/dist/doc"/>
        </copy>

    </target>

    <target name="package"
        depends="package.anttasks,package.framework,package.sample-servlet,package.documentation">
    </target>

    <!--
       ========================================================================
          Make the distribution.
       ========================================================================
     -->
    <target name="dist" depends="run,package">
    </target>

   <!--
       ========================================================================
         Clean generated files (including distributables)
       ========================================================================
    -->
    <target name="clean.anttasks" depends="init">

        <ant target="clean" antfile="${anttasks.dir}/build.xml"
            inheritAll="false">

            <property name="dist.dir" value="${anttasks.dir}/${dist.dir}"/>
        </ant>

    </target>

    <target name="clean.framework" depends="init">

        <ant target="clean" antfile="${framework.dir}/build.xml"
            inheritAll="false">

            <property name="dist.dir" value="${framework.dir}/${dist.dir}"/>
        </ant>

    </target>

    <target name="clean.sample-servlet" depends="init">

        <ant target="clean" antfile="${sample-servlet.dir}/build.xml"
            inheritAll="false">

            <property name="dist.dir"
                value="${sample-servlet.dir}/${dist.dir}"/>
        </ant>

    </target>

    <target name="clean.documentation" depends="init">

        <ant target="clean" antfile="${documentation.dir}/build.xml"
            inheritAll="false">

            <property name="dist.dir"
                value="${documentation.dir}/${dist.dir}"/>
        </ant>

    </target>

    <target name="clean.cactus" depends="init">

        <delete dir="${target.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${release.dir}"/>

    </target>

    <target name="clean"
        depends="clean.cactus,clean.anttasks,clean.framework,clean.sample-servlet,clean.documentation"
        description="Clean all generated files">
    </target>

    <!--
       ========================================================================
         Common script for both "release" and "gump" targets. Must only be
         called by "release" or "gump" target as it needs the following
         properties defined before calling it :

             cactus.release.name

       ========================================================================
    -->
    <target name="release.common" depends="init">

        <mkdir dir="${target.lib.dir}"/>
        <mkdir dir="${release.dir}"/>

        <!-- Copy external libraries in a tmp directory for them to be included
             in the distribution -->
        <copy todir="${target.lib.dir}" file="${log4j.jar}"/>
        <copy todir="${target.lib.dir}" file="${commons.httpclient.jar}"/>
        <copy todir="${target.lib.dir}" file="${httpunit.jar}"/>
        <copy todir="${target.lib.dir}" file="${junit.jar}"/>
        <copy todir="${target.lib.dir}" file="${aspectjrt.jar}"/>
        <copy todir="${target.lib.dir}" file="${servlet.jar}"/>

        <zip zipfile="${release.dir}/${cactus.release.name}.zip">

            <zipfileset dir="${dist.dir}" prefix="${cactus.release.name}"/>

            <!-- Add the external libraries to the zip (except the j2ee.jar one
                 as it is already present in containers -->
            <zipfileset dir="${target.lib.dir}" prefix="${cactus.release.name}/lib">
                <include name="*.jar"/>
            </zipfileset>

            <!-- Add the licenses -->
            <zipfileset dir="." prefix="${cactus.release.name}">
                <include name="LICENSE.*"/>
            </zipfileset>
        </zip>

    </target>

    <!--
       ========================================================================
         Generate a full release (i.e. the zipped release file)
       ========================================================================
    -->
    <target name="release.prepare" depends="init">

        <!-- For a release, the suffix is the version -->
        <property name="project.suffix" value="-${project.version}"/>

        <!-- Name of full release -->
        <property name="cactus.release.name"
            value="${project.prefix}${project.name.file}-${j2ee.api}${project.suffix}"/>

    </target>

    <target name="release" depends="release.prepare,clean,dist,release.common"
        description="Generate a release">
    </target>

    <!--
       ========================================================================
         Generate a nightly gump release (i.e. the zipped release file).
         Note: Our Gump scripts builds all sub projects separately (see
         gump.xml) and thus we only need to package the distribution but there
         is no need to actually run the dependent projects as they have already
         been run by Gump at this stage.
       ========================================================================
    -->
    <target name="gump.prepare" depends="init">

        <!-- Sets the date for the release prefix : YYYYMMDD -->
        <tstamp/>

        <!-- Suffix to add to all distributable files -->
        <property name="project.suffix" value="-${DSTAMP}"/>

        <!-- Name of nightly release -->
        <property name="cactus.release.name"
            value="${project.prefix}${project.name.file}-${j2ee.api}${project.suffix}"/>

    </target>

    <target name="gump" depends="gump.prepare,package,release.common"
        description="Generate a nightly gump release">
    </target>

    <!--
       ========================================================================
         Common target for both "release.src" and "gump.src".
       ========================================================================
    -->
    <target name="release.src.common" depends="init">

        <mkdir dir="${release.dir}"/>

        <zip zipfile="${release.dir}/${cactus.release.src.name}.zip">

            <zipfileset dir="." prefix="${cactus.release.src.name}">
                <exclude name="**/target/**"/>
                <exclude name="**/dist/**"/>
                <exclude name="**/release/**"/>
                <exclude name="**/misc/**"/>
                <exclude name="**/*.log"/>
                <exclude name="**/build.properties"/>
            </zipfileset>

        </zip>

    </target>

    <!--
       ========================================================================
         Generate the source distributable.
       ========================================================================
    -->
    <target name="release.src.prepare" depends="init">

        <!-- For a release, the suffix is the version -->
        <property name="project.suffix" value="-${project.version}"/>

        <!-- Name of full src release -->
        <property name="cactus.release.src.name"
            value="${project.prefix}${project.name.file}-src${project.suffix}"/>

    </target>

    <target name="release.src" depends="release.src.prepare,release.src.common"
        description="Generate release sources">
    </target>

    <!--
       ========================================================================
         Generate the source nightly build distributable.
       ========================================================================
    -->
    <target name="gump.src.prepare" depends="init">

        <!-- Sets the date for the release prefix : YYYYMMDD -->
        <tstamp/>

        <!-- Suffix to add to all distributable files -->
        <property name="project.suffix" value="-${DSTAMP}"/>

        <!-- Name of nightly src release -->
        <property name="cactus.release.src.name"
            value="${project.prefix}${project.name.file}-src${project.suffix}"/>

    </target>

    <target name="gump.src" depends="gump.src.prepare,release.src.common"
        description="Generate nightly gump sources">
    </target>

</project>