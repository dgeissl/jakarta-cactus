<?xml version="1.0"?>

<!DOCTYPE document SYSTEM "./dtd/document-v10.dtd">

<document>
  <header>
    <title>JBuilder 4 Integration</title>
    <authors>
      <person name="Cedric Chabanois" email="cchabanois@ifrance.com"/>
      <person name="Kunal Vaishnav" email="Kunal_Vaishnav@jdedwards.com"/>
      <person name="Vincent Massol" email="vmassol@users.sourceforge.net"/>
    </authors>
  </header>

  <body>

    <s1 title="Forewords and Requirements">
      <p>
        I would like to thank <link href="mailto:cchabanois@ifrance.com">
        Cedric Chabanois</link> and
        <link href="mailto:Kunal_Vaishnav@jdedwards.com">Kunal Vaishnav</link>
        for providing this tutorial.
      </p>
      <p>
        First of all, JUnit and Cactus jar files are needed for this tutorial, please
        download them :
      </p>
      <ul>
        <li>
          <link href="downloads.html">cactus</link>
        </li>
        <li>
          <link href="http://www.junit.org/">junit</link>
        </li>
      </ul>
      <note>
        If for any reason you cannot succeed in integrating Cactus with
        JBuilder, please send a mail to the Cactus mailing list.
      </note>
    </s1>

    <s1 title="Step 1 : Create junit and cactus libraries">

      <p>
        Let's assume the following conventions :
        <strong><code>{Cactus dir}</code></strong> is the directory where you
        have unzipped the Cactus distribution or sources.
        Let's also assume <strong><code>{Tomcat dir}</code></strong> to be the Tomcat directory.
      </p>

      <figure src="images/jb_libraries.gif" alt="jbuilder libraries" />


      <s2 title="Create the junit library">
        <p>
      	  Create a new library named <code>junit</code>.
      	  Add the junit.jar file to this library in the class tab.
        </p>

      </s2>

      <s2 title="Create the cactus library">
        <p>
          Create a library named <code>cactus</code>.
          Add commons-cactus.jar and optionnaly log4j-core.jar. Note that
          log4j-core.jar is useful only if you wish to get some Cactus runtime logs.
        </p>

        <note>
          You can also add the source file directories in the source tab :
          <code>{Cactus dir}/src/framework/servlet22</code> and
          <code>{Cactus dir}/src/framework/share</code>
          This way, you will be able to debug inside cactus sources.
        </note>

      </s2>

      <s2 title="Create the tomcat library">
        <p>
          Create another library named <code>tomcat</code>
          and add all the jar files from <code>{Tomcat dir}/lib</code>.
        </p>

        <note>
          If you use JBuilder 4 Enterprise or JBuilder 4 Professionnal, you don't need to create
          this library because Tomcat 3.1 is provided with those versions.
        </note>

      </s2>
    </s1>

    <s1 title="Step 2 : Set up the cactus.properties file">

      <p>
        Edit a new file named <code>cactus.properties</code>
        (see the <link href="howto_config.html">Configuration Howto</link>
        tutorial for more details on <code>cactus.properties</code>).
      </p>
      <p>
        Sample <code>cactus.properties</code> file :
      </p>
<source><![CDATA[
  cactus.servletRedirectorURL = http://localhost:8080/cactus/ServletRedirector
]]></source>
      <p>
        Copy your <code>cactus.properties</code> file to a directory present
        in your classpath. You can copy it to a directory and add this
        directory in the class tab of the cactus library.
      </p>

    </s1>

    <s1 title="Step 3 : Configure Tomcat Environment">

      <s2 title="Create a cactus webapp">

        <p>
          Create and edit the file <code>{Tomcat dir}/webapps/cactus/WEB-INF/web.xml</code> :
        </p>

<source><![CDATA[
<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE web-app
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN"
    "http://java.sun.com/j2ee/dtds/web-app_2_2.dtd">

<web-app>
    <servlet>
        <servlet-name>ServletRedirector</servlet-name>
        <servlet-class>org.apache.commons.cactus.server.ServletTestRedirector</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>ServletRedirector</servlet-name>
        <url-pattern>/ServletRedirector</url-pattern>
    </servlet-mapping>
</web-app>
]]></source>

      </s2>

      <note>
        You can edit <code>{Tomcat dir}/conf/web.xml</code> instead if you prefer. <br />
        You can also edit the web.xml file of the webapp where is located the servlet(s) you want to test. <br />
        Don't forget to modify <code>cactus.properties</code> file accordingly.
      </note>
    </s1>

    <s1 title="Step 4 : Configure your project">
      <ol>
        <li>
          Put <code>-classic -Dtomcat.home="{Tomcat dir}"</code> as the VM parameters for your project and
          <code>org.apache.tomcat.startup.Tomcat</code> as the main class.
        </li>
        <li>
          Add the following libraries in the <code>Required Libraries</code> tab in the
          project properties :
          <ul>
            <li>tomcat</li>
            <li>servlet</li>
            <li>junit</li>
            <li>cactus</li>
          </ul>
          <figure src="images/jb_paths.gif" alt="jbuilder libraries" />
        </li>
      </ol>
    </s1>

    <s1 title="Step 5 : Test and debug your servlet">

      <s2 title="Test your servlet">
        <ol>
          <li>
            Start Tomcat using the <code>Run/Run Project</code> menu.
          </li>
          <li>
            Run your unit tests : right Click on the file containing your test case and click on <code>run</code>
          </li>
        </ol>
      </s2>

      <s2 title="Debug your servlet and your tests">
        <p>
          You can easily print the results of the methods on the server-side itself.
        </p>
        <p>
          You can also start Tomcat in debug mode (<code>Run/debug project</code>).
          This way, you can stop at breakpoints on methods that are executed on the
          server side (<code>void testXXX()</code> for example)
        </p>
        <p>
          If you right click on the file containing your test case and click on <code>debug</code>,
          you can stop at breakpoints on methods that are executed on the client side like
          <code>void endXXX(HttpURLConnection)</code> or <code>void beginXXX(ServletTestRequest)</code>
        </p>
      </s2>
    </s1>

  </body>
</document>
