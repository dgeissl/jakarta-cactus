<?xml version="1.0"?>

<!DOCTYPE document SYSTEM "./dtd/document-v10.dtd">

<document>
  <header>
    <title>Getting Started</title>
    <authors>
      <person name="Vincent Massol" email="vmassol@apache.org"/>
    </authors>
  </header>

  <body>

    <s1 title="Installing Cactus">

      <p>
        There is not really an installation of Cactus per see, as Cactus is
        not an application but a framework. However you do need to understand
        how it integrates in your working environment. Thus, installing Cactus
        simply means to understand what jars need to be put where and what are
        the configuration files you need to have and edit. This is discussed
        below.
      </p>
      <p>
        There are 2 kinds of environments in which you may want to use
        Cactus, mainly :
      </p>
      <ul>
        <li>
          within your IDE,
        </li>
        <li>
          from the command line, using
          <link href="http://jakart.apache.org/ant">Ant</link>
        </li>
      </ul>
      <note>
        Usually, these 2 environments are complementary. A good strategy is
        to use an IDE to increase day to day productivity, run quickly the
        Cactus tests in the IDE and use Ant to perform the
        (continuous) builds (including running the Cactus tests).
      </note>

    </s1>

    <s1 title="System Requirements">

      <p>
        In order to run Cactus tests you need to have the following
        software already installed on your system :
      </p>

      <ul>
        <li>
          <strong>Java Virtual Machine</strong>
          A Java 1.2 or greater compatible virtual machine must be present. Note
          that all servlet engines require a JVM to run so if you are already
          using servlets you already have one installed.
        </li>
        <li>
          <strong>Servlet Engine</strong>
          A Servlet 2.x compliant servlet engine (where x >= 2.2) for running
          your Cactus tests must be present.
        </li>
        <li>
          <strong>Ant (optional)</strong>
          Ant is only needed if you are working from the command line or if you
          wish to automate the execution of tests. If you wish to use Ant,
          make sure that you read the
          <link href="howto_ant.html">Ant Howto</link> after you finish
          reading this introductory guide.
        </li>
      </ul>

    </s1>

    <s1 title="The Cactus files">

      <p>
        At this point, you should have
        <link href="downloads.html">downloaded</link> a Cactus distribution
        (for the Servlet API you intend to use) and unzipped it in a
        <code>[cactus root]</code> directory.
      </p>
      <p>
        The jars making up Cactus can be found in
        <code>[cactus root]/lib</code>. Namely, they are :
      </p>
      <ul>
        <li>
          <strong><code>cactus.jar</code></strong> : the main jar,
          contains the framework classes. You can find this jar in
          <code>[cactus root]/lib</code>.
        </li>
        <li>
          <strong><code>cactus-ant.jar</code></strong> : a jar which
          contains some custom Ant tasks to help integrate easily with Ant.
          This is only needed if you wish to use Ant for automating the
          execution of Cactus tests. For more information on how to integrate
          Cactus with Ant, see the
          <link href="howto_ant.html">Ant Howto</link> tutorial. You also
          find this jar in <code>[cactus root]/lib</code>.
        </li>
        <li>
          <strong><code>httpclient.jar</code></strong> : Cactus is relying
          on the Jakarta Commons HttpClient framework for Cookie handling.
        </li>
        <li>
          <strong><code>junit.jar</code></strong> : Cactus extends JUnit and
          thus needs the JUnit jar.
        </li>
        <li>
          <strong><code>log4j-core.jar</code></strong> : Cactus uses Log4j
          for performing all internal logging. This jar is optional and if
          you don't put in the classpaths, no logs will be generated.
        </li>
      </ul>
      <p>
        The Cactus configuration files are described in the
        <link href="howto_config.html">Configuration Howto</link> tutorial.
      </p>

    </s1>

    <s1 title="The Classpath">

      <p>
        You must understand that your Cactus tests are started by a JUnit
        Test Runner (in the client JVM) and that the Cactus TestCase that you
        have extended will connect to the Cactus Redirector (in the server
        JVM), where your <code>testXXX()</code> methods will be executed. See
        <link href="how_it_works.html">How it works</link> to understand the
        mechanism.
      </p>
      <note>
        <strong>It is very important that you understand what files you need
        to put in the client and server classpaths, as 99% of Cactus
        errors come from an incorrect classpath !</strong>
      </note>

      <figure src="images/classpath.jpg" alt="Classpaths"/>

      <s2 title="Client side classpath">

        <p>
          The Cactus tests are started by running a JUnit Test Runner (For
          explanations on how JUnit works see the
          <link href="http://junit.sourceforge.net">JUnit web site</link>).
          As pictured in figure 1, you need to have the following jars and classes
          in your client side classpath :
        </p>
        <ul>
          <li>
            <strong><code>junit.jar</code></strong> : obviously this is needed
            for the JUnit Test Runner and because the Cactus
            <code>XXXTestCase</code> classes extend the JUnit
            <code>org.junit.framework.TestCase</code> class.
          </li>
          <li>
            <strong><code>cactus.jar</code></strong> : well, this is the
            Cactus jar containing all Cactus classes,
          </li>
          <li>
            <strong>your test classes</strong> : these are
            your test classes that extend the Cactus <code>XXXTestCase</code>
            classes,
          </li>
          <li>
            <strong><code>servlet.jar</code></strong> : these are the
            Servlet API interfaces (for the Servlet API you are using). This
            is needed because your test case extend one or several of
            <code>XXXTestCase</code> which use class variables that are
            servlet objects (<code>HttpSevletRequest</code>,
            <code>PageContext</code>, ...). You can get this jar either from
            your servlet engine or from the
            <link href="http://java.sun.com/products/servlet/download.html">
            Servlet download page</link> of the Sun web site. It is also
            included in the <code>j2ee.jar</code>, available either from your
            servlet engine or from the
            <link href="http://java.sun.com/j2ee/download.html">J2EE download
            page</link> of the Sun web site (but it contains a lot of other
            API that you probably don't need).
          </li>
          <li>
            <strong><code>httpclient.jar</code></strong> : needed for
            Cactus Cookie handling.
          </li>
          <li>
            <strong><code>log4j.jar</code> (optional)</strong> : only needed
            when you want Cactus to output debugging information on the client
            side.
          </li>
          <li>
            <strong><code>httpunit.jar</code></strong>, <strong>
            <code>Tidy.jar</code></strong> and <strong>
            <code>xerces.jar</code> (optional)</strong> : only needed if you
            wish to use
            <link href="http://httpunit.sourceforge.net">HttpUnit</link>
            in your <code>endXXX()</code> methods (see the
            <link href="howto_httpunit.html">HttpUnit Howto</link> tutorial).
            The 3 jars mentioned above are part of the HttpUnit distribution.
          </li>
        </ul>

        <note>
          If you have the habit of declaring class variables for the classes
          to test (as opposed to declaring them within the
          <code>testXXX()</code> method), you'll also need to put your classes
          under test in the client side classpath.
        </note>

        <p>
          In addition to the above mentionned jars and classes, you will also
          need to put the <strong><code>cactus.properties</code></strong>
          configuration file in your classpath (because it is a java properties
          file). This file is described in the
          <link href="howto_config.html">Config Howto</link> tutorial).
        </p>

        <note>
          In theory you would also need to put the
          <code>log_client.properties</code> properties file in your classpath.
          However a default one is provided in <code>cactus.jar</code>
          (and thus is on the classpath as <code>cactus.jar</code> is
          itself in the classpath !).
        </note>

      </s2>

      <s2 title="Server side classpath">

        <p>
          The server side part is a webapp. It can be packaged as a .war file
          or as expanded war. It should have the following structure, which
          will ensure that the classpath is correct :
        </p>

        <ul>
          <li>
            <strong><code>WEB-INF/lib/cactus.jar</code></strong> : the
            Cactus main jar,
          </li>
          <li>
            <strong><code>WEB-INF/lib/junit.jar</code></strong> : this is
            needed because the Cactus <code>XXXTestCase</code> extends
            the JUnit <code>org.junit.framework.TestCase</code> class.
          </li>
          <li>
            <strong><code>WEB-INF/classes/&lt;your test classes&gt;</code>
            </strong> : obviously as their <code>testXXX()</code> methods will
            get executed in the container.
          </li>
          <li>
            <strong><code>WEB-INF/classes/&lt;your classes under test&gt;</code>
            </strong> : will be called by your test classes.
          </li>
          <li>
            <strong><code>WEB-INF/lib/log4j.jar</code> (optional)</strong> :
            only needed when you want Cactus to output debugging information
            on the server side.
          </li>
        </ul>

       <note>
          If you have several webapps that use cactus you may be tempted to 
          place the <code>cactus.jar</code> in your container's shared library
          folder. However, this approach will not work in many cases because
          code in a shared location (cactus) cannot access code in a
          specific webapp (your test cases). This restriction makes sense
          since you would not want <code>com.foo.EvilClass</code> 
          in webapp A to conflict with <code>com.foo.EvilClass</code> in webapp
          B.
        </note>

        <note>
          In theory you would also need to put the
          <code>log_server.properties</code> configuration file in your
          classpath. However a default one is provided in
          <code>cactus.jar</code>
          (and thus is on the classpath as <code>cactus.jar</code> is
          itself in the classpath !).
        </note>

      </s2>

    </s1>

    <s1 title="What's next ?">

      <p>
        You should now read the <link href="howto_config.html">Configuration
        Howto</link> tutorial. Then, read the
        <link href="howto_testcase.html">TestCase Howto</link>, which
        explains how to write a Cactus Test Case.
        Then, you could try to install the Cactus
        Sample by following the <link href="howto_samples.html">Samples
        Howto</link> tutorial.
      </p>

    </s1>

  </body>
</document>
