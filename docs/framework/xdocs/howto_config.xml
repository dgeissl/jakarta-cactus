<?xml version="1.0"?>

<!DOCTYPE document SYSTEM "./dtd/document-v10.dtd">

<document>
  <header>
    <title>Configuration Howto</title>
    <authors>
      <person name="Vincent Massol" email="vmassol@users.sourceforge.net"/>
    </authors>
  </header>

  <body>

    <s1 title="The configuration files">

      <note>
        You should read the <link href="getting_started.html">Getting
        Started</link> guide first if you have not already done so.
      </note>

      <p>
        Here are the configuration files used by Cactus :
      </p>

      <figure src="images/config.jpg" alt="Configuration files"/>

      <p>
        There are two kind of configuration files :
      </p>
      <ul>
        <li>
          <jump anchor="clientside">Client side configuration files</jump>
        </li>
        <li>
          <jump anchor="serverside">Server side configuration files</jump>
        </li>
      </ul>

      <anchor id="clientside"/>
      <s2 title="Client side configuration files">

        <s3 title="cactus.properties">

          <note>
            Do not forget to put this file on the <strong>client
            classpath</strong> (meaning you need
            to put the directory where this file is located in the client
            side classpath, not the file itself !). See the
            <link href="getting_started.html">Getting Started</link> guide to
            understand how to set up the classpath.
          </note>

          <p>
            The <code>cactus.properties</code> file is used to tell the client
            side part of Cactus what is the URL to connect to the Cactus
            Redirector set up on the server side (see
            <link href="how_it_works.html">How it works</link> if you don't
            know what a Cactus Redirector is).
          </p>

          <p>
            You need to set the following properties in
            <code>cactus.properties</code> :
          </p>

          <table>
            <tr>
              <td>
                <strong>Property Name</strong>
              </td>
              <td>
                <code>cactus.servletRedirectorURL</code>
              </td>
            </tr>
            <tr>
              <td>
                <strong>Description</strong>
              </td>
              <td>
                URL to which the Redirector Servlet is mapped to
              </td>
            </tr>
            <tr>
              <td>
                <strong>Example</strong>
              </td>
              <td>
                <code>http://localhost:8080/test/ServletRedirector</code>
              </td>
            </tr>
          </table>

          <p>
            <br/>
          </p>

          <table>
            <tr>
              <td>
                <strong>Property Name</strong>
              </td>
              <td>
                <code>cactus.jspRedirectorURL</code>
              </td>
            </tr>
            <tr>
              <td>
                <strong>Description</strong>
              </td>
              <td>
                URL to which the Redirector JSP is mapped to
              </td>
            </tr>
            <tr>
              <td>
                <strong>Example</strong>
              </td>
              <td>
                <code>http://localhost:8080/test/JspRedirector</code>
              </td>
            </tr>
          </table>

          <p>
            Sample <code>cactus.properties</code> file :
          </p>

<source><![CDATA[
# Configuration file for Cactus.

# Each project using Cactus need to have such a file put in the client side
# CLASSPATH (Meaning the directory containgin this file should be in the client
# side CLASSPATH, not the file itself of course ... :) )

# Defines the URLs that will be used by Cactus to call it's redirectors
# (Servlet and JSP). You need to specify in these URLs the webapp context
# that you use for your application. In the example below, the context is
# "test".

cactus.servletRedirectorURL = http://localhost:8080/test/ServletRedirector
cactus.jspRedirectorURL = http://localhost:8080/test/JspRedirector
]]></source>

        </s3>

        <s3 title="log_client.properties">

          <p>
            A default <code>log_client.properties</code> is already provided
            in the <code>commons-cactus.jar</code> jar. It is used for
            configuring Log4j, which is the logging framework used by Cactus
            to log debug information.
          </p>
          <p>
            If the Log4j jar is not present on the client side classpath,
            Cactus will not log anything. To enable logging, just put the
            Log4j jar in the client side classpath.
          </p>
          <p>
            The default <code>log_client.properties</code> is :
          </p>

<source><![CDATA[
# Properties for configuring Log4j
# This is the configuring for logging on the JUnit side (i.e. the client side)

log4j.appender.cactus = org.apache.log4j.FileAppender
log4j.appender.cactus.File = cactus_client.log
log4j.appender.cactus.Append = false
log4j.appender.cactus.layout = org.apache.log4j.PatternLayout
log4j.appender.cactus.layout.ConversionPattern = %r [%t] %-5p %c{2} %x - %m %n

log4j.category.org.apache.commons.cactus = DEBUG, cactus
]]></source>

          <p>
            If you want to understand how to configure Log4j, go to the
            <link href="http://jakarta.apache.org/log4j">Log4j web site</link>.
            Basically, this configuration tells Log4j to log all debug level
            messages to a <code>cactus_client.log</code> file (which will be
            located in the directory where you started the client JVM).
          </p>

          <p>
            If you wish to define another file name and location or other
            logging parameter, just provide your own
            <code>log_client.properties</code> file (it has to be named this
            way) and put in the client side classpath <strong>before</strong>
            the <code>commons-cactus.jar</code> file.
          </p>

        </s3>

      </s2>

      <anchor id="serverside"/>
      <s2 title="Server side configuration files">

        <s3 title="web.xml">

          <p>
            Your server side tests are packaged as a web application (either
            expanded or as .war file) and thus you need to have a
            <code>web.xml</code> file to configure your test web application.
          </p>
          <note>
            If your servlet engine does not support web applications, it
            won't support a <code>web.xml</code> file. You'll need to edit
            your servlet engine proprietary configuration file and find out
            how to map a URL to a Servlet.
          </note>
          <p>
            You need to register the Cactus Redirectors that you use (see
            <link href="how_it_works.html">How it works</link> if you don't
            know what a Cactus Redirector is). In the <code>web.xml</code>
            file, you'll define :
          </p>
          <ul>
            <li>
              the name of the Redirector Servlet class,
            </li>
            <li>
              the URI that will be used to call the Redirector Servlet. This
              needs to match the URL specified in the
              <code>cactus.properties</code> configuration file above.
            </li>
            <li>
              optionally some configuration data that can be retrieved
              in your test by using the <code>config</code> implicit object
              (of type <code>ServletConfig</code>).
            </li>
          </ul>

          <p>
            For example, in order to match the sample
            <code>cactus.properties</code> file defined above, we'll need to
            name our web application "<code>test</code>" and  write our
            <code>web.xml</code> in the following way :
          </p>

<source><![CDATA[
<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE web-app
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN"
    "http://java.sun.com/j2ee/dtds/web-app_2.2.dtd">

<web-app>

    <servlet>
        <servlet-name>ServletRedirector</servlet-name>
        <servlet-class>org.apache.commons.cactus.server.ServletTestRedirector</servlet-class>
    </servlet>

    <servlet>
        <servlet-name>JspRedirector</servlet-name>
        <jsp-file>/somewhere/redirector.jsp</jsp-file>
    </servlet>

    <servlet-mapping>
        <servlet-name>ServletRedirector</servlet-name>
        <url-pattern>/ServletRedirector</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>JspRedirector</servlet-name>
        <url-pattern>/JspRedirector</url-pattern>
    </servlet-mapping>

</web-app>
]]></source>

          <note>
            If you are using the JSP Redirector (i.e. you have test classes
            that extend <code>JspTestCase</code>), you <strong>must</strong>
            copy the <code>redirector.jsp</code> file (found in the
            <code>sample/web/test</code> directory where you unpacked your
            Cactus distribution) anywhere in your webapp and you need to
            out it's relative path in the mapping defined above (here we
            have put it in a directory named <code>somewhere</code> right under
            the webapp root.
          </note>
          <note>
            We have used the <code>&lt;jsp-file&gt;</code> tag to define the
            mapping for the JSP Redirector page. However some servlet engine
            still don't support this tag (although it is in the Servlet 2.2
            specifications). If this is your case, simply do not define any
            mapping in <code>web.xml</code> for the JSP Redirector and use
            the following URL in your <code>cactus.properties</code> :
            <code>cactus.jspRedirectorURL =
            http://localhost:8080/test/somewhere/redirector.jsp</code>
          </note>

          <p>
            If you want to provide some initialisation parameters that will
            be available to the <code>config</code> implicit object available
            to you in your test case, simply use the standard <code>
            &lt;init-param&gt;</code> tag, as in :
          </p>

<source><![CDATA[
[...]
    <servlet>
        <servlet-name>ServletRedirector</servlet-name>
        <servlet-class>org.apache.commons.cactus.server.ServletTestRedirector</servlet-class>
        <init-param>
          <param-name>param1</param-name>
          <param-value>value1 used for testing</param-value>
        </init-param>
    </servlet>
[...]
]]></source>

          <note>
            Within your <code>testXXX()</code> code, you can also call the
            <code>config.setInitParameter()</code> method (<code>config</code>
            being the implicit object of type <code>ServletConfig</code>) to
            simulate initialisation parameters as if they had been defined in
            your <code>web.xml</code>.
          </note>

        </s3>

        <s3 title="log_server.properties">

          <p>
            A default <code>log_server.properties</code> is already provided
            in the <code>commons-cactus.jar</code> jar. It is used for
            configuring Log4j, which is the logging framework used by Cactus
            to log debug information.
          </p>
          <p>
            If the Log4j jar is not present on the server side classpath,
            Cactus will not log anything. To enable logging, just put the
            Log4j jar in the server side classpath.
          </p>
          <p>
            The default <code>log_server.properties</code> is :
          </p>

<source><![CDATA[
# Properties for configuring Log4j
# This is the configuring for logging on the server side

log4j.appender.cactus = org.apache.log4j.FileAppender
log4j.appender.cactus.File = cactus_server.log
log4j.appender.cactus.Append = false
log4j.appender.cactus.layout = org.apache.log4j.PatternLayout
log4j.appender.cactus.layout.ConversionPattern = %r [%t] %-5p %c{2} %x - %m %n

log4j.category.org.apache.commons.cactus = DEBUG, cactus
]]></source>

          <p>
            If you want to understand how to configure Log4j, go to the
            <link href="http://jakarta.apache.org/log4j">Log4j web site</link>.
            Basically, this configuration tells Log4j to log all debug level
            messages to a <code>cactus_server.log</code> file (which will be
            located in the current directory of your servlet engine).
          </p>

          <p>
            If you wish to define another file name and location or other
            logging parameter, just provide your own
            <code>log_server.properties</code> file (it has to be named this
            way) and put in the <code>WEB-INF/classes</code> directory of
            your webapp (and hope that the webapp classloader of your server
            picks up the files in <code>WEB-INF/classes</code> before the ones
            in <code>WEB-INF/lib</code>, where <code>commons-cactus.jar</code>
            is located ... :) I don't know if this is part of the
            specification). Alternatively, edit the file in
            <code>commons-cactus.jar</code> !
          </p>

        </s3>

      </s2>

    </s1>

  </body>
</document>
