<?xml version="1.0"?>

<roadmap title="Roadmap/Todo for Cactus">

  <s1 title="Forewords">
    <p>
      As is stated on the Cactus <link href="goals.html">goals</link> page, the
      intention is to explore as much as possible in the realm of unit testing
      of server side java code ...
    </p>
    <p>
      This brings a bad news and a good one ... The
      bad one is that the TODO list is likely to keep growing or at least
      have a respectable size ... The good one
      is that there will be work for everyone ... :-)
    </p>
    <p>
      If you are interested in participating, send an email on the Cactus mailing
      list stating your interest and you'll be enrolled right away ... We're
      always looking for help ! Don't be put off if in the "Volunteer" column
      there is already a person listed. On the contrary, the more person that
      participate in a given task, the better (like in pair programming, several
      sets of eyes are always better than one!). However you'll need to sync.
      with these others persons but this is easily done by posting to the
      mailing-list.
    </p>
    <p>
      The game has just begun ... !
    </p>
  </s1>

  <version title="Version 1.2">

    <category title="Design/Code">
      <action assigned-to="Nicholas Lesiecki">
        Provide some sample taglib tests.
      </action>
    </category>

  </version>

  <version title="Version 1.x where x>2">

    <category title="Documentation">
      <action>
        Add a tutorial for VAJava with Tomcat environment (the current
        tutorial on the web site is for VAJava with WTE). Needed steps
        are detailed on the cactus-user list, thread <code>"Cactus, Apache
        Tomcat &amp; VisualAge"</code>. Thanks to
        <link href="mailto:Jim.Young@cibc.com">Jim Young</link>.
      </action>
      <action>
        Add a tutorial for building Cactus from the source distribution.
      </action>
      <action assigned-to="Jari Worsley">
        Write a tutorial that explains how to use Cactus to do unit testing of
        JSP, i.e. only test
        the JSP itself and not the controller part and the model (only test the
        View in an MVC model). This is done by using mock implementations of
        java beans used in the JSP to unit test, set these java beans in the
        testXXX() method of a cactus test and then assert the result of the
        JSP executing in the endXXX() method.
      </action>
    </category>

    <category title="Build Process">
      <p>
        All tasks that are related to building Cactus in general.
      </p>
      <action>
        Add Ant scripts to support WebLogic 6.0.
      </action>
      <action>
        Finalize support for Enhydra 3.1.1. There are some errors upon
        starting the enhydra server and the <code>testOut()</code> method
        is failing. Need help from Enhydra experts to go forward.
      </action>
      <action>
        Add the Ant scripts for JBoss 2.x w/Tomcat provided by Jeffrey Madynski
        (jmadynski@food.com) on the jakarta-commons mailing list (Subject
        "[cactus] Using Cactus with JBoss-2.2.1 with Embedded Tomcat"). The
        scripts need to be reworked so that the deployed test war is deployed
        within the <code>target</code> output directory and not to where
        JBoss/Tomcat is installed.
      </action>
    </category>

    <category title="Design/Code">
      <action>
        Add methods that are called before and after each test, but on the
        client side (i.e. before the <code>beginXXX()</code> and
        <code>endXXX()</code> methods). They
        would act the same way as <code>setUp()</code> and
        <code>tearDown()</code> but on the client side. They could be
        named <code>init()</code> and <code>destroy()</code>, or maybe we
        should rather rename the existing <code>setUp()</code> and
        <code>tearDown()</code> and have something consistent like :
        <code>setUpClient()</code>, <code>setUpServer()</code>,
        <code>tearDownClient()</code> and <code>tearDownServer()</code> ?
      </action>
      <action>
        Provide support for generating Session cookies and URL Sessions
        (URL rewriting). A description of the mechanism has been
        posted in thread "How does cactus simulate a session" on the
        Cactus user mailing list. Thanks to
        <link href="mailto:kyle.w.willkomm@accenture.com">Kyle W.
        Willkomm</link>.
      </action>
      <action>
        Add an API in <code>WebRequest</code> to send data to the URL
        connection output stream. This is, for example, to easily test code
        that upload files to a servlet. This would need managing
        "multipart/form-data" MIME type in the HTTP connection. A
        convenience method, like
        <code>WebRequest.uploadFile(InputStream)</code> should be added. We
        should wait till Cactus moves to using commons-httpclient for HTTP
        connections (in replacement of <code>HttpURLConnection</code>).
      </action>
      <action>
        Design and implement a mechanism for better supporting unit testing of
        EJBs (they are currently supported). There are several possible
        mechanisms :
        <ul>
          <li>
            in-container, calling the remote methods from the testXXX() methods
            by providing a helper class that looks up the home interface, create
            an instance and call the method,
          </li>
          <li>
            in-container, by providing an EJB Redirector which is itself an EJB
            (and thus has access to container objects) and just call the EJB
            method to test as a standard java class, providing implicit objects
            to an EJBTestCase that user need to derive (exactly the same
            mechanism currently used for Servlets),
          </li>
          <li>
            others ?
          </li>
        </ul>
      </action>
      <action>
        Support unit testing of Servlet code that uses Security APIs, such as
        <code>isUserInRole()</code>, ...
      </action>
      <action>
        Find a mechanism to instanciate Log4j just for Cactus and not
        interfere with a user using Log4j in it's code. At the current time,
        Cactus reconfigure Log4j at init and thus will invalidate the
        configuration of a Cactus user or that user will have to add
        the Log4j configuration for Cactus in its own config file.
      </action>
      <action assigned-to="Hudson Wong, Vincent Massol">
        Add an EJB sample application to demonstrate how to perform EJB
        unit testing (the tutorial that explains the process will be part
        of Cactus 1.2 but the inclusion of the sample will be delivered
        in a subsequent release as it involves some changes in the build
        process).
      </action>
    </category>

    <category title="Ideas">
      <p>
        Ideas to explore ...
      </p>
      <action>
        Create a new package <code>org.apache.cactus.extensions</code> for
        putting extensions to Cactus Test Cases. The first extension
        would be an extension that runs a bunch of test at the same time,
        thus spawing several threads in the container in order to discover
        bugs [Note: We would have to correct the name under which Cactus test
        results are stored in the application context so that it is unique
        per test case]. We would need to create a
        <code>org.apache.cactus.extensions.ParallelServletTestCase</code>.
        The constructor would take some parameters, such as the number of
        parallel threads to spawn, ... Idea suggested by
        <link href="mailto:rimovm@centercomp.com">Michael Rimov</link>.
      </action>
      <action>
        Use <link href="http://xdoclet.sourceforge.net/docs/">XDoclet</link>
        with Cactus to better provide continuous integration. It could be
        used to automatically generate <code>web.xml</code> files,
        automatically generating test cases from methods to test, ...
      </action>
      <action>
        Integration to Netbeans in general and especially integration with the
        Netbeans XTest module.
      </action>
      <action>
        When we want to unit test classes written for the Struts framework
        (for example), we can use Cactus to provide access to all Servlet API
        implicit objects. However, there is still a need to get access to
        Struts implicit objects (for example, calling the perform() method
        of an Action class need to get hold of several Struts object
        beforehand). A solution might be to provide some factory helper classes
        to provide these objects. This could go in a
        <code>org.apache.cactus.util.struts</code> package but will
        need to be maintained and synced with Struts versions. Another solution
        might be to host these helper classes within Struts itself. We need to
        think about that (same issue as with Ant custom tasks - There have
        been lengthy discussion on the subject on the Ant mailing list).
        Another solution is to use Struts Mock Objects (could be done as part
        of the SourceForge Mock Objects project - www.mockobjects.com).
      </action>

    </category>

  </version>

</roadmap>