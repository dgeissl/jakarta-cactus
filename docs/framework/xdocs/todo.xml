<?xml version="1.0"?>

<roadmap title="Roadmap/Todo for Cactus">

  <s1 title="Forewords">
    <p>
      As is stated on the Cactus <link href="goals.html">goals</link> page, the
      intention is to explore as much as possible in the realm of unit testing
      of server side java code ...
    </p>
    <p>
      This brings a bad news and a good one ... The
      bad one is that the TODO list is likely to keep growing or at least
      have a respectable size ... The good one
      is that there will be work for everyone ... :-)
    </p>
    <p>
      If you are interested in participating, send an email on the Cactus mailing
      list stating your interest and you'll be enrolled right away ... We're
      always looking for help ! Don't be put off if in the "Volunteer" column
      there is already a person listed. On the contrary, the more person that
      participate in a given task, the better (like in pair programming, several
      sets of eyes are always better than one!). However you'll need to sync.
      with these others persons but this is easily done by posting to the
      mailing-list.
    </p>
    <p>
      The game has just begun ... !
    </p>
  </s1>

  <version title="Version 1.2">

    <category title="Documentation">
      <action assigned-to="Hudson Wong">
        Add a tutorial that explains how to unit test EJBs in the current
        version of Cactus.
      </action>
      <action assigned-to="Nicholas Lesiecki">
        Write a tutorial that explains how to unit test Tag libraries.
      </action>
    </category>

    <category title="Build Process">
      <p>
        All tasks that are related to building Cactus in general.
      </p>
      <action>
        Add the Ant scripts for JBoss 2.x w/Tomcat provided by Jeffrey Madynski
        (jmadynski@food.com) on the jakarta-commons mailing list (Subject
        "[cactus] Using Cactus with JBoss-2.2.1 with Embedded Tomcat"). The
        scripts need to be reworked so that the deployed test war is deployed
        within the <code>out</code> output directory and not to where
        JBoss/Tomcat is installed.
      </action>
      <action assigned-to="Vincent Massol">
        Add Ant scripts to support WebLogic 6.0.
      </action>
      <action>
        Finalize support for Enhydra 3.1.1. Verify it works and correct if not.
      </action>
    </category>

    <category title="Design/Code">
      <action assigned-to="Jari Worsley, Nicholas Lesiecki">
        Continue support for JSP Taglib. Possibly add some heper classes to
        help implement unit test for taglibs.
      </action>
      <action>
        Handle <code>getRealPath()</code>, <code>getPathTranslated()</code> in
        the <code>ServletRedirectorRequest</code> class. With the current
        version if you use these API, it will return the native path for the
        Servlet Redirector and not for your servlet being tested
      </action>
      <action>
        Add an API in <code>WebRequest</code> to send data to the URL
        connection output stream. This is to easily test code that sends bytes
        of data as POST data to the servlet.
      </action>
    </category>

  </version>

  <version title="Version 1.x where x>2">

    <category title="Documentation">
      <action>
        Add a tutorial for building Cactus from the source distribution.
      </action>
      <action assigned-to="Jari Worsley">
        Write a tutorial that explains how to use Cactus to do unit testing of
        JSP, i.e. only test
        the JSP itself and not the controller part and the model (only test the
        View in an MVC model). This is done by using mock implementations of
        java beans used in the JSP to unit test, set these java beans in the
        testXXX() method of a cactus test and then assert the result of the
        JSP executing in the endXXX() method.
      </action>
    </category>

    <category title="Design/Code">
      <action>
        Design and implement a mechanism for better supporting unit testing of
        EJBs (they are currently supported). There are several possible
        mechanisms :
        <ul>
          <li>
            in-container, calling the remote methods from the testXXX() methods
            by providing a helper class that looks up the home interface, create
            an instance and call the method,
          </li>
          <li>
            in-container, by providing an EJB Redirector which is itself an EJB
            (and thus has access to container objects) and just call the EJB
            method to test as a standard java class, providing implicit objects
            to an EJBTestCase that user need to derive (exactly the same
            mechanism currently used for Servlets),
          </li>
          <li>
            others ?
          </li>
        </ul>
      </action>
      <action>
        Support unit testing of Servlet code that uses Security APIs, such as
        <code>isUserInRole()</code>, ...
      </action>
      <action>
        Find a mechanism to instanciate Log4j just for Cactus and not
        interfere with a user using Log4j in it's code. At the current time,
        Cactus reconfigure Log4j at init and thus will invalidate the
        configuration of a Cactus user or that user will have to add
        the Log4j configuration for Cactus in its own config file.
      </action>
    </category>

    <category title="Ideas">
      <p>
        Ideas to explore ...
      </p>
      <action>
        Create a Cactus Doclet. This will introduce new javadoc tags (like the
        <link href="http://sourceforge.net/projects/ejbdoclet">EJBDoclet</link>)
        that will be used by the javadoc command
        to do several things : generate test classes and test methods, generate
        richer documentation. Indeed, the best documentation for a method is
        it's test methods that show how to use it effectively. So maybe we could
        append to the HTML javadoc for a method the java test method code as an
        example.
      </action>
      <action>
        Integration to Netbeans in general and especially integration with the
        Netbeans XTest module.
      </action>
      <action>
        When we want to unit test classes written for the Struts framework
        (for example), we can use Cactus to provide access to all Servlet API
        implicit objects. However, there is still a need to get access to
        Struts implicit objects (for example, calling the perform() method
        of an Action class need to get hold of several Struts object
        beforehand). A solution might be to provide some factory helper classes
        to provide these objects. This could go in a
        <code>org.apache.cactus.util.struts</code> package but will
        need to be maintained and synced with Struts versions. Another solution
        might be to host these helper classes within Struts itself. We need to
        think about that (same issue as with Ant custom tasks - There have
        been lengthy discussion on the subject on the Ant mailing list).
        Another solution is to use Struts Mock Objects (could be done as part
        of the SourceForge Mock Objects project - www.mockobjects.com).
      </action>

    </category>

  </version>

</roadmap>