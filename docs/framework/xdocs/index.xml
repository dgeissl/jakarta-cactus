<?xml version="1.0"?>

<!DOCTYPE document SYSTEM "./dtd/document-v10.dtd">

<document>
  <header>
    <title>Cactus</title>
    <subtitle>Server-Side Unit Testing Framework</subtitle>
    <authors>
      <person name="Vincent Massol" email="vmassol@users.sourceforge.net"/>
    </authors>
  </header>

  <body>

    <s1 title="Project description">
      <p>
        Cactus is a simple test framework for unit testing server-side java
        code (Servlets, EJBs, Tag Libs, Filters, ...).
      </p>
      <p>
        The intent of Cactus is to lower the cost of writing tests for
        server-side code. It
        uses <link href="http://junit.org">JUnit</link> and extends it.
      </p>
      <p>
        Cactus has been developed with the idea of automatic testing in mind
        and it provides a packaged and simple
        mechanism based on <link href="http://jakarta.apache.org/ant">Ant</link>
        to automate server-side testing.
      </p>
      <p>
        Cactus implements an in-container strategy (click on the diagram below
        to undestand how it works). An alternative but complementary approach
        not covered by Cactus is to use Mock Objects (see the
        <link href="mockobjects.html">Mock vs Container</link> page to
        understand the differences and why Cactus believes in the
        usefulness of an in-container approach).
      </p>
      <p>
        <link href="how_it_works.html">
        <figure src="images/archiani.gif" alt="How it works ..."/></link>
      </p>
    </s1>

    <s1 title="Different kind of unit tests">

      <p>
        There are several kinds of unit testing frameworks. We categorize them
        in 3 types :
      </p>
      <ol>
        <li>
          <strong>Type 1 : code logic unit testing</strong>. Probably the
          best strategy for these tests is to use a
          <link href="http://www.mockobjects.com">Mock Objects</link> type
          framework.
        </li>
        <li>
          <strong>Type 2 : integration unit testing</strong>. Cactus is
          typically in this category (I'll let you judge if it is the best or
          not :)). These tests will exercise the interactions with the
          container.
        </li>
        <li>
          <strong>Type 3 : functional unit testing</strong>. These unit tests
          will let you test the returned values from your server code. This is
          for example
          <link href="http://sourceforge.net/projects/httpunit">HttpUnit
          </link>.
        </li>
      </ol>
      <p>
        Ideally you would use 3 different frameworks just to unit test your
        code ! Then you have to think about acceptance testing, system
        integration testing, ...
      </p>
      <p>
        Cactus was developed to fit Type 2 but also to be a very good
        compromise for Type 1 and 3, with the idea that it is much easier to
        have to write tests for a single framework than for several ! Moreover,
        you can never fully test your code. We believe Cactus provides a middle
        ground that provides a high confidence that your code will run when
        deployed. However, it is your choice and you can use Cactus only for
        Type 2 if you wish.
      </p>

    </s1>

    <s1 title="Getting Started">

      <p>
        To get started, read the
        <link href="getting_started.html">Getting Started</link> guide.
      </p>

    </s1>

  </body>
</document>