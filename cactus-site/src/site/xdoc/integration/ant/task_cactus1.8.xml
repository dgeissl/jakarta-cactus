<?xml version="1.0"?>

<!--
 * ========================================================================
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * ========================================================================
-->

<document id="task_cactus"
          xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>Cactus Ant Task - version 1.8</title>
    </properties>

    <body>

        <section name="Version 1.8">
            <p>
                The <code>cactus</code> task is being significantly changed in version 1.8 of Cactus,
                and now Cactus uses <a href="http://cargo.codehaus.org/">Cargo project</a> for all
                server-related manipulation. If you use Cactus version gt to 1.8 than you should follow this
                documentation.
            </p>
        </section>

        <section name="Cactus Task">

            <p>
                The task <strong>cactus</strong> is an extension of the
                <strong>junit</strong>
                task that is included in Ant as an optional task.
                <strong>cactus</strong>
                extends <strong>junit</strong> to enable
                in-container tests. It also relies on the <a href="http://cargo.codehaus.org/">Cargo</a> tasks
                to start/stop the server and to deploy the webapplication.
                Currently Cactus works with the latest release of Cargo - 0.9
            </p>

            <p>
                Here are the different steps peformed automatically by the
                <code>cactus</code>
                task:
            </p>
            <ol>
                <li>
                    Invoke <code>cargo</code> task to deploy the cactified WAR/EAR into the target container,
                </li>
                <li>
                    Invoke <code>cargo</code> task and if the container is not already started, start it. Otherwise,
                    leave
                    it running,
                </li>
                <li>
                    Run the Cactus tests,
                </li>
                <li>
                    Invoke the <code>cargo</code> tasks and check if the container was started by the <code>cargo</code> task
                    the
                    stop it. Otherwise, leave it running.
                </li>
            </ol>

            <p>
                For a list of supported containers, you can check the corresponding
                version of
                <a href="http://cargo.codehaus.org/">cargo</a>
            </p>

            <subsection name="Parameters">

                <p>
                    As this task is an extension of the <strong>junit</strong> task, it
                    also supports all attributes that the <strong>junit</strong> task
                    supports. In addition, the following parameters are supported:
                </p>

                <table>
                    <tr>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Required</th>
                    </tr>
                    <tr>
                        <td>
                            <strong>warfile</strong>
                        </td>
                        <td>
                            The web application archive that should be tested. The archive must
                            already contain everything needed for running Cactus tests (it must
                            be
                            <em>
                                <a href="task_cactifywar.html">cactified</a>
                            </em>
                            ).
                        </td>
                        <td>Yes, unless the <em>earfile</em> attribute is specified
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <strong>earfile</strong>
                        </td>
                        <td>
                            The enterprise application archive that should be tested. The
                            archive must contain a web module that already contains everything
                            needed for running Cactus tests (it must be
                            <em>
                                <a href="task_cactifywar.html">cactified</a>
                            </em>
                            ).
                        </td>
                        <td>Yes, unless the <em>warfile</em> attribute is specified
                        </td>
                    </tr>
                </table>

            </subsection>
        </section>


        <section name="Nested Elements">

            <p>
                As this task is an extension of the <strong>junit</strong> task, it
                also supports all the nested elements supported by the
                <strong>junit</strong>
                task. In addition, the following nested
                elements are supported:
            </p>

            <h2>cactusproperty</h2>

                <p>
                    The <strong>cactusproperty</strong> element lets you specify the
                    name of a property file. All the properties specified in this file
                    will be read and set as System properties.
                </p>

                <subsection name="Parameters">

                     <blockquote class="info infomark">
                        The <strong>cactusproperty</strong> element supports the following
                        parameters:
                    </blockquote>

                    <table>
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Required</th>
                        </tr>
                        <tr>
                            <td>server</td>
                            <td>
                                Specifies whether the properties should be added in the Cactus
                                server side JVM ("<code>true</code>") or the Cactus client side
                                JVM ("<code>false</code>").
                            </td>
                            <td>Yes</td>
                        </tr>
                    </table>

                    <p>
                        Example (used for enabling Cactus logging):
                    </p>

                    <source><![CDATA[
<!-- Configure the cactus task for logging -->
<cactusproperty server="false"
    propertiesFile="${target.dir}/logging_client.properties"/>
<cactusproperty server="true"
    propertiesFile="${target.dir}/logging_server.properties"/>
]]></source>

                </subsection>

        </section>

        <section name="containerset">

            <p>
                The <strong>containerset</strong> element lets you specify which
                containers the tests should run against. Every element nested inside
                this element corresponds to a container. See below for a list of
                container elements supported in this element.
            </p>

            <subsection name="Parameters">

                 <blockquote class="info infomark">
                    The <strong>containerset</strong> element supports the following
                    parameters:
                </blockquote>

                <table>
                    <tr>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Required</th>
                    </tr>
                    <tr>
                        <td>timeout</td>
                        <td>
                            Specifies the timeout in milliseconds after which starting up
                            a container should be given up. If the timeout is reached
                            before the container starts responding with a successful HTTP
                            status code, the build will fail.
                        </td>
                        <td>No, default is
                            <em>3 minutes</em>
                        </td>
                    </tr>
                    <tr>
                        <td>proxyport</td>
                        <td>
                            By specifying this attribute it is possible to insert some
                            application that acts as a local TCP/IP proxy between the
                            test runner and the actual containers. Most importantly, that
                            includes applications that record and display the HTTP
                            transactions, which can be helpful in tracking down tricky
                            problems.
                        </td>
                        <td>No</td>
                    </tr>
                    <tr>
                        <td>cargo</td>
                        <td>
                            A list of <code>cargo</code> tasks that are supposed to manipulate
                            the container. For a reference of the parameters that these <code>cargo</code> tasks
                            can get, you can reference the <a href="http://cargo.codehaus.org/">Cargo site</a>.
                        </td>
                        <td>Yes</td>
                    </tr>
                </table>

            </subsection>

        </section>

        <section name="containerclasspath">
            <p>
                The optional <strong>containerclasspath</strong> element lets you
                specify additional jars that will be added to the container
                classpaths that are used to start/stop the containers. This is in
                addition to the container jars which are automatically added by the
                <code>&lt;cactus&gt;</code>
                task. The
                <code>containerclasspath</code>
                element behaves exactly the same as the Ant
                <code>classpath</code>
                element. In most cases you will not need to use this element.
            </p>
        </section>


        <section name="Examples">

            <p>
                The following example demonstrates how to run a suite of Cactus tests
                against two containers (Tomcat 4 and Tomcat5). The <code>cargo</code> task
                in this case is configured with the <code>zipurlinstaller</code>, so the
                containers will be downloaded from the specified URL and then the execution
                will proceed. More on configuring the <code>cargo</code> task, you can look on
                the <a href="http://cargo.codehaus.org/">Cargo site</a>.
            </p>
            <source>
                <pre>
                    <![CDATA[
<cactus warfile="${cactified.servlet.archive.name}"
printsummary="yes">
    <classpath>
        <path refid="cactus.classpath"/>
        <pathelement location="${build.dir}"/>
        <pathelement location="${ivy.lib.dir}/htmlunit-1.10.jar"/>
    </classpath>
    <containerset>
        <cargo containerId="tomcat5x" output="${logs.dir}/output.log" log="${logs.dir}/cargo.log">
            <zipUrlInstaller
              installUrl="${tomca5x.url}"
              installDir="${target.dir}/${tomcat.container.id}"/>
            <configuration>
                <property name="cargo.servlet.port" value="${cargo.servlet.port}"/>
                <property name="cargo.logging" value="${cargo.logging}"/>
                <deployable type="${cactus.sample.archive.type}" 
                  file="${cactified.servlet.archive.name}"/>
            </configuration>
        </cargo>
    
        <cargo containerId="tomcat4x" output="${logs.dir}/output.log" log="${logs.dir}/cargo.log">
            <zipUrlInstaller
              installUrl="$"{tomcat4x.url}
              installDir="${target.dir}/${tomcat.container.id}"/>
            <configuration>
                <property name="cargo.servlet.port" value="${cargo.servlet.port}"/>
                <property name="cargo.logging" value="${cargo.logging}"/>
                <deployable type="${cactus.sample.archive.type}" 
                  file="${cactified.servlet.archive.name}"/>
            </configuration>
        </cargo>
    </containerset>
    
    <sysproperty key="prop1" value="value1"/>
    <sysproperty key="prop2" value="value2"/>
    
    <formatter type="${cactus.formatter.type}"/>
    
    <batchtest todir="${reports.dir}">
      <fileset dir="${cactus.src.dir}">
        <include name="**/Test*.java"/>
      </fileset>
    </batchtest>
</cactus>
]]>
                </pre>
            </source>
        </section>

    </body>
</document>
