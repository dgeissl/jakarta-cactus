<?xml version="1.0"?>

<!--
 * ========================================================================
 * 
 * Copyright 2001-2004 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * ========================================================================
-->

<document id="task_cactus">

  <properties>
    <title>Cactus Ant Task - version 1.8</title>
  </properties>

  <body>
  
    <section name="Version 1.8">
      <p>
        The <code>cactus</code> task is being significantly changed in version 1.8 of Cactus,
        and now Cactus uses <a href="http://cargo.codehaus.org/">Cargo project</a> for all
        server-related manipulation. If you use Cactus version gt to 1.8 than you should follow this 
        documentation.
      </p>
    </section>

	  <section name="Cactus Task">

    <p>
      The task <strong>cactus</strong> is an extension of the
      <strong>junit</strong> task that is included in Ant as an optional task.
      <strong>cactus</strong> extends <strong>junit</strong> to enable
      in-container tests. It also relies on the <a href="http://cargo.codehaus.org/">Cargo</a> tasks 
      to start/stop the server and to deploy the webapplication.
      Currently Cactus works with the latest release of Cargo - 0.9
    </p>

    <p>
      Here are the different steps peformed automatically by the 
      <code>cactus</code> task:
    </p>
    <ol>
      <li>
        Invoke <code>cargo</code> task to deploy the cactified WAR/EAR into the target container,
      </li>
      <li>
        Invoke <code>cargo</code> task and if the container is not already started, start it. Otherwise, leave
        it running,
      </li>
      <li>
        Run the Cactus tests,
      </li>
      <li>
        Invoke the <code>cargo</code> tasks and check if the container was started by the <code>cargo</code> task the
        stop it. Otherwise, leave it running.
      </li>
    </ol>

    <p>
        For a list of supported containers, you can check the corresponding 
        version of <a href="http://cargo.codehaus.org/">cargo</a>
    </p>

    <subsection name="Parameters">

      <p>
        As this task is an extension of the <strong>junit</strong> task, it
        also supports all attributes that the <strong>junit</strong> task
        supports. In addition, the following parameters are supported:
      </p>

      <table>
        <tr>
          <th>Name</th>
          <th>Description</th>
          <th>Required</th>
        </tr>
        <tr>
          <td><strong>warfile</strong></td>
          <td>
            The web application archive that should be tested. The archive must
            already contain everything needed for running Cactus tests (it must
	    be <em><a href="task_cactifywar.html">cactified</a></em>).
          </td>
          <td>Yes, unless the <em>earfile</em> attribute is specified</td>
        </tr>
        <tr>
          <td><strong>earfile</strong></td>
          <td>
            The enterprise application archive that should be tested. The
            archive must contain a web module that already contains everything
            needed for running Cactus tests (it must be
	    <em><a href="task_cactifywar.html">cactified</a></em>).
          </td>
          <td>Yes, unless the <em>warfile</em> attribute is specified</td>
        </tr>
      </table>

    </subsection>
    </section>
    
    
    <section name="Nested Elements">

      <p>
        As this task is an extension of the <strong>junit</strong> task, it
        also supports all the nested elements supported by the
        <strong>junit</strong> task. In addition, the following nested 
        elements are supported:
      </p>

      <section name="cactusproperty">
      
        <p>
          The <strong>cactusproperty</strong> element lets you specify the
          name of a property file. All the properties specified in this file
          will be read and set as System properties.
        </p>

	<subsection name="Parameters">

          <note>
            The <strong>cactusproperty</strong> element supports the following
            parameters:
          </note>

          <table>
            <tr>
              <th>Name</th>
              <th>Description</th>
              <th>Required</th>
            </tr>
            <tr>
              <td>server</td>
              <td>
                Specifies whether the properties should be added in the Cactus
                server side JVM ("<code>true</code>") or the Cactus client side 
                JVM ("<code>false</code>").
              </td>
              <td>Yes</td>
            </tr>
          </table>

          <p>
            Example (used for enabling Cactus logging):
          </p>      

<source><![CDATA[
<!-- Configure the cactus task for logging -->
<cactusproperty server="false"
    propertiesFile="${target.dir}/logging_client.properties"/>
<cactusproperty server="true"
    propertiesFile="${target.dir}/logging_server.properties"/>
]]></source>
              
        </subsection>
        
	</section>
</section>

      <section name="containerset">

        <p>
          The <strong>containerset</strong> element lets you specify which
          containers the tests should run against. Every element nested inside
          this element corresponds to a container. See below for a list of 
          container elements supported in this element.
        </p>

	<subsection name="Parameters">

          <note>
            The <strong>containerset</strong> element supports the following
            parameters:
          </note>

          <table>
            <tr>
              <th>Name</th>
              <th>Description</th>
              <th>Required</th>
            </tr>
            <tr>
              <td>timeout</td>
              <td>
                Specifies the timeout in milliseconds after which starting up
                a container should be given up. If the timeout is reached
                before the container starts responding with a successful HTTP
                status code, the build will fail.
              </td>
              <td>No, default is <em>3 minutes</em></td>
            </tr>
            <tr>
              <td>proxyport</td>
              <td>
                By specifying this attribute it is possible to insert some
                application that acts as a local TCP/IP proxy between the
                test runner and the actual containers. Most importantly, that
                includes applications that record and display the HTTP
                transactions, which can be helpful in tracking down tricky 
                problems.
              </td>
              <td>No</td>
            </tr>
            <tr>
              <td>cargo</td>
              <td>
                A list of <code>cargo</code> tasks that are supposed to manipulate
                the container. For a reference of the parameters that these <code>cargo</code> tasks 
                can get, you can reference the <a href="http://cargo.codehaus.org/">Cargo site</a>.  
              </td>
              <td>Yes</td>
            </tr>
          </table>

  	</subsection>

      </section>

      <section name="containerclasspath">
        <p>
          The optional <strong>containerclasspath</strong> element lets you 
          specify additional jars that will be added to the container 
          classpaths that are used to start/stop the containers. This is in 
          addition to the container jars which are automatically added by the
          <code>&lt;cactus&gt;</code> task. The <code>containerclasspath</code>
          element behaves exactly the same as the Ant <code>classpath</code>
          element. In most cases you will not need to use this element.
        </p>
      </section>



    

	

    <section name="Examples">

      <p>
        The following example demonstrates how to run a suite of Cactus tests
        against three contains with builtin support (JBoss 3, Resin 2 and
        Tomcat 4).
      </p>
<source>

      <![CDATA[
<cactus warfile="${test.dir}/test.war"
    printsummary="yes" failureproperty="tests.failed">
  <classpath>
    <path refid="cactus.classpath"/>
    <pathelement location="${build.classes.dir}"/>
    <pathelement location="${test.classes.dir}"/>
  </classpath>
  <containerset>
    <jboss2x dir="${jboss3x.home}" config="default"
        todir="${test.reports.dir}/jboss3x"/>
    <resin2x dir="${resin2x.home}" port="8080"
        todir="${test.reports.dir}/resin2x"/>
    <tomcat4x dir="${tomcat4x.home}" port="8080"
        todir="${test.reports.dir}/tomcat4x"/>
  </containerset>
  <formatter type="xml"/>
  <batchtest>
    <fileset dir="${src.test.dir}">
      <include name="**/Test*.java"/>
      <exclude name="**/TestAll.java"/>
    </fileset>
  </batchtest>
</cactus>
]]>

<![CDATA[
		<cactus warfile="${cactified.servlet.archive.name}"
			printsummary="yes">
			<classpath>
				<path refid="cactus.classpath"/>
				<pathelement location="${build.dir}"/>
				<pathelement location="${ivy.lib.dir}/htmlunit-1.10.jar"/>
			</classpath>
			<containerset>
				<cargo containerId="${tomcat.container.id}" output="${logs.dir}/output.log" log="${logs.dir}/cargo.log">
				 <zipUrlInstaller
            installUrl="http://apache.speedbone.de/tomcat/tomcat-5/v5.5.25/bin/apache-tomcat-5.5.25.zip"
            installDir="${target.dir}/${tomcat.container.id}"/>
				<configuration>
						<property name="cargo.servlet.port" value="${cargo.servlet.port}"/>
						<property name="cargo.logging" value="${cargo.logging}"/>
						<deployable type="${cactus.sample.archive.type}" file="${cactified.servlet.archive.name}"/>
					</configuration>
				</cargo>
			</containerset>
			<sysproperty key="prop1" value="value1"/>
			<sysproperty key="prop2" value="value2"/>
			<formatter type="${cactus.formatter.type}"/>
  			<batchtest todir="${reports.dir}">
  				<fileset dir="${src.dir}">   <!-- cactus.src.dir ?-->
  					<include name="**/Test*.java"/>
  				</fileset>
  			</batchtest>
		</cactus>
]]>



</source>

      <p>
        The next example shows the use of the <strong>generic</strong>
        container element for starting/stopping a custom container. You need
        to define the two targets <em>mycontainer.start</em> and
        <em>mycontainer.stop</em>, so that the container is started up (on 
        port 8080) before the tests are run, and shut down after the tests
        completed. How these targets are implemented is highly dependant on
        the container. Most likely you'll need to copy some files and use
        the <strong>&lt;java&gt;</strong> task to invoke a container-provided
        Java class that can start/stop the container.
      </p>

      <source><![CDATA[
<cactus warfile="${test.dir}/test.war"
    printsummary="yes" failureproperty="tests.failed">
  <classpath>
    <path refid="cactus.runtime.classpath"/>
    <pathelement location="${build.classes.dir}"/>
    <pathelement location="${test.classes.dir}"/>
  </classpath>
  <containerset>
    <generic name="My Container" port="8080">
      <startup target="mycontainer.start"/>
      <shutdown target="mycontainer.stop"/>
    </generic>
  </containerset>
  <formatter type="xml"/>
  <batchtest>
    <fileset dir="${src.test.dir}">
      <include name="**/Test*.java"/>
      <exclude name="**/TestAll.java"/>
    </fileset>
  </batchtest>
</cactus>
]]></source>

    </section>

  </body>
</document>
